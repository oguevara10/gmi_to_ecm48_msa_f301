###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  11:13:08
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_hal_pwr_ex.c
#    Command line      =
#        -f C:\Users\100001~1\AppData\Local\Temp\EW44B6.tmp
#        (C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_hal_pwr_ex.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List\stm32f3xx_hal_pwr_ex.lst
#    Object file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj\stm32f3xx_hal_pwr_ex.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_hal_pwr_ex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f3xx_hal_pwr_ex.c
      4            * @author  MCD Application Team
      5            * @brief   Extended PWR HAL module driver.
      6            *          This file provides firmware functions to manage the following
      7            *          functionalities of the Power Controller (PWR) peripheral:
      8            *           + Extended Initialization and de-initialization functions
      9            *           + Extended Peripheral Control functions
     10            *         
     11            ******************************************************************************
     12            * @attention
     13            *
     14            * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
     15            * All rights reserved.</center></h2>
     16            *
     17            * This software component is licensed by ST under BSD 3-Clause license,
     18            * the "License"; You may not use this file except in compliance with the
     19            * License. You may obtain a copy of the License at:
     20            *                        opensource.org/licenses/BSD-3-Clause
     21            *
     22            ******************************************************************************
     23            */
     24          
     25          /* Includes ------------------------------------------------------------------*/
     26          #include "stm32f3xx_hal.h"
     27          
     28          /** @addtogroup STM32F3xx_HAL_Driver
     29            * @{
     30            */
     31          
     32          /** @defgroup PWREx PWREx
     33            * @brief    PWREx HAL module driver
     34            * @{
     35            */
     36          
     37          #ifdef HAL_PWR_MODULE_ENABLED
     38          
     39          /* Private typedef -----------------------------------------------------------*/
     40          /* Private define ------------------------------------------------------------*/
     41          /** @defgroup PWREx_Private_Constants PWR Extended Private Constants
     42            * @{
     43            */
     44          #define PVD_MODE_IT               (0x00010000U)
     45          #define PVD_MODE_EVT              (0x00020000U)
     46          #define PVD_RISING_EDGE           (0x00000001U)
     47          #define PVD_FALLING_EDGE          (0x00000002U)
     48          /**
     49            * @}
     50            */
     51           
     52          /* Private macro -------------------------------------------------------------*/
     53          /* Private variables ---------------------------------------------------------*/
     54          /* Private function prototypes -----------------------------------------------*/
     55          /* Exported functions ---------------------------------------------------------*/
     56          
     57          /** @defgroup PWREx_Exported_Functions PWR Extended Exported Functions
     58            * @{
     59            */
     60          
     61          /** @defgroup PWREx_Exported_Functions_Group1 Peripheral Extended Control Functions
     62            *  @brief   Extended Peripheral Control functions
     63            *
     64          @verbatim
     65          
     66           ===============================================================================
     67                           ##### Peripheral Extended control functions #####
     68           ===============================================================================
     69              *** PVD configuration (present on all other devices than STM32F3x8 devices) ***
     70              =========================
     71              [..]
     72                (+) The PVD is used to monitor the VDD power supply by comparing it to a
     73                    threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
     74                (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower
     75                    than the PVD threshold. This event is internally connected to the EXTI
     76                    line16 and can generate an interrupt if enabled. This is done through
     77                    __HAL_PWR_PVD_EXTI_ENABLE_IT() macro
     78                (+) The PVD is stopped in Standby mode.
     79                -@- PVD is not available on STM32F3x8 Product Line
     80          
     81          
     82              *** Voltage regulator ***
     83              =========================
     84              [..]
     85                (+) The voltage regulator is always enabled after Reset. It works in three different
     86                    modes.
     87                    In Run mode, the regulator supplies full power to the 1.8V domain (core, memories
     88                    and digital peripherals).
     89                    In Stop mode, the regulator supplies low power to the 1.8V domain, preserving
     90                    contents of registers and SRAM.
     91                    In Stop mode, the regulator is powered off. The contents of the registers and SRAM
     92                    are lost except for the Standby circuitry and the Backup Domain.
     93                    Note: in the STM32F3x8xx devices, the voltage regulator is bypassed and the
     94                    microcontroller must be powered from a nominal VDD = 1.8V +/-8U% voltage.
     95          
     96          
     97                (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower
     98                    than the PVD threshold. This event is internally connected to the EXTI
     99                    line16 and can generate an interrupt if enabled. This is done through
    100                    __HAL_PWR_PVD_EXTI_ENABLE_IT() macro
    101                (+) The PVD is stopped in Standby mode.
    102          
    103          
    104              *** SDADC power configuration ***
    105              ================================
    106              [..]
    107                (+) On STM32F373xC/STM32F378xx devices, there are up to 
    108                    3 SDADC instances that can be enabled/disabled.
    109          
    110          @endverbatim
    111            * @{
    112            */
    113          
    114          #if defined(STM32F302xE) || defined(STM32F303xE) || \
    115              defined(STM32F302xC) || defined(STM32F303xC) || \
    116              defined(STM32F303x8) || defined(STM32F334x8) || \
    117              defined(STM32F301x8) || defined(STM32F302x8) || \
    118              defined(STM32F373xC)
    119          
    120          /**
    121            * @brief Configures the voltage threshold detected by the Power Voltage Detector(PVD).
    122            * @param sConfigPVD pointer to an PWR_PVDTypeDef structure that contains the configuration
    123            *        information for the PVD.
    124            * @note Refer to the electrical characteristics of your device datasheet for
    125            *         more details about the voltage threshold corresponding to each
    126            *         detection level.
    127            * @retval None
    128            */

   \                                 In section .text, align 2, keep-with-next
    129          void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
    130          {
    131            /* Check the parameters */
    132            assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
    133            assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
    134          
    135            /* Set PLS[7:5] bits according to PVDLevel value */
    136            MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
   \                     HAL_PWR_ConfigPVD: (+1)
   \        0x0   0x....             LDR.N    R2,??DataTable3  ;; 0x40007000
   \        0x2   0x6813             LDR      R3,[R2, #+0]
   \        0x4   0x6801             LDR      R1,[R0, #+0]
   \        0x6   0xF023 0x03E0      BIC      R3,R3,#0xE0
   \        0xA   0x430B             ORRS     R3,R1,R3
    137            
    138            /* Clear any previous config. Keep it clear if no event or IT mode is selected */
    139            __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
   \        0xC   0x....             LDR.N    R1,??DataTable3_1  ;; 0x40010400
   \        0xE   0x6013             STR      R3,[R2, #+0]
   \       0x10   0x684A             LDR      R2,[R1, #+4]
   \       0x12   0xF422 0x3280      BIC      R2,R2,#0x10000
   \       0x16   0x604A             STR      R2,[R1, #+4]
    140            __HAL_PWR_PVD_EXTI_DISABLE_IT();
   \       0x18   0x680B             LDR      R3,[R1, #+0]
   \       0x1A   0xF423 0x3380      BIC      R3,R3,#0x10000
   \       0x1E   0x600B             STR      R3,[R1, #+0]
    141            __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
   \       0x20   0x688A             LDR      R2,[R1, #+8]
   \       0x22   0xF422 0x3280      BIC      R2,R2,#0x10000
   \       0x26   0x608A             STR      R2,[R1, #+8]
   \       0x28   0x68CA             LDR      R2,[R1, #+12]
   \       0x2A   0xF422 0x3280      BIC      R2,R2,#0x10000
   \       0x2E   0x60CA             STR      R2,[R1, #+12]
    142          
    143            /* Configure interrupt mode */
    144            if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
   \       0x30   0x6842             LDR      R2,[R0, #+4]
   \       0x32   0x03D3             LSLS     R3,R2,#+15
   \       0x34   0xD503             BPL.N    ??HAL_PWR_ConfigPVD_0
    145            {
    146              __HAL_PWR_PVD_EXTI_ENABLE_IT();
   \       0x36   0x680A             LDR      R2,[R1, #+0]
   \       0x38   0xF442 0x3280      ORR      R2,R2,#0x10000
   \       0x3C   0x600A             STR      R2,[R1, #+0]
    147            }
    148            
    149            /* Configure event mode */
    150            if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
   \                     ??HAL_PWR_ConfigPVD_0: (+1)
   \       0x3E   0x6842             LDR      R2,[R0, #+4]
   \       0x40   0x0393             LSLS     R3,R2,#+14
   \       0x42   0xD503             BPL.N    ??HAL_PWR_ConfigPVD_1
    151            {
    152              __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
   \       0x44   0x684A             LDR      R2,[R1, #+4]
   \       0x46   0xF442 0x3280      ORR      R2,R2,#0x10000
   \       0x4A   0x604A             STR      R2,[R1, #+4]
    153            }
    154            
    155            /* Configure the edge */
    156            if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
   \                     ??HAL_PWR_ConfigPVD_1: (+1)
   \       0x4C   0x7902             LDRB     R2,[R0, #+4]
   \       0x4E   0x07D3             LSLS     R3,R2,#+31
   \       0x50   0xD503             BPL.N    ??HAL_PWR_ConfigPVD_2
    157            {
    158              __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
   \       0x52   0x688A             LDR      R2,[R1, #+8]
   \       0x54   0xF442 0x3280      ORR      R2,R2,#0x10000
   \       0x58   0x608A             STR      R2,[R1, #+8]
    159            }
    160            
    161            if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
   \                     ??HAL_PWR_ConfigPVD_2: (+1)
   \       0x5A   0x7900             LDRB     R0,[R0, #+4]
   \       0x5C   0x0782             LSLS     R2,R0,#+30
   \       0x5E   0xD503             BPL.N    ??HAL_PWR_ConfigPVD_3
    162            {
    163              __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
   \       0x60   0x68C8             LDR      R0,[R1, #+12]
   \       0x62   0xF440 0x3080      ORR      R0,R0,#0x10000
   \       0x66   0x60C8             STR      R0,[R1, #+12]
    164            }
    165          }
   \                     ??HAL_PWR_ConfigPVD_3: (+1)
   \       0x68   0x4770             BX       LR               ;; return
    166          
    167          /**
    168            * @brief Enables the Power Voltage Detector(PVD).
    169            * @retval None
    170            */

   \                                 In section .text, align 2, keep-with-next
    171          void HAL_PWR_EnablePVD(void)
    172          {
    173            SET_BIT(PWR->CR, PWR_CR_PVDE);  
   \                     HAL_PWR_EnablePVD: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable3  ;; 0x40007000
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0xF041 0x0110      ORR      R1,R1,#0x10
   \        0x8   0x6001             STR      R1,[R0, #+0]
    174          }
   \        0xA   0x4770             BX       LR               ;; return
    175          
    176          /**
    177            * @brief Disables the Power Voltage Detector(PVD).
    178            * @retval None
    179            */

   \                                 In section .text, align 2, keep-with-next
    180          void HAL_PWR_DisablePVD(void)
    181          {
    182            CLEAR_BIT(PWR->CR, PWR_CR_PVDE);  
   \                     HAL_PWR_DisablePVD: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable3  ;; 0x40007000
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0xF021 0x0110      BIC      R1,R1,#0x10
   \        0x8   0x6001             STR      R1,[R0, #+0]
    183          }
   \        0xA   0x4770             BX       LR               ;; return
    184          
    185          /**
    186            * @brief This function handles the PWR PVD interrupt request.
    187            * @note This API should be called under the PVD_IRQHandler().
    188            * @retval None
    189            */

   \                                 In section .text, align 2, keep-with-next
    190          void HAL_PWR_PVD_IRQHandler(void)
    191          {
   \                     HAL_PWR_PVD_IRQHandler: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    192            /* Check PWR exti flag */
    193            if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
   \        0x2   0x....             LDR.N    R4,??DataTable3_2  ;; 0x40010414
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x03C1             LSLS     R1,R0,#+15
   \        0x8   0xD504             BPL.N    ??HAL_PWR_PVD_IRQHandler_0
    194            {
    195              /* PWR PVD interrupt user callback */
    196              HAL_PWR_PVDCallback();
   \        0xA   0x....'....        BL       HAL_PWR_PVDCallback
    197          
    198              /* Clear PWR Exti pending bit */
    199              __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
   \        0xE   0xF44F 0x3080      MOV      R0,#+65536
   \       0x12   0x6020             STR      R0,[R4, #+0]
    200            }
    201          }
   \                     ??HAL_PWR_PVD_IRQHandler_0: (+1)
   \       0x14   0xBD10             POP      {R4,PC}          ;; return
    202          
    203          /**
    204            * @brief PWR PVD interrupt callback
    205            * @retval None
    206            */

   \                                 In section .text, align 2
    207          __weak void HAL_PWR_PVDCallback(void)
    208          {
    209            /* NOTE : This function Should not be modified, when the callback is needed,
    210                      the HAL_PWR_PVDCallback could be implemented in the user file
    211             */
    212          }
   \                     HAL_PWR_PVDCallback: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x4000'7000        DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x4001'0400        DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x4001'0414        DC32     0x40010414
    213          
    214          #endif /* STM32F302xE || STM32F303xE || */
    215                 /* STM32F302xC || STM32F303xC || */
    216                 /* STM32F303x8 || STM32F334x8 || */
    217                 /* STM32F301x8 || STM32F302x8 || */
    218                 /* STM32F373xC                   */
    219          
    220          #if defined(STM32F373xC) || defined(STM32F378xx)
    221          
    222          /**
    223            * @brief  Enables the SDADC peripheral functionaliy
    224            * @param  Analogx specifies the SDADC peripheral instance.
    225            *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
    226            * @retval None
    227            */
    228          void HAL_PWREx_EnableSDADC(uint32_t Analogx)
    229          {
    230            /* Check the parameters */
    231            assert_param(IS_PWR_SDADC_ANALOG(Analogx));
    232          
    233            /* Enable PWR clock interface for SDADC use */
    234            __HAL_RCC_PWR_CLK_ENABLE();
    235              
    236            PWR->CR |= Analogx;
    237          }
    238          
    239          /**
    240            * @brief  Disables the SDADC peripheral functionaliy
    241            * @param  Analogx specifies the SDADC peripheral instance.
    242            *   This parameter can be: PWR_SDADC_ANALOG1, PWR_SDADC_ANALOG2 or PWR_SDADC_ANALOG3.
    243            * @retval None
    244            */
    245          void HAL_PWREx_DisableSDADC(uint32_t Analogx)
    246          {
    247            /* Check the parameters */
    248            assert_param(IS_PWR_SDADC_ANALOG(Analogx));
    249            
    250            PWR->CR &= ~Analogx;
    251          }
    252          
    253          #endif /* STM32F373xC || STM32F378xx */
    254          
    255          /**
    256            * @}
    257            */
    258          
    259          /**
    260            * @}
    261            */
    262          
    263          #endif /* HAL_PWR_MODULE_ENABLED */
    264          /**
    265            * @}
    266            */
    267          
    268          /**
    269            * @}
    270            */
    271          
    272          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_PWR_ConfigPVD
       0   HAL_PWR_DisablePVD
       0   HAL_PWR_EnablePVD
       0   HAL_PWR_PVDCallback
       8   HAL_PWR_PVD_IRQHandler
         8   -> HAL_PWR_PVDCallback


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
     106  HAL_PWR_ConfigPVD
      12  HAL_PWR_DisablePVD
      12  HAL_PWR_EnablePVD
       2  HAL_PWR_PVDCallback
      22  HAL_PWR_PVD_IRQHandler

 
 166 bytes in section .text
 
 164 bytes of CODE memory (+ 2 bytes shared)

Errors: none
Warnings: none
