###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  11:13:09
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_hal_rcc_ex.c
#    Command line      =
#        -f C:\Users\100001~1\AppData\Local\Temp\EW4767.tmp
#        (C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_hal_rcc_ex.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List\stm32f3xx_hal_rcc_ex.lst
#    Object file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj\stm32f3xx_hal_rcc_ex.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_hal_rcc_ex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f3xx_hal_rcc_ex.c
      4            * @author  MCD Application Team
      5            * @brief   Extended RCC HAL module driver.
      6            *          This file provides firmware functions to manage the following 
      7            *          functionalities RCC extension peripheral:
      8            *           + Extended Peripheral Control functions
      9            *  
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
     14            * All rights reserved.</center></h2>
     15            *
     16            * This software component is licensed by ST under BSD 3-Clause license,
     17            * the "License"; You may not use this file except in compliance with the
     18            * License. You may obtain a copy of the License at:
     19            *                        opensource.org/licenses/BSD-3-Clause
     20            *
     21            ******************************************************************************
     22            */ 
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm32f3xx_hal.h"
     26          
     27          /** @addtogroup STM32F3xx_HAL_Driver
     28            * @{
     29            */
     30          
     31          #ifdef HAL_RCC_MODULE_ENABLED
     32          
     33          /** @defgroup RCCEx RCCEx
     34            * @brief RCC Extension HAL module driver.
     35            * @{
     36            */
     37          
     38          /* Private typedef -----------------------------------------------------------*/
     39          /* Private define ------------------------------------------------------------*/
     40          /* Private macro -------------------------------------------------------------*/
     41          /** @defgroup RCCEx_Private_Macros RCCEx Private Macros
     42           * @{
     43           */
     44          /**
     45            * @}
     46            */
     47          
     48          /* Private variables ---------------------------------------------------------*/
     49          /* Private function prototypes -----------------------------------------------*/
     50          /* Private functions ---------------------------------------------------------*/
     51          #if defined(RCC_CFGR2_ADC1PRES) || defined(RCC_CFGR2_ADCPRE12) || defined(RCC_CFGR2_ADCPRE34) || defined(RCC_CFGR_USBPRE) \
     52           || defined(RCC_CFGR3_TIM1SW) || defined(RCC_CFGR3_TIM2SW) || defined(RCC_CFGR3_TIM8SW) || defined(RCC_CFGR3_TIM15SW)     \
     53           || defined(RCC_CFGR3_TIM16SW) || defined(RCC_CFGR3_TIM17SW) || defined(RCC_CFGR3_TIM20SW) || defined(RCC_CFGR3_TIM34SW)  \
     54           || defined(RCC_CFGR3_HRTIM1SW)
     55          /** @defgroup RCCEx_Private_Functions RCCEx Private Functions
     56            * @{
     57            */
     58          static uint32_t RCC_GetPLLCLKFreq(void);
     59          
     60          /**
     61            * @}
     62            */
     63          #endif /* RCC_CFGR2_ADC1PRES || RCC_CFGR2_ADCPRExx || RCC_CFGR3_TIMxSW || RCC_CFGR3_HRTIM1SW || RCC_CFGR_USBPRE */
     64          
     65          /** @defgroup RCCEx_Exported_Functions RCCEx Exported Functions
     66            * @{
     67            */
     68          
     69          /** @defgroup RCCEx_Exported_Functions_Group1 Extended Peripheral Control functions 
     70            * @brief    Extended Peripheral Control functions
     71            *
     72          @verbatim   
     73           ===============================================================================
     74                          ##### Extended Peripheral Control functions  #####
     75           ===============================================================================  
     76              [..]
     77              This subsection provides a set of functions allowing to control the RCC Clocks 
     78              frequencies.
     79              [..] 
     80              (@) Important note: Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to
     81                  select the RTC clock source; in this case the Backup domain will be reset in  
     82                  order to modify the RTC Clock source, as consequence RTC registers (including 
     83                  the backup registers) are set to their reset values.
     84                
     85          @endverbatim
     86            * @{
     87            */
     88          
     89          /**
     90            * @brief  Initializes the RCC extended peripherals clocks according to the specified
     91            *         parameters in the RCC_PeriphCLKInitTypeDef.
     92            * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
     93            *         contains the configuration information for the Extended Peripherals clocks
     94            *         (ADC, CEC, I2C, I2S, SDADC, HRTIM, TIM, USART, RTC and USB).
     95            *
     96            * @note   Care must be taken when HAL_RCCEx_PeriphCLKConfig() is used to select 
     97            *         the RTC clock source; in this case the Backup domain will be reset in  
     98            *         order to modify the RTC Clock source, as consequence RTC registers (including 
     99            *         the backup registers) and RCC_BDCR register are set to their reset values.
    100            *
    101            * @note   When the TIMx clock source is APB clock, so the TIMx clock is APB clock or 
    102            *         APB clock x 2 depending on the APB prescaler.
    103            *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
    104            *
    105            * @retval HAL status
    106            */

   \                                 In section .text, align 2, keep-with-next
    107          HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
    108          {
   \                     HAL_RCCEx_PeriphCLKConfig: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
    109            uint32_t tickstart = 0U;
    110            uint32_t temp_reg = 0U;
    111              
    112            /* Check the parameters */
    113            assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
    114            
    115            /*---------------------------- RTC configuration -------------------------------*/
    116            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
   \        0x6   0x....'....        LDR.W    R6,??DataTable4  ;; 0x40021004
   \        0xA   0x6828             LDR      R0,[R5, #+0]
   \        0xC   0x03C1             LSLS     R1,R0,#+15
   \        0xE   0xD553             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_0
    117            {
    118              /* check for RTC Parameters used to output RTCCLK */
    119              assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    120          
    121              FlagStatus       pwrclkchanged = RESET;
    122          
    123              /* As soon as function is called to change RTC clock source, activation of the 
    124                 power domain is done. */
    125              /* Requires to enable write access to Backup Domain of necessary */
    126              if(__HAL_RCC_PWR_IS_CLK_DISABLED())
   \       0x10   0x69B0             LDR      R0,[R6, #+24]
   \       0x12   0x2400             MOVS     R4,#+0
   \       0x14   0x00C1             LSLS     R1,R0,#+3
   \       0x16   0xD409             BMI.N    ??HAL_RCCEx_PeriphCLKConfig_1
    127              {
    128                __HAL_RCC_PWR_CLK_ENABLE();
   \       0x18   0x69B0             LDR      R0,[R6, #+24]
   \       0x1A   0xF040 0x5080      ORR      R0,R0,#0x10000000
   \       0x1E   0x61B0             STR      R0,[R6, #+24]
    129                pwrclkchanged = SET;
   \       0x20   0x2401             MOVS     R4,#+1
   \       0x22   0x69B0             LDR      R0,[R6, #+24]
   \       0x24   0xF000 0x5080      AND      R0,R0,#0x10000000
   \       0x28   0x9000             STR      R0,[SP, #+0]
   \       0x2A   0x9800             LDR      R0,[SP, #+0]
    130              }
    131              
    132              if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
   \                     ??HAL_RCCEx_PeriphCLKConfig_1: (+1)
   \       0x2C   0x....'....        LDR.W    R7,??DataTable4_1  ;; 0x40007000
   \       0x30   0x6838             LDR      R0,[R7, #+0]
   \       0x32   0x05C1             LSLS     R1,R0,#+23
   \       0x34   0xD411             BMI.N    ??HAL_RCCEx_PeriphCLKConfig_2
    133              {
    134                /* Enable write access to Backup domain */
    135                SET_BIT(PWR->CR, PWR_CR_DBP);
   \       0x36   0x6838             LDR      R0,[R7, #+0]
   \       0x38   0xF440 0x7080      ORR      R0,R0,#0x100
   \       0x3C   0x6038             STR      R0,[R7, #+0]
    136                
    137                /* Wait for Backup domain Write protection disable */
    138                tickstart = HAL_GetTick();
   \       0x3E   0x....'....        BL       HAL_GetTick
   \       0x42   0x4680             MOV      R8,R0
    139                
    140                while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
   \                     ??HAL_RCCEx_PeriphCLKConfig_3: (+1)
   \       0x44   0x6838             LDR      R0,[R7, #+0]
   \       0x46   0x05C1             LSLS     R1,R0,#+23
   \       0x48   0xD407             BMI.N    ??HAL_RCCEx_PeriphCLKConfig_2
    141                {
    142                    if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
   \       0x4A   0x....'....        BL       HAL_GetTick
   \       0x4E   0xEBA0 0x0008      SUB      R0,R0,R8
   \       0x52   0x2865             CMP      R0,#+101
   \       0x54   0xD3F6             BCC.N    ??HAL_RCCEx_PeriphCLKConfig_3
    143                  {
    144                    return HAL_TIMEOUT;
    145                  }
    146                }
    147              }
    148              
    149              /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    150              temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    151              if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    152              {
    153                /* Store the content of BDCR register before the reset of Backup Domain */
    154                temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
    155                /* RTC Clock selection can be changed only if the Backup Domain is reset */
    156                __HAL_RCC_BACKUPRESET_FORCE();
    157                __HAL_RCC_BACKUPRESET_RELEASE();
    158                /* Restore the Content of BDCR register */
    159                RCC->BDCR = temp_reg;
    160              
    161                /* Wait for LSERDY if LSE was enabled */
    162                if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
    163                {
    164                  /* Get Start Tick */
    165                  tickstart = HAL_GetTick();
    166                  
    167                  /* Wait till LSE is ready */  
    168                  while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
    169                  {
    170                      if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
    171                    {
    172                      return HAL_TIMEOUT;
   \                     ??HAL_RCCEx_PeriphCLKConfig_4: (+1)
   \       0x56   0x2003             MOVS     R0,#+3
   \       0x58   0xE092             B.N      ??HAL_RCCEx_PeriphCLKConfig_5
    173                    }      
   \                     ??HAL_RCCEx_PeriphCLKConfig_2: (+1)
   \       0x5A   0x69F0             LDR      R0,[R6, #+28]
   \       0x5C   0xF410 0x7040      ANDS     R0,R0,#0x300
   \       0x60   0xBF1E             ITTT     NE
   \       0x62   0x6869             LDRNE    R1,[R5, #+4]
   \       0x64   0xF401 0x7140      ANDNE    R1,R1,#0x300
   \       0x68   0x4288             CMPNE    R0,R1
   \       0x6A   0xD01A             BEQ.N    ??HAL_RCCEx_PeriphCLKConfig_6
   \       0x6C   0x....'....        LDR.W    R1,??DataTable4_2  ;; 0x42420440
   \       0x70   0x69F0             LDR      R0,[R6, #+28]
   \       0x72   0x2201             MOVS     R2,#+1
   \       0x74   0x600A             STR      R2,[R1, #+0]
   \       0x76   0x2300             MOVS     R3,#+0
   \       0x78   0xF420 0x7040      BIC      R0,R0,#0x300
   \       0x7C   0x600B             STR      R3,[R1, #+0]
   \       0x7E   0x61F0             STR      R0,[R6, #+28]
   \       0x80   0x07C0             LSLS     R0,R0,#+31
   \       0x82   0xD50E             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_6
   \       0x84   0x....'....        BL       HAL_GetTick
   \       0x88   0x4607             MOV      R7,R0
   \                     ??HAL_RCCEx_PeriphCLKConfig_7: (+1)
   \       0x8A   0x69F0             LDR      R0,[R6, #+28]
   \       0x8C   0xF3C0 0x0040      UBFX     R0,R0,#+1,#+1
   \       0x90   0xB938             CBNZ.N   R0,??HAL_RCCEx_PeriphCLKConfig_6
   \       0x92   0x....'....        BL       HAL_GetTick
   \       0x96   0x1BC0             SUBS     R0,R0,R7
   \       0x98   0xF241 0x3189      MOVW     R1,#+5001
   \       0x9C   0x4288             CMP      R0,R1
   \       0x9E   0xD3F4             BCC.N    ??HAL_RCCEx_PeriphCLKConfig_7
   \       0xA0   0xE7D9             B.N      ??HAL_RCCEx_PeriphCLKConfig_4
    174                  }  
    175                }
    176              }
    177              __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
   \                     ??HAL_RCCEx_PeriphCLKConfig_6: (+1)
   \       0xA2   0x69F2             LDR      R2,[R6, #+28]
   \       0xA4   0x6868             LDR      R0,[R5, #+4]
   \       0xA6   0xF422 0x7240      BIC      R2,R2,#0x300
   \       0xAA   0x4302             ORRS     R2,R0,R2
   \       0xAC   0x61F2             STR      R2,[R6, #+28]
    178          
    179              /* Require to disable power clock if necessary */
    180              if(pwrclkchanged == SET)
   \       0xAE   0xB11C             CBZ.N    R4,??HAL_RCCEx_PeriphCLKConfig_0
    181              {
    182                __HAL_RCC_PWR_CLK_DISABLE();
   \       0xB0   0x69B0             LDR      R0,[R6, #+24]
   \       0xB2   0xF020 0x5080      BIC      R0,R0,#0x10000000
   \       0xB6   0x61B0             STR      R0,[R6, #+24]
    183              }
    184            }
    185          
    186            /*------------------------------- USART1 Configuration ------------------------*/
    187            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
   \                     ??HAL_RCCEx_PeriphCLKConfig_0: (+1)
   \       0xB8   0x7828             LDRB     R0,[R5, #+0]
   \       0xBA   0x07C1             LSLS     R1,R0,#+31
   \       0xBC   0xD505             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_8
    188            {
    189              /* Check the parameters */
    190              assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    191              
    192              /* Configure the USART1 clock source */
    193              __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
   \       0xBE   0x6AF2             LDR      R2,[R6, #+44]
   \       0xC0   0x68A8             LDR      R0,[R5, #+8]
   \       0xC2   0x0892             LSRS     R2,R2,#+2
   \       0xC4   0xEA40 0x0282      ORR      R2,R0,R2, LSL #+2
   \       0xC8   0x62F2             STR      R2,[R6, #+44]
    194            }
    195          
    196          #if defined(RCC_CFGR3_USART2SW)
    197            /*----------------------------- USART2 Configuration --------------------------*/ 
    198            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
    199            {
    200              /* Check the parameters */
    201              assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    202              
    203              /* Configure the USART2 clock source */
    204              __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
    205            }
    206          #endif /* RCC_CFGR3_USART2SW */
    207          
    208          #if defined(RCC_CFGR3_USART3SW)
    209            /*------------------------------ USART3 Configuration ------------------------*/ 
    210            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
    211            {
    212              /* Check the parameters */
    213              assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    214              
    215              /* Configure the USART3 clock source */
    216              __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
    217            }
    218          #endif /* RCC_CFGR3_USART3SW */
    219          
    220            /*------------------------------ I2C1 Configuration ------------------------*/ 
    221            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
   \                     ??HAL_RCCEx_PeriphCLKConfig_8: (+1)
   \       0xCA   0x7829             LDRB     R1,[R5, #+0]
   \       0xCC   0x0688             LSLS     R0,R1,#+26
   \       0xCE   0xD505             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_9
    222            {
    223              /* Check the parameters */
    224              assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    225              
    226              /* Configure the I2C1 clock source */
    227              __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
   \       0xD0   0x6AF1             LDR      R1,[R6, #+44]
   \       0xD2   0x68E8             LDR      R0,[R5, #+12]
   \       0xD4   0xF021 0x0110      BIC      R1,R1,#0x10
   \       0xD8   0x4301             ORRS     R1,R0,R1
   \       0xDA   0x62F1             STR      R1,[R6, #+44]
    228            }
    229          
    230          #if defined(STM32F302xE) || defined(STM32F303xE)\
    231           || defined(STM32F302xC) || defined(STM32F303xC)\
    232           || defined(STM32F302x8)                        \
    233           || defined(STM32F373xC)
    234            /*------------------------------ USB Configuration ------------------------*/ 
    235            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
   \                     ??HAL_RCCEx_PeriphCLKConfig_9: (+1)
   \       0xDC   0x6829             LDR      R1,[R5, #+0]
   \       0xDE   0x0388             LSLS     R0,R1,#+14
   \       0xE0   0xD505             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_10
    236            {
    237              /* Check the parameters */
    238              assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    239              
    240              /* Configure the USB clock source */
    241              __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
   \       0xE2   0x6831             LDR      R1,[R6, #+0]
   \       0xE4   0x6B28             LDR      R0,[R5, #+48]
   \       0xE6   0xF421 0x0180      BIC      R1,R1,#0x400000
   \       0xEA   0x4301             ORRS     R1,R0,R1
   \       0xEC   0x6031             STR      R1,[R6, #+0]
    242            }
    243          
    244          #endif /* STM32F302xE || STM32F303xE || */
    245                 /* STM32F302xC || STM32F303xC || */
    246                 /* STM32F302x8                || */
    247                 /* STM32F373xC                   */
    248          
    249          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    250           || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
    251           || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
    252           || defined(STM32F373xC) || defined(STM32F378xx)
    253          
    254            /*------------------------------ I2C2 Configuration ------------------------*/ 
    255            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
   \                     ??HAL_RCCEx_PeriphCLKConfig_10: (+1)
   \       0xEE   0x7829             LDRB     R1,[R5, #+0]
   \       0xF0   0x0648             LSLS     R0,R1,#+25
   \       0xF2   0xD505             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_11
    256            {
    257              /* Check the parameters */
    258              assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    259              
    260              /* Configure the I2C2 clock source */
    261              __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
   \       0xF4   0x6AF1             LDR      R1,[R6, #+44]
   \       0xF6   0x6928             LDR      R0,[R5, #+16]
   \       0xF8   0xF021 0x0120      BIC      R1,R1,#0x20
   \       0xFC   0x4301             ORRS     R1,R0,R1
   \       0xFE   0x62F1             STR      R1,[R6, #+44]
    262            }
    263          
    264          #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
    265                 /* STM32F302xC || STM32F303xC || STM32F358xx || */
    266                 /* STM32F301x8 || STM32F302x8 || STM32F318xx || */
    267                 /* STM32F373xC || STM32F378xx                   */
    268            
    269          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    270           || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
    271          
    272            /*------------------------------ I2C3 Configuration ------------------------*/ 
    273            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
   \                     ??HAL_RCCEx_PeriphCLKConfig_11: (+1)
   \      0x100   0x6829             LDR      R1,[R5, #+0]
   \      0x102   0x0408             LSLS     R0,R1,#+16
   \      0x104   0xD505             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_12
    274            {
    275              /* Check the parameters */
    276              assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    277              
    278              /* Configure the I2C3 clock source */
    279              __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
   \      0x106   0x6AF1             LDR      R1,[R6, #+44]
   \      0x108   0x6968             LDR      R0,[R5, #+20]
   \      0x10A   0xF021 0x0140      BIC      R1,R1,#0x40
   \      0x10E   0x4301             ORRS     R1,R0,R1
   \      0x110   0x62F1             STR      R1,[R6, #+44]
    280            }
    281          #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
    282                 /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
    283            
    284          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    285           || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)
    286          
    287            /*------------------------------ UART4 Configuration ------------------------*/ 
    288            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
    289            {
    290              /* Check the parameters */
    291              assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    292              
    293              /* Configure the UART4 clock source */
    294              __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
    295            }
    296          
    297            /*------------------------------ UART5 Configuration ------------------------*/ 
    298            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
    299            {
    300              /* Check the parameters */
    301              assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    302              
    303              /* Configure the UART5 clock source */
    304              __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
    305            }
    306          
    307          #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
    308                 /* STM32F302xC || STM32F303xC || STM32F358xx    */
    309          
    310          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    311           || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
    312           || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
    313            /*------------------------------ I2S Configuration ------------------------*/ 
    314            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
   \                     ??HAL_RCCEx_PeriphCLKConfig_12: (+1)
   \      0x112   0x6829             LDR      R1,[R5, #+0]
   \      0x114   0x0588             LSLS     R0,R1,#+22
   \      0x116   0xD505             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_13
    315            {
    316              /* Check the parameters */
    317              assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    318              
    319              /* Configure the I2S clock source */
    320              __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
   \      0x118   0x6831             LDR      R1,[R6, #+0]
   \      0x11A   0x69E8             LDR      R0,[R5, #+28]
   \      0x11C   0xF421 0x0100      BIC      R1,R1,#0x800000
   \      0x120   0x4301             ORRS     R1,R0,R1
   \      0x122   0x6031             STR      R1,[R6, #+0]
    321            }
    322          
    323          #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
    324                 /* STM32F302xC || STM32F303xC || STM32F358xx || */
    325                 /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
    326            
    327          #if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
    328                
    329            /*------------------------------ ADC1 clock Configuration ------------------*/ 
    330            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
   \                     ??HAL_RCCEx_PeriphCLKConfig_13: (+1)
   \      0x124   0x7829             LDRB     R1,[R5, #+0]
   \      0x126   0x0608             LSLS     R0,R1,#+24
   \      0x128   0xD505             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_14
    331            {
    332              /* Check the parameters */
    333              assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    334              
    335              /* Configure the ADC1 clock source */
    336              __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
   \      0x12A   0x6AB1             LDR      R1,[R6, #+40]
   \      0x12C   0x69A8             LDR      R0,[R5, #+24]
   \      0x12E   0xF421 0x71F8      BIC      R1,R1,#0x1F0
   \      0x132   0x4301             ORRS     R1,R0,R1
   \      0x134   0x62B1             STR      R1,[R6, #+40]
    337            }
    338          
    339          #endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */
    340            
    341          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    342           || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
    343           || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
    344                
    345            /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
    346            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
    347            {
    348              /* Check the parameters */
    349              assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    350              
    351              /* Configure the ADC12 clock source */
    352              __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
    353            }
    354          
    355          #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
    356                 /* STM32F302xC || STM32F303xC || STM32F358xx || */
    357                 /* STM32F303x8 || STM32F334x8 || STM32F328xx    */    
    358            
    359          #if defined(STM32F303xE) || defined(STM32F398xx)\
    360           || defined(STM32F303xC) || defined(STM32F358xx)
    361          
    362            /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
    363            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
    364            {
    365              /* Check the parameters */
    366              assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    367              
    368              /* Configure the ADC34 clock source */
    369              __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
    370            }
    371          
    372          #endif /* STM32F303xE || STM32F398xx || */
    373                 /* STM32F303xC || STM32F358xx    */
    374          
    375          #if defined(STM32F373xC) || defined(STM32F378xx)
    376                
    377            /*------------------------------ ADC1 clock Configuration ------------------*/ 
    378            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
    379            {
    380              /* Check the parameters */
    381              assert_param(IS_RCC_ADC1PCLK2_DIV(PeriphClkInit->Adc1ClockSelection));
    382              
    383              /* Configure the ADC1 clock source */
    384              __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
    385            }
    386          
    387          #endif /* STM32F373xC || STM32F378xx */
    388          
    389          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    390           || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
    391           || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
    392           || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
    393          
    394            /*------------------------------ TIM1 clock Configuration ----------------*/ 
    395            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
   \                     ??HAL_RCCEx_PeriphCLKConfig_14: (+1)
   \      0x136   0x6829             LDR      R1,[R5, #+0]
   \      0x138   0x04C8             LSLS     R0,R1,#+19
   \      0x13A   0xD505             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_15
    396            {
    397              /* Check the parameters */
    398              assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    399              
    400              /* Configure the TIM1 clock source */
    401              __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
   \      0x13C   0x6AF1             LDR      R1,[R6, #+44]
   \      0x13E   0x6A28             LDR      R0,[R5, #+32]
   \      0x140   0xF421 0x7180      BIC      R1,R1,#0x100
   \      0x144   0x4301             ORRS     R1,R0,R1
   \      0x146   0x62F1             STR      R1,[R6, #+44]
    402            }
    403          
    404          #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
    405                 /* STM32F302xC || STM32F303xC || STM32F358xx || */
    406                 /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
    407                 /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
    408            
    409          #if defined(STM32F303xE) || defined(STM32F398xx)\
    410           || defined(STM32F303xC) || defined(STM32F358xx)
    411          
    412            /*------------------------------ TIM8 clock Configuration ----------------*/ 
    413            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
    414            {
    415              /* Check the parameters */
    416              assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    417              
    418              /* Configure the TIM8 clock source */
    419              __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
    420            }
    421          
    422          #endif /* STM32F303xE || STM32F398xx || */
    423                 /* STM32F303xC || STM32F358xx    */
    424          
    425          #if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
    426          
    427            /*------------------------------ TIM15 clock Configuration ----------------*/ 
    428            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
   \                     ??HAL_RCCEx_PeriphCLKConfig_15: (+1)
   \      0x148   0x6829             LDR      R1,[R5, #+0]
   \      0x14A   0x0348             LSLS     R0,R1,#+13
   \      0x14C   0xD505             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_16
    429            {
    430              /* Check the parameters */
    431              assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    432              
    433              /* Configure the TIM15 clock source */
    434              __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
   \      0x14E   0x6AF1             LDR      R1,[R6, #+44]
   \      0x150   0x6A68             LDR      R0,[R5, #+36]
   \      0x152   0xF421 0x6180      BIC      R1,R1,#0x400
   \      0x156   0x4301             ORRS     R1,R0,R1
   \      0x158   0x62F1             STR      R1,[R6, #+44]
    435            }
    436          
    437            /*------------------------------ TIM16 clock Configuration ----------------*/ 
    438            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
   \                     ??HAL_RCCEx_PeriphCLKConfig_16: (+1)
   \      0x15A   0x6829             LDR      R1,[R5, #+0]
   \      0x15C   0x0308             LSLS     R0,R1,#+12
   \      0x15E   0xD505             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_17
    439            {
    440              /* Check the parameters */
    441              assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    442              
    443              /* Configure the TIM16 clock source */
    444              __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
   \      0x160   0x6AF1             LDR      R1,[R6, #+44]
   \      0x162   0x6AA8             LDR      R0,[R5, #+40]
   \      0x164   0xF421 0x6100      BIC      R1,R1,#0x800
   \      0x168   0x4301             ORRS     R1,R0,R1
   \      0x16A   0x62F1             STR      R1,[R6, #+44]
    445            }
    446          
    447            /*------------------------------ TIM17 clock Configuration ----------------*/ 
    448            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
   \                     ??HAL_RCCEx_PeriphCLKConfig_17: (+1)
   \      0x16C   0x6829             LDR      R1,[R5, #+0]
   \      0x16E   0x02C8             LSLS     R0,R1,#+11
   \      0x170   0xD505             BPL.N    ??HAL_RCCEx_PeriphCLKConfig_18
    449            {
    450              /* Check the parameters */
    451              assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    452              
    453              /* Configure the TIM17 clock source */
    454              __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
   \      0x172   0x6AF1             LDR      R1,[R6, #+44]
   \      0x174   0x6AE8             LDR      R0,[R5, #+44]
   \      0x176   0xF421 0x5100      BIC      R1,R1,#0x2000
   \      0x17A   0x4301             ORRS     R1,R0,R1
   \      0x17C   0x62F1             STR      R1,[R6, #+44]
    455            }
    456          
    457          #endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */
    458          
    459          #if defined(STM32F334x8)
    460          
    461            /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
    462            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
    463            {
    464              /* Check the parameters */
    465              assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    466              
    467              /* Configure the HRTIM1 clock source */
    468              __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
    469            }
    470          
    471          #endif /* STM32F334x8 */
    472          
    473          #if defined(STM32F373xC) || defined(STM32F378xx)
    474            
    475            /*------------------------------ SDADC clock Configuration -------------------*/ 
    476            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDADC) == RCC_PERIPHCLK_SDADC)
    477            {
    478              /* Check the parameters */
    479              assert_param(IS_RCC_SDADCSYSCLK_DIV(PeriphClkInit->SdadcClockSelection));
    480              
    481              /* Configure the SDADC clock prescaler */
    482              __HAL_RCC_SDADC_CONFIG(PeriphClkInit->SdadcClockSelection);
    483            }
    484          
    485            /*------------------------------ CEC clock Configuration -------------------*/ 
    486            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
    487            {
    488              /* Check the parameters */
    489              assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    490              
    491              /* Configure the CEC clock source */
    492              __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
    493            }
    494          
    495          #endif /* STM32F373xC || STM32F378xx */
    496            
    497          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
    498            
    499            /*------------------------------ TIM2 clock Configuration -------------------*/ 
    500            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
    501            {
    502              /* Check the parameters */
    503              assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    504              
    505              /* Configure the CEC clock source */
    506              __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
    507            }
    508          
    509            /*------------------------------ TIM3 clock Configuration -------------------*/ 
    510            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
    511            {
    512              /* Check the parameters */
    513              assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    514              
    515              /* Configure the CEC clock source */
    516              __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
    517            }
    518          
    519            /*------------------------------ TIM15 clock Configuration ------------------*/ 
    520            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
    521            {
    522              /* Check the parameters */
    523              assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    524              
    525              /* Configure the CEC clock source */
    526              __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
    527            }
    528          
    529            /*------------------------------ TIM16 clock Configuration ------------------*/ 
    530            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
    531            {
    532              /* Check the parameters */
    533              assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    534              
    535              /* Configure the CEC clock source */
    536              __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
    537            }
    538          
    539            /*------------------------------ TIM17 clock Configuration ------------------*/ 
    540            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
    541            {
    542              /* Check the parameters */
    543              assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    544              
    545              /* Configure the CEC clock source */
    546              __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
    547            }
    548          
    549          #endif /* STM32F302xE || STM32F303xE || STM32F398xx */  
    550          
    551          #if defined(STM32F303xE) || defined(STM32F398xx)
    552            /*------------------------------ TIM20 clock Configuration ------------------*/ 
    553            if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
    554            {
    555              /* Check the parameters */
    556              assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    557              
    558              /* Configure the CEC clock source */
    559              __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
    560            }
    561          #endif /* STM32F303xE || STM32F398xx */  
    562          
    563            
    564            return HAL_OK;
   \                     ??HAL_RCCEx_PeriphCLKConfig_18: (+1)
   \      0x17E   0x2000             MOVS     R0,#+0
   \                     ??HAL_RCCEx_PeriphCLKConfig_5: (+1)
   \      0x180   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    565          }
    566          
    567          /**
    568            * @brief  Get the RCC_ClkInitStruct according to the internal
    569            * RCC configuration registers.
    570            * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
    571            *         returns the configuration information for the Extended Peripherals clocks
    572            *         (ADC, CEC, I2C, I2S, SDADC, HRTIM, TIM, USART, RTC and USB clocks).
    573            * @retval None
    574            */

   \                                 In section .text, align 2, keep-with-next
    575          void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
    576          {
    577            /* Set all possible values for the extended clock type parameter------------*/
    578            /* Common part first */
    579          #if defined(RCC_CFGR3_USART2SW) && defined(RCC_CFGR3_USART3SW)
    580            PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | \
    581                                                  RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_RTC;
    582          #else
    583            PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1 | \
    584                                                  RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_RTC;
   \                     HAL_RCCEx_GetPeriphCLKConfig: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable4_3  ;; 0x10021
   \        0x2   0x6001             STR      R1,[R0, #+0]
    585          #endif /* RCC_CFGR3_USART2SW && RCC_CFGR3_USART3SW */
    586            
    587            /* Get the RTC configuration --------------------------------------------*/
    588            PeriphClkInit->RTCClockSelection = __HAL_RCC_GET_RTC_SOURCE();
   \        0x4   0x....             LDR.N    R1,??DataTable4  ;; 0x40021004
   \        0x6   0x69CA             LDR      R2,[R1, #+28]
   \        0x8   0xF402 0x7240      AND      R2,R2,#0x300
   \        0xC   0x6042             STR      R2,[R0, #+4]
    589            /* Get the USART1 clock configuration --------------------------------------------*/
    590            PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
   \        0xE   0x6ACA             LDR      R2,[R1, #+44]
   \       0x10   0xF002 0x0203      AND      R2,R2,#0x3
   \       0x14   0x6082             STR      R2,[R0, #+8]
    591          #if defined(RCC_CFGR3_USART2SW)
    592            /* Get the USART2 clock configuration -----------------------------------------*/
    593            PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
    594          #endif /* RCC_CFGR3_USART2SW */
    595          #if defined(RCC_CFGR3_USART3SW)
    596             /* Get the USART3 clock configuration -----------------------------------------*/
    597            PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
    598          #endif /* RCC_CFGR3_USART3SW */
    599            /* Get the I2C1 clock configuration -----------------------------------------*/
    600            PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
   \       0x16   0x6ACA             LDR      R2,[R1, #+44]
   \       0x18   0xF002 0x0210      AND      R2,R2,#0x10
   \       0x1C   0x60C2             STR      R2,[R0, #+12]
    601          
    602          #if defined(STM32F302xE) || defined(STM32F303xE)\
    603              || defined(STM32F302xC) || defined(STM32F303xC)\
    604              || defined(STM32F302x8)                        \
    605              || defined(STM32F373xC)
    606          
    607            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
   \       0x1E   0x6803             LDR      R3,[R0, #+0]
   \       0x20   0xF443 0x3300      ORR      R3,R3,#0x20000
   \       0x24   0x6003             STR      R3,[R0, #+0]
    608            /* Get the USB clock configuration -----------------------------------------*/
    609            PeriphClkInit->USBClockSelection = __HAL_RCC_GET_USB_SOURCE();
   \       0x26   0x680A             LDR      R2,[R1, #+0]
   \       0x28   0xF402 0x0280      AND      R2,R2,#0x400000
   \       0x2C   0x6302             STR      R2,[R0, #+48]
    610          
    611          #endif /* STM32F302xE || STM32F303xE || */
    612                 /* STM32F302xC || STM32F303xC || */
    613                 /* STM32F302x8                || */
    614                 /* STM32F373xC                   */
    615          
    616          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    617              || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
    618              || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
    619              || defined(STM32F373xC) || defined(STM32F378xx)
    620          
    621            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C2;
   \       0x2E   0x6803             LDR      R3,[R0, #+0]
   \       0x30   0xF043 0x0340      ORR      R3,R3,#0x40
   \       0x34   0x6003             STR      R3,[R0, #+0]
    622            /* Get the I2C2 clock configuration -----------------------------------------*/
    623            PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
   \       0x36   0x6ACA             LDR      R2,[R1, #+44]
   \       0x38   0xF002 0x0220      AND      R2,R2,#0x20
   \       0x3C   0x6102             STR      R2,[R0, #+16]
    624          
    625          #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
    626                 /* STM32F302xC || STM32F303xC || STM32F358xx || */
    627                 /* STM32F301x8 || STM32F302x8 || STM32F318xx || */
    628                 /* STM32F373xC || STM32F378xx                   */
    629            
    630          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    631              || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
    632          
    633            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C3;
   \       0x3E   0x6803             LDR      R3,[R0, #+0]
   \       0x40   0xF443 0x4300      ORR      R3,R3,#0x8000
   \       0x44   0x6003             STR      R3,[R0, #+0]
    634            /* Get the I2C3 clock configuration -----------------------------------------*/
    635            PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
   \       0x46   0x6ACA             LDR      R2,[R1, #+44]
   \       0x48   0xF002 0x0240      AND      R2,R2,#0x40
   \       0x4C   0x6142             STR      R2,[R0, #+20]
    636          
    637          #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
    638                 /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
    639            
    640          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    641              || defined(STM32F302xC) || defined(STM32F303xC) ||defined(STM32F358xx)
    642          
    643            PeriphClkInit->PeriphClockSelection |= (RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5);
    644            /* Get the UART4 clock configuration -----------------------------------------*/
    645            PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
    646            /* Get the UART5 clock configuration -----------------------------------------*/
    647            PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
    648          
    649          #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
    650                 /* STM32F302xC || STM32F303xC || STM32F358xx */
    651          
    652          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    653              || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
    654              || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
    655          
    656            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S;
   \       0x4E   0x6803             LDR      R3,[R0, #+0]
   \       0x50   0xF443 0x7300      ORR      R3,R3,#0x200
   \       0x54   0x6003             STR      R3,[R0, #+0]
    657            /* Get the I2S clock configuration -----------------------------------------*/
    658            PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2S_SOURCE();
   \       0x56   0x680A             LDR      R2,[R1, #+0]
   \       0x58   0xF402 0x0200      AND      R2,R2,#0x800000
   \       0x5C   0x61C2             STR      R2,[R0, #+28]
    659          
    660          #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
    661                 /* STM32F302xC || STM32F303xC || STM32F358xx || */
    662                 /* STM32F301x8 || STM32F302x8 || STM32F318xx || */
    663            
    664          #if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
    665              || defined(STM32F373xC) || defined(STM32F378xx)
    666                
    667            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC1;
   \       0x5E   0x6803             LDR      R3,[R0, #+0]
   \       0x60   0xF043 0x0380      ORR      R3,R3,#0x80
   \       0x64   0x6003             STR      R3,[R0, #+0]
    668            /* Get the ADC1 clock configuration -----------------------------------------*/
    669            PeriphClkInit->Adc1ClockSelection = __HAL_RCC_GET_ADC1_SOURCE();
   \       0x66   0x6A8A             LDR      R2,[R1, #+40]
   \       0x68   0xF402 0x72F8      AND      R2,R2,#0x1F0
   \       0x6C   0x6182             STR      R2,[R0, #+24]
    670          
    671          #endif /* STM32F301x8 || STM32F302x8 || STM32F318xx || */
    672                 /* STM32F373xC || STM32F378xx                   */
    673          
    674          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    675              || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
    676              || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
    677          
    678            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC12;
    679            /* Get the ADC1 & ADC2 clock configuration -----------------------------------------*/
    680            PeriphClkInit->Adc12ClockSelection = __HAL_RCC_GET_ADC12_SOURCE();
    681          
    682          #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
    683                 /* STM32F302xC || STM32F303xC || STM32F358xx || */
    684                 /* STM32F303x8 || STM32F334x8 || STM32F328xx    */
    685          
    686          #if defined(STM32F303xE) || defined(STM32F398xx)\
    687              || defined(STM32F303xC) || defined(STM32F358xx)
    688          
    689            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC34;
    690             /* Get the ADC3 & ADC4 clock configuration -----------------------------------------*/
    691            PeriphClkInit->Adc34ClockSelection = __HAL_RCC_GET_ADC34_SOURCE();
    692          
    693          #endif /* STM32F303xE || STM32F398xx || */
    694                 /* STM32F303xC || STM32F358xx    */
    695          
    696          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    697              || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
    698              || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
    699              || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
    700          
    701            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM1;
   \       0x6E   0x6803             LDR      R3,[R0, #+0]
   \       0x70   0xF443 0x5380      ORR      R3,R3,#0x1000
   \       0x74   0x6003             STR      R3,[R0, #+0]
    702            /* Get the TIM1 clock configuration -----------------------------------------*/
    703            PeriphClkInit->Tim1ClockSelection = __HAL_RCC_GET_TIM1_SOURCE();
   \       0x76   0x6ACA             LDR      R2,[R1, #+44]
   \       0x78   0xF402 0x7280      AND      R2,R2,#0x100
   \       0x7C   0x6202             STR      R2,[R0, #+32]
    704          
    705          #endif /* STM32F302xE || STM32F303xE || STM32F398xx || */
    706                 /* STM32F302xC || STM32F303xC || STM32F358xx || */
    707                 /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
    708                 /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
    709            
    710          #if defined(STM32F303xE) || defined(STM32F398xx)\
    711              || defined(STM32F303xC) || defined(STM32F358xx)
    712          
    713            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM8;
    714            /* Get the TIM8 clock configuration -----------------------------------------*/
    715            PeriphClkInit->Tim8ClockSelection = __HAL_RCC_GET_TIM8_SOURCE();
    716          
    717          #endif /* STM32F303xE || STM32F398xx || */
    718                 /* STM32F303xC || STM32F358xx    */
    719          
    720          #if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
    721          
    722            PeriphClkInit->PeriphClockSelection |= (RCC_PERIPHCLK_TIM15 | RCC_PERIPHCLK_TIM16 | RCC_PERIPHCLK_TIM17);
   \       0x7E   0x6803             LDR      R3,[R0, #+0]
   \       0x80   0xF443 0x13E0      ORR      R3,R3,#0x1C0000
   \       0x84   0x6003             STR      R3,[R0, #+0]
    723            /* Get the TIM15 clock configuration -----------------------------------------*/
    724            PeriphClkInit->Tim15ClockSelection = __HAL_RCC_GET_TIM15_SOURCE();
   \       0x86   0x6ACA             LDR      R2,[R1, #+44]
   \       0x88   0xF402 0x6280      AND      R2,R2,#0x400
   \       0x8C   0x6242             STR      R2,[R0, #+36]
    725            /* Get the TIM16 clock configuration -----------------------------------------*/
    726            PeriphClkInit->Tim16ClockSelection = __HAL_RCC_GET_TIM16_SOURCE();
   \       0x8E   0x6ACA             LDR      R2,[R1, #+44]
   \       0x90   0xF402 0x6200      AND      R2,R2,#0x800
   \       0x94   0x6282             STR      R2,[R0, #+40]
    727            /* Get the TIM17 clock configuration -----------------------------------------*/
    728            PeriphClkInit->Tim17ClockSelection = __HAL_RCC_GET_TIM17_SOURCE();
   \       0x96   0x6AC9             LDR      R1,[R1, #+44]
   \       0x98   0xF401 0x5100      AND      R1,R1,#0x2000
   \       0x9C   0x62C1             STR      R1,[R0, #+44]
    729          
    730          #endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */
    731          
    732          #if defined(STM32F334x8)
    733          
    734            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
    735            /* Get the HRTIM1 clock configuration -----------------------------------------*/
    736            PeriphClkInit->Hrtim1ClockSelection = __HAL_RCC_GET_HRTIM1_SOURCE();
    737          
    738          #endif /* STM32F334x8 */
    739          
    740          #if defined(STM32F373xC) || defined(STM32F378xx)
    741          
    742            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SDADC;
    743            /* Get the SDADC clock configuration -----------------------------------------*/
    744            PeriphClkInit->SdadcClockSelection = __HAL_RCC_GET_SDADC_SOURCE();
    745          
    746            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_CEC;
    747            /* Get the CEC clock configuration -----------------------------------------*/
    748            PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
    749          
    750          #endif /* STM32F373xC || STM32F378xx */
    751          
    752          #if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
    753          
    754            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM2;
    755            /* Get the TIM2 clock configuration -----------------------------------------*/
    756            PeriphClkInit->Tim2ClockSelection = __HAL_RCC_GET_TIM2_SOURCE();
    757          
    758            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM34;
    759            /* Get the TIM3 clock configuration -----------------------------------------*/
    760            PeriphClkInit->Tim34ClockSelection = __HAL_RCC_GET_TIM34_SOURCE();
    761          
    762            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM15;
    763            /* Get the TIM15 clock configuration -----------------------------------------*/
    764            PeriphClkInit->Tim15ClockSelection = __HAL_RCC_GET_TIM15_SOURCE();
    765          
    766            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM16;
    767            /* Get the TIM16 clock configuration -----------------------------------------*/
    768            PeriphClkInit->Tim16ClockSelection = __HAL_RCC_GET_TIM16_SOURCE();
    769          
    770            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM17;
    771            /* Get the TIM17 clock configuration -----------------------------------------*/
    772            PeriphClkInit->Tim17ClockSelection = __HAL_RCC_GET_TIM17_SOURCE();
    773          
    774          #endif /* STM32F302xE || STM32F303xE || STM32F398xx */
    775            
    776          #if defined (STM32F303xE) || defined(STM32F398xx)
    777            PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM20;
    778            /* Get the TIM20 clock configuration -----------------------------------------*/
    779            PeriphClkInit->Tim20ClockSelection = __HAL_RCC_GET_TIM20_SOURCE();
    780          #endif /* STM32F303xE || STM32F398xx */
    781          }
   \       0x9E   0x4770             BX       LR               ;; return
    782          
    783          /**
    784            * @brief  Returns the peripheral clock frequency
    785            * @note   Returns 0 if peripheral clock is unknown or 0xDEADDEAD if not applicable.
    786            * @param  PeriphClk Peripheral clock identifier
    787            *         This parameter can be one of the following values:
    788            *            @arg @ref RCC_PERIPHCLK_RTC     RTC peripheral clock
    789            *            @arg @ref RCC_PERIPHCLK_USART1  USART1 peripheral clock
    790            *            @arg @ref RCC_PERIPHCLK_I2C1    I2C1 peripheral clock
    791            @if STM32F301x8
    792            *            @arg @ref RCC_PERIPHCLK_I2C2    I2C2 peripheral clock
    793            *            @arg @ref RCC_PERIPHCLK_I2C3    I2C3 peripheral clock
    794            *            @arg @ref RCC_PERIPHCLK_I2S     I2S peripheral clock
    795            *            @arg @ref RCC_PERIPHCLK_ADC1    ADC1 peripheral clock
    796            *            @arg @ref RCC_PERIPHCLK_TIM1    TIM1 peripheral clock
    797            *            @arg @ref RCC_PERIPHCLK_TIM15   TIM15 peripheral clock
    798            *            @arg @ref RCC_PERIPHCLK_TIM16   TIM16 peripheral clock
    799            *            @arg @ref RCC_PERIPHCLK_TIM17   TIM17 peripheral clock
    800            @endif
    801            @if STM32F302x8
    802            *            @arg @ref RCC_PERIPHCLK_I2C2    I2C2 peripheral clock
    803            *            @arg @ref RCC_PERIPHCLK_I2C3    I2C3 peripheral clock
    804            *            @arg @ref RCC_PERIPHCLK_I2S     I2S peripheral clock
    805            *            @arg @ref RCC_PERIPHCLK_USB     USB peripheral clock
    806            *            @arg @ref RCC_PERIPHCLK_ADC1    ADC1 peripheral clock
    807            *            @arg @ref RCC_PERIPHCLK_TIM1    TIM1 peripheral clock
    808            *            @arg @ref RCC_PERIPHCLK_TIM15   TIM15 peripheral clock
    809            *            @arg @ref RCC_PERIPHCLK_TIM16   TIM16 peripheral clock
    810            *            @arg @ref RCC_PERIPHCLK_TIM17   TIM17 peripheral clock
    811            @endif
    812            @if STM32F302xC
    813            *            @arg @ref RCC_PERIPHCLK_USART2  USART2 peripheral clock
    814            *            @arg @ref RCC_PERIPHCLK_USART3  USART3 peripheral clock
    815            *            @arg @ref RCC_PERIPHCLK_UART4   UART4 peripheral clock
    816            *            @arg @ref RCC_PERIPHCLK_UART5   UART5 peripheral clock
    817            *            @arg @ref RCC_PERIPHCLK_I2C2    I2C2 peripheral clock
    818            *            @arg @ref RCC_PERIPHCLK_I2S     I2S peripheral clock
    819            *            @arg @ref RCC_PERIPHCLK_USB     USB peripheral clock
    820            *            @arg @ref RCC_PERIPHCLK_ADC12   ADC12 peripheral clock
    821            *            @arg @ref RCC_PERIPHCLK_TIM1    TIM1 peripheral clock
    822            @endif
    823            @if STM32F302xE
    824            *            @arg @ref RCC_PERIPHCLK_USART2  USART2 peripheral clock
    825            *            @arg @ref RCC_PERIPHCLK_USART3  USART3 peripheral clock
    826            *            @arg @ref RCC_PERIPHCLK_UART4   UART4 peripheral clock
    827            *            @arg @ref RCC_PERIPHCLK_UART5   UART5 peripheral clock
    828            *            @arg @ref RCC_PERIPHCLK_I2C2    I2C2 peripheral clock
    829            *            @arg @ref RCC_PERIPHCLK_I2C3    I2C3 peripheral clock
    830            *            @arg @ref RCC_PERIPHCLK_I2S     I2S peripheral clock
    831            *            @arg @ref RCC_PERIPHCLK_USB     USB peripheral clock
    832            *            @arg @ref RCC_PERIPHCLK_ADC12   ADC12 peripheral clock
    833            *            @arg @ref RCC_PERIPHCLK_TIM1    TIM1 peripheral clock
    834            *            @arg @ref RCC_PERIPHCLK_TIM2    TIM2 peripheral clock
    835            *            @arg @ref RCC_PERIPHCLK_TIM15   TIM15 peripheral clock
    836            *            @arg @ref RCC_PERIPHCLK_TIM16   TIM16 peripheral clock
    837            *            @arg @ref RCC_PERIPHCLK_TIM17   TIM17 peripheral clock
    838            *            @arg @ref RCC_PERIPHCLK_TIM34   TIM34 peripheral clock
    839            @endif
    840            @if STM32F303x8
    841            *            @arg @ref RCC_PERIPHCLK_ADC12   ADC12 peripheral clock
    842            *            @arg @ref RCC_PERIPHCLK_TIM1    TIM1 peripheral clock
    843            @endif
    844            @if STM32F303xC
    845            *            @arg @ref RCC_PERIPHCLK_USART2  USART2 peripheral clock
    846            *            @arg @ref RCC_PERIPHCLK_USART3  USART3 peripheral clock
    847            *            @arg @ref RCC_PERIPHCLK_UART4   UART4 peripheral clock
    848            *            @arg @ref RCC_PERIPHCLK_UART5   UART5 peripheral clock
    849            *            @arg @ref RCC_PERIPHCLK_I2C2    I2C2 peripheral clock
    850            *            @arg @ref RCC_PERIPHCLK_I2S     I2S peripheral clock
    851            *            @arg @ref RCC_PERIPHCLK_USB     USB peripheral clock
    852            *            @arg @ref RCC_PERIPHCLK_ADC12   ADC12 peripheral clock
    853            *            @arg @ref RCC_PERIPHCLK_ADC34   ADC34 peripheral clock
    854            *            @arg @ref RCC_PERIPHCLK_TIM1    TIM1 peripheral clock
    855            *            @arg @ref RCC_PERIPHCLK_TIM8    TIM8 peripheral clock
    856            @endif
    857            @if STM32F303xE
    858            *            @arg @ref RCC_PERIPHCLK_USART2  USART2 peripheral clock
    859            *            @arg @ref RCC_PERIPHCLK_USART3  USART3 peripheral clock
    860            *            @arg @ref RCC_PERIPHCLK_UART4   UART4 peripheral clock
    861            *            @arg @ref RCC_PERIPHCLK_UART5   UART5 peripheral clock
    862            *            @arg @ref RCC_PERIPHCLK_I2C2    I2C2 peripheral clock
    863            *            @arg @ref RCC_PERIPHCLK_I2C3    I2C3 peripheral clock
    864            *            @arg @ref RCC_PERIPHCLK_I2S     I2S peripheral clock
    865            *            @arg @ref RCC_PERIPHCLK_USB     USB peripheral clock
    866            *            @arg @ref RCC_PERIPHCLK_ADC12   ADC12 peripheral clock
    867            *            @arg @ref RCC_PERIPHCLK_ADC34   ADC34 peripheral clock
    868            *            @arg @ref RCC_PERIPHCLK_TIM1    TIM1 peripheral clock
    869            *            @arg @ref RCC_PERIPHCLK_TIM2    TIM2 peripheral clock
    870            *            @arg @ref RCC_PERIPHCLK_TIM8    TIM8 peripheral clock
    871            *            @arg @ref RCC_PERIPHCLK_TIM15   TIM15 peripheral clock
    872            *            @arg @ref RCC_PERIPHCLK_TIM16   TIM16 peripheral clock
    873            *            @arg @ref RCC_PERIPHCLK_TIM17   TIM17 peripheral clock
    874            *            @arg @ref RCC_PERIPHCLK_TIM20   TIM20 peripheral clock
    875            *            @arg @ref RCC_PERIPHCLK_TIM34   TIM34 peripheral clock
    876            @endif
    877            @if STM32F318xx
    878            *            @arg @ref RCC_PERIPHCLK_I2C2    I2C2 peripheral clock
    879            *            @arg @ref RCC_PERIPHCLK_I2C3    I2C3 peripheral clock
    880            *            @arg @ref RCC_PERIPHCLK_I2S     I2S peripheral clock
    881            *            @arg @ref RCC_PERIPHCLK_ADC1    ADC1 peripheral clock
    882            *            @arg @ref RCC_PERIPHCLK_TIM1    TIM1 peripheral clock
    883            *            @arg @ref RCC_PERIPHCLK_TIM15   TIM15 peripheral clock
    884            *            @arg @ref RCC_PERIPHCLK_TIM16   TIM16 peripheral clock
    885            *            @arg @ref RCC_PERIPHCLK_TIM17   TIM17 peripheral clock
    886            @endif
    887            @if STM32F328xx
    888            *            @arg @ref RCC_PERIPHCLK_I2C2    I2C2 peripheral clock
    889            *            @arg @ref RCC_PERIPHCLK_ADC12   ADC12 peripheral clock
    890            *            @arg @ref RCC_PERIPHCLK_TIM1    TIM1 peripheral clock
    891            @endif
    892            @if STM32F334x8
    893            *            @arg @ref RCC_PERIPHCLK_ADC12   ADC12 peripheral clock
    894            *            @arg @ref RCC_PERIPHCLK_TIM1    TIM1 peripheral clock
    895            *            @arg @ref RCC_PERIPHCLK_HRTIM1  HRTIM1 peripheral clock
    896            @endif
    897            @if STM32F358xx
    898            *            @arg @ref RCC_PERIPHCLK_USART2  USART2 peripheral clock
    899            *            @arg @ref RCC_PERIPHCLK_USART3  USART3 peripheral clock
    900            *            @arg @ref RCC_PERIPHCLK_UART4   UART4 peripheral clock
    901            *            @arg @ref RCC_PERIPHCLK_UART5   UART5 peripheral clock
    902            *            @arg @ref RCC_PERIPHCLK_I2S     I2S peripheral clock
    903            *            @arg @ref RCC_PERIPHCLK_ADC12   ADC12 peripheral clock
    904            *            @arg @ref RCC_PERIPHCLK_ADC34   ADC34 peripheral clock
    905            *            @arg @ref RCC_PERIPHCLK_TIM1    TIM1 peripheral clock
    906            *            @arg @ref RCC_PERIPHCLK_TIM8    TIM8 peripheral clock
    907            @endif
    908            @if STM32F373xC
    909            *            @arg @ref RCC_PERIPHCLK_USART2  USART2 peripheral clock
    910            *            @arg @ref RCC_PERIPHCLK_USART3  USART3 peripheral clock
    911            *            @arg @ref RCC_PERIPHCLK_I2C2    I2C2 peripheral clock
    912            *            @arg @ref RCC_PERIPHCLK_USB     USB peripheral clock
    913            *            @arg @ref RCC_PERIPHCLK_ADC1    ADC1 peripheral clock
    914            *            @arg @ref RCC_PERIPHCLK_SDADC   SDADC peripheral clock
    915            *            @arg @ref RCC_PERIPHCLK_CEC     CEC peripheral clock
    916            @endif
    917            @if STM32F378xx
    918            *            @arg @ref RCC_PERIPHCLK_USART2  USART2 peripheral clock
    919            *            @arg @ref RCC_PERIPHCLK_USART3  USART3 peripheral clock
    920            *            @arg @ref RCC_PERIPHCLK_I2C2    I2C2 peripheral clock
    921            *            @arg @ref RCC_PERIPHCLK_ADC1    ADC1 peripheral clock
    922            *            @arg @ref RCC_PERIPHCLK_SDADC   SDADC peripheral clock
    923            *            @arg @ref RCC_PERIPHCLK_CEC     CEC peripheral clock
    924            @endif
    925            @if STM32F398xx
    926            *            @arg @ref RCC_PERIPHCLK_USART2  USART2 peripheral clock
    927            *            @arg @ref RCC_PERIPHCLK_USART3  USART3 peripheral clock
    928            *            @arg @ref RCC_PERIPHCLK_UART4   UART4 peripheral clock
    929            *            @arg @ref RCC_PERIPHCLK_UART5   UART5 peripheral clock
    930            *            @arg @ref RCC_PERIPHCLK_I2C2    I2C2 peripheral clock
    931            *            @arg @ref RCC_PERIPHCLK_I2C3    I2C3 peripheral clock
    932            *            @arg @ref RCC_PERIPHCLK_I2S     I2S peripheral clock
    933            *            @arg @ref RCC_PERIPHCLK_ADC12   ADC12 peripheral clock
    934            *            @arg @ref RCC_PERIPHCLK_ADC34   ADC34 peripheral clock
    935            *            @arg @ref RCC_PERIPHCLK_TIM1    TIM1 peripheral clock
    936            *            @arg @ref RCC_PERIPHCLK_TIM2    TIM2 peripheral clock
    937            *            @arg @ref RCC_PERIPHCLK_TIM8    TIM8 peripheral clock
    938            *            @arg @ref RCC_PERIPHCLK_TIM15   TIM15 peripheral clock
    939            *            @arg @ref RCC_PERIPHCLK_TIM16   TIM16 peripheral clock
    940            *            @arg @ref RCC_PERIPHCLK_TIM17   TIM17 peripheral clock
    941            *            @arg @ref RCC_PERIPHCLK_TIM20   TIM20 peripheral clock
    942            *            @arg @ref RCC_PERIPHCLK_TIM34   TIM34 peripheral clock
    943            @endif
    944            * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
    945            */

   \                                 In section .text, align 4, keep-with-next
    946          uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
    947          {
   \                     HAL_RCCEx_GetPeriphCLKFreq: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
   \        0x4   0x4604             MOV      R4,R0
    948            /* frequency == 0 : means that no available frequency for the peripheral */
    949            uint32_t frequency = 0U;
    950          
    951            uint32_t srcclk = 0U;
    952          #if defined(RCC_CFGR2_ADC1PRES) || defined(RCC_CFGR2_ADCPRE12) || defined(RCC_CFGR2_ADCPRE34)
    953            uint16_t adc_pll_prediv_table[16] = { 1U,  2U,  4U,  6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U, 256U, 256U, 256U, 256U};
   \        0x6   0x4668             MOV      R0,SP
   \        0x8   0x....             ADR.N    R1,?_0
    954          #endif /* RCC_CFGR2_ADC1PRES || RCC_CFGR2_ADCPRE12 || RCC_CFGR2_ADCPRE34 */
    955          #if defined(RCC_CFGR_SDPRE)
    956            uint8_t sdadc_prescaler_table[16] = { 2U,  4U,  6U, 8U, 10U, 12U, 14U, 16U, 20U, 24U, 28U, 32U, 36U, 40U, 44U, 48U};
    957          #endif /* RCC_CFGR_SDPRE */
    958          
    959            /* Check the parameters */
    960            assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
    961            
    962            switch (PeriphClk)
   \        0xA   0x....             LDR.N    R6,??DataTable4_4
   \        0xC   0x2220             MOVS     R2,#+32
   \        0xE   0x....'....        BL       __aeabi_memcpy4
   \       0x12   0x2500             MOVS     R5,#+0
   \       0x14   0x6832             LDR      R2,[R6, #+0]
   \       0x16   0x....             LDR.N    R1,??DataTable4_5  ;; 0x40021000
   \       0x18   0x2C01             CMP      R4,#+1
   \       0x1A   0xF44F 0x4300      MOV      R3,#+32768
   \       0x1E   0xD03A             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_0
   \       0x20   0x2C20             CMP      R4,#+32
   \       0x22   0xD04A             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_1
   \       0x24   0x2C40             CMP      R4,#+64
   \       0x26   0xD04E             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_2
   \       0x28   0x2C80             CMP      R4,#+128
   \       0x2A   0xF000 0x807D      BEQ.W    ??HAL_RCCEx_GetPeriphCLKFreq_3
   \       0x2E   0xF5B4 0x7F00      CMP      R4,#+512
   \       0x32   0xD05D             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_4
   \       0x34   0xF5B4 0x5F80      CMP      R4,#+4096
   \       0x38   0xF000 0x8086      BEQ.W    ??HAL_RCCEx_GetPeriphCLKFreq_5
   \       0x3C   0xF5B4 0x4F00      CMP      R4,#+32768
   \       0x40   0xD04B             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_6
   \       0x42   0xF5B4 0x3F80      CMP      R4,#+65536
   \       0x46   0xD00F             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_7
   \       0x48   0xF5B4 0x3F00      CMP      R4,#+131072
   \       0x4C   0xD05D             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_8
   \       0x4E   0xF5B4 0x2F80      CMP      R4,#+262144
   \       0x52   0xF000 0x807F      BEQ.W    ??HAL_RCCEx_GetPeriphCLKFreq_9
   \       0x56   0xF5B4 0x2F00      CMP      R4,#+524288
   \       0x5A   0xF000 0x8081      BEQ.W    ??HAL_RCCEx_GetPeriphCLKFreq_10
   \       0x5E   0xF5B4 0x1F80      CMP      R4,#+1048576
   \       0x62   0xF000 0x8083      BEQ.W    ??HAL_RCCEx_GetPeriphCLKFreq_11
   \       0x66   0xE090             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_12
    963            {
    964            case RCC_PERIPHCLK_RTC:
    965              {
    966                /* Get the current RTC source */
    967                srcclk = __HAL_RCC_GET_RTC_SOURCE();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_7: (+1)
   \       0x68   0x6A08             LDR      R0,[R1, #+32]
   \       0x6A   0xF400 0x7040      AND      R0,R0,#0x300
    968          
    969                /* Check if LSE is ready and if RTC clock selection is LSE */
    970                if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
   \       0x6E   0xF5B0 0x7F80      CMP      R0,#+256
   \       0x72   0xD01D             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_13
    971                {
    972                  frequency = LSE_VALUE;
    973                }
    974                /* Check if LSI is ready and if RTC clock selection is LSI */
    975                else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
   \       0x74   0xF5B0 0x7F00      CMP      R0,#+512
   \       0x78   0xD105             BNE.N    ??HAL_RCCEx_GetPeriphCLKFreq_14
   \       0x7A   0x6A48             LDR      R0,[R1, #+36]
   \       0x7C   0x0781             LSLS     R1,R0,#+30
   \       0x7E   0xD501             BPL.N    ??HAL_RCCEx_GetPeriphCLKFreq_15
    976                {
    977                  frequency = LSI_VALUE;
   \       0x80   0xF649 0x4540      MOVW     R5,#+40000
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_15: (+1)
   \       0x84   0xE081             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_12
    978                }
    979                /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    980                else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIV32) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_14: (+1)
   \       0x86   0xF5B0 0x7F40      CMP      R0,#+768
   \       0x8A   0xD1FB             BNE.N    ??HAL_RCCEx_GetPeriphCLKFreq_15
   \       0x8C   0x6808             LDR      R0,[R1, #+0]
   \       0x8E   0x0381             LSLS     R1,R0,#+14
   \       0x90   0xD57B             BPL.N    ??HAL_RCCEx_GetPeriphCLKFreq_12
    981                {
    982                  frequency = HSE_VALUE / 32U;
   \       0x92   0x....             LDR.N    R5,??DataTable4_6  ;; 0x3d090
   \       0x94   0xE079             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_12
    983                }
    984                break;
    985              }
    986            case RCC_PERIPHCLK_USART1:
    987              {
    988                /* Get the current USART1 source */
    989                srcclk = __HAL_RCC_GET_USART1_SOURCE();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_0: (+1)
   \       0x96   0x6B08             LDR      R0,[R1, #+48]
   \       0x98   0xF010 0x0003      ANDS     R0,R0,#0x3
    990          
    991                /* Check if USART1 clock selection is PCLK1 */
    992          #if defined(RCC_USART1CLKSOURCE_PCLK2)
    993                if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
    994                {
    995                  frequency = HAL_RCC_GetPCLK2Freq();
    996                }
    997          #else
    998                if (srcclk == RCC_USART1CLKSOURCE_PCLK1)
   \       0x9C   0xD102             BNE.N    ??HAL_RCCEx_GetPeriphCLKFreq_16
    999                {
   1000                  frequency = HAL_RCC_GetPCLK1Freq();
   \       0x9E   0x....'....        BL       HAL_RCC_GetPCLK1Freq
   \       0xA2   0xE06E             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_17
   1001                }
   1002          #endif /* RCC_USART1CLKSOURCE_PCLK2 */
   1003                /* Check if HSI is ready and if USART1 clock selection is HSI */
   1004                else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_16: (+1)
   \       0xA4   0x2803             CMP      R0,#+3
   \       0xA6   0xD012             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_18
   1005                {
   1006                  frequency = HSI_VALUE;
   1007                }
   1008                /* Check if USART1 clock selection is SYSCLK */
   1009                else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
   \       0xA8   0x2801             CMP      R0,#+1
   \       0xAA   0xD02B             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_19
   1010                {
   1011                  frequency = HAL_RCC_GetSysClockFreq();
   1012                }
   1013                /* Check if LSE is ready  and if USART1 clock selection is LSE */
   1014                else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
   \       0xAC   0x2802             CMP      R0,#+2
   \       0xAE   0xD16C             BNE.N    ??HAL_RCCEx_GetPeriphCLKFreq_12
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_13: (+1)
   \       0xB0   0x6A08             LDR      R0,[R1, #+32]
   \       0xB2   0x0781             LSLS     R1,R0,#+30
   \       0xB4   0xD569             BPL.N    ??HAL_RCCEx_GetPeriphCLKFreq_12
   1015                {
   1016                  frequency = LSE_VALUE;
   \       0xB6   0x461D             MOV      R5,R3
   \       0xB8   0xE067             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_12
   1017                }
   1018                break;
   1019              }
   1020          #if defined(RCC_CFGR3_USART2SW)
   1021            case RCC_PERIPHCLK_USART2:
   1022              {
   1023                /* Get the current USART2 source */
   1024                srcclk = __HAL_RCC_GET_USART2_SOURCE();
   1025          
   1026                /* Check if USART2 clock selection is PCLK1 */
   1027                if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
   1028                {
   1029                  frequency = HAL_RCC_GetPCLK1Freq();
   1030                }
   1031                /* Check if HSI is ready and if USART2 clock selection is HSI */
   1032                else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
   1033                {
   1034                  frequency = HSI_VALUE;
   1035                }
   1036                /* Check if USART2 clock selection is SYSCLK */
   1037                else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
   1038                {
   1039                  frequency = HAL_RCC_GetSysClockFreq();
   1040                }
   1041                /* Check if LSE is ready  and if USART2 clock selection is LSE */
   1042                else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
   1043                {
   1044                  frequency = LSE_VALUE;
   1045                }
   1046                break;
   1047              }
   1048          #endif /* RCC_CFGR3_USART2SW */
   1049          #if defined(RCC_CFGR3_USART3SW)
   1050            case RCC_PERIPHCLK_USART3:
   1051              {
   1052                /* Get the current USART3 source */
   1053                srcclk = __HAL_RCC_GET_USART3_SOURCE();
   1054          
   1055                /* Check if USART3 clock selection is PCLK1 */
   1056                if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
   1057                {
   1058                  frequency = HAL_RCC_GetPCLK1Freq();
   1059                }
   1060                /* Check if HSI is ready and if USART3 clock selection is HSI */
   1061                else if ((srcclk == RCC_USART3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
   1062                {
   1063                  frequency = HSI_VALUE;
   1064                }
   1065                /* Check if USART3 clock selection is SYSCLK */
   1066                else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
   1067                {
   1068                  frequency = HAL_RCC_GetSysClockFreq();
   1069                }
   1070                /* Check if LSE is ready  and if USART3 clock selection is LSE */
   1071                else if ((srcclk == RCC_USART3CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
   1072                {
   1073                  frequency = LSE_VALUE;
   1074                }
   1075               break;
   1076              }
   1077          #endif /* RCC_CFGR3_USART3SW */
   1078          #if defined(RCC_CFGR3_UART4SW)
   1079            case RCC_PERIPHCLK_UART4:
   1080              {
   1081                /* Get the current UART4 source */
   1082                srcclk = __HAL_RCC_GET_UART4_SOURCE();
   1083          
   1084                /* Check if UART4 clock selection is PCLK1 */
   1085                if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
   1086                {
   1087                  frequency = HAL_RCC_GetPCLK1Freq();
   1088                }
   1089                /* Check if HSI is ready and if UART4 clock selection is HSI */
   1090                else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
   1091                {
   1092                  frequency = HSI_VALUE;
   1093                }
   1094                /* Check if UART4 clock selection is SYSCLK */
   1095                else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
   1096                {
   1097                  frequency = HAL_RCC_GetSysClockFreq();
   1098                }
   1099                /* Check if LSE is ready  and if UART4 clock selection is LSE */
   1100                else if ((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
   1101                {
   1102                  frequency = LSE_VALUE;
   1103                }
   1104                break;
   1105              }
   1106          #endif /* RCC_CFGR3_UART4SW */
   1107          #if defined(RCC_CFGR3_UART5SW)
   1108            case RCC_PERIPHCLK_UART5:
   1109              {
   1110                /* Get the current UART5 source */
   1111                srcclk = __HAL_RCC_GET_UART5_SOURCE();
   1112          
   1113                /* Check if UART5 clock selection is PCLK1 */
   1114                if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
   1115                {
   1116                  frequency = HAL_RCC_GetPCLK1Freq();
   1117                }
   1118                /* Check if HSI is ready and if UART5 clock selection is HSI */
   1119                else if ((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
   1120                {
   1121                  frequency = HSI_VALUE;
   1122                }
   1123                /* Check if UART5 clock selection is SYSCLK */
   1124                else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
   1125                {
   1126                  frequency = HAL_RCC_GetSysClockFreq();
   1127                }
   1128                /* Check if LSE is ready  and if UART5 clock selection is LSE */
   1129                else if ((srcclk == RCC_UART5CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
   1130                {
   1131                  frequency = LSE_VALUE;
   1132                }
   1133                break;
   1134              }
   1135          #endif /* RCC_CFGR3_UART5SW */
   1136            case RCC_PERIPHCLK_I2C1:
   1137              {
   1138                /* Get the current I2C1 source */
   1139                srcclk = __HAL_RCC_GET_I2C1_SOURCE();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_1: (+1)
   \       0xBA   0x6B08             LDR      R0,[R1, #+48]
   \       0xBC   0xF010 0x0010      ANDS     R0,R0,#0x10
   1140          
   1141                /* Check if HSI is ready and if I2C1 clock selection is HSI */
   1142                if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
   \       0xC0   0xD005             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_18
   1143                {
   1144                  frequency = HSI_VALUE;
   1145                }
   1146                /* Check if I2C1 clock selection is SYSCLK */
   1147                else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
   \       0xC2   0x2810             CMP      R0,#+16
   \       0xC4   0xE01D             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_20
   1148                {
   1149                  frequency = HAL_RCC_GetSysClockFreq();
   1150                }
   1151                break;
   1152              }
   1153          #if defined(RCC_CFGR3_I2C2SW)
   1154            case RCC_PERIPHCLK_I2C2:
   1155              {
   1156                /* Get the current I2C2 source */
   1157                srcclk = __HAL_RCC_GET_I2C2_SOURCE();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_2: (+1)
   \       0xC6   0x6B08             LDR      R0,[R1, #+48]
   \       0xC8   0xF010 0x0020      ANDS     R0,R0,#0x20
   1158          
   1159                /* Check if HSI is ready and if I2C2 clock selection is HSI */
   1160                if ((srcclk == RCC_I2C2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
   \       0xCC   0xD103             BNE.N    ??HAL_RCCEx_GetPeriphCLKFreq_21
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_18: (+1)
   \       0xCE   0x6808             LDR      R0,[R1, #+0]
   \       0xD0   0x0781             LSLS     R1,R0,#+30
   \       0xD2   0xD409             BMI.N    ??HAL_RCCEx_GetPeriphCLKFreq_22
   \       0xD4   0xE059             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_12
   1161                {
   1162                  frequency = HSI_VALUE;
   1163                }
   1164                /* Check if I2C2 clock selection is SYSCLK */
   1165                else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_21: (+1)
   \       0xD6   0x2820             CMP      R0,#+32
   \       0xD8   0xE013             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_20
   1166                {
   1167                  frequency = HAL_RCC_GetSysClockFreq();
   1168                }
   1169                break;
   1170              }
   1171          #endif /* RCC_CFGR3_I2C2SW */
   1172          #if defined(RCC_CFGR3_I2C3SW)
   1173            case RCC_PERIPHCLK_I2C3:
   1174              {
   1175                /* Get the current I2C3 source */
   1176                srcclk = __HAL_RCC_GET_I2C3_SOURCE();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_6: (+1)
   \       0xDA   0x6B08             LDR      R0,[R1, #+48]
   \       0xDC   0xF010 0x0040      ANDS     R0,R0,#0x40
   1177          
   1178                /* Check if HSI is ready and if I2C3 clock selection is HSI */
   1179                if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
   \       0xE0   0xD104             BNE.N    ??HAL_RCCEx_GetPeriphCLKFreq_23
   \       0xE2   0x6808             LDR      R0,[R1, #+0]
   \       0xE4   0x0781             LSLS     R1,R0,#+30
   \       0xE6   0xD550             BPL.N    ??HAL_RCCEx_GetPeriphCLKFreq_12
   1180                {
   1181                  frequency = HSI_VALUE;
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_22: (+1)
   \       0xE8   0x....             LDR.N    R5,??DataTable4_7  ;; 0x7a1200
   \       0xEA   0xE04E             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_12
   1182                }
   1183                /* Check if I2C3 clock selection is SYSCLK */
   1184                else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_23: (+1)
   \       0xEC   0x2840             CMP      R0,#+64
   \       0xEE   0xE008             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_20
   1185                {
   1186                  frequency = HAL_RCC_GetSysClockFreq();
   1187                }
   1188                break;
   1189              }
   1190          #endif /* RCC_CFGR3_I2C3SW */
   1191          #if defined(RCC_CFGR_I2SSRC)
   1192            case RCC_PERIPHCLK_I2S:
   1193              {
   1194                /* Get the current I2S source */
   1195                srcclk = __HAL_RCC_GET_I2S_SOURCE();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_4: (+1)
   \       0xF0   0x6848             LDR      R0,[R1, #+4]
   \       0xF2   0xF400 0x0000      AND      R0,R0,#0x800000
   1196          
   1197                /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin */
   1198                if (srcclk == RCC_I2SCLKSOURCE_EXT)
   \       0xF6   0xF5B0 0x0F00      CMP      R0,#+8388608
   \       0xFA   0xBF08             IT       EQ
   \       0xFC   0x....             LDREQ.N  R5,??DataTable4_8  ;; 0xdeaddead
   1199                {
   1200                  /* External clock used. Frequency cannot be returned.*/
   1201                  frequency = 0xDEADDEADU;
   \       0xFE   0xD044             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_12
   1202                }
   1203                /* Check if I2S clock selection is SYSCLK */
   1204                else if (srcclk == RCC_I2SCLKSOURCE_SYSCLK)
   \      0x100   0x2800             CMP      R0,#+0
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_20: (+1)
   \      0x102   0xD142             BNE.N    ??HAL_RCCEx_GetPeriphCLKFreq_12
   1205                {
   1206                  frequency = HAL_RCC_GetSysClockFreq();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_19: (+1)
   \      0x104   0x....'....        BL       HAL_RCC_GetSysClockFreq
   \      0x108   0xE03B             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_17
   1207                }
   1208                break;
   1209              }
   1210          #endif /* RCC_CFGR_I2SSRC */
   1211          #if defined(RCC_CFGR_USBPRE)
   1212            case RCC_PERIPHCLK_USB:
   1213              {
   1214                /* Check if PLL is ready */
   1215                if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_8: (+1)
   \      0x10A   0x6808             LDR      R0,[R1, #+0]
   \      0x10C   0x0182             LSLS     R2,R0,#+6
   \      0x10E   0xD53C             BPL.N    ??HAL_RCCEx_GetPeriphCLKFreq_12
   1216                {
   1217                  /* Get the current USB source */
   1218                  srcclk = __HAL_RCC_GET_USB_SOURCE();
   \      0x110   0x6848             LDR      R0,[R1, #+4]
   1219          
   1220                  /* Check if USB clock selection is not divided */
   1221                  if (srcclk == RCC_USBCLKSOURCE_PLL)
   \      0x112   0xF400 0x0080      AND      R0,R0,#0x400000
   \      0x116   0xF5B0 0x0F80      CMP      R0,#+4194304
   \      0x11A   0xD030             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_24
   1222                  {
   1223                    frequency = RCC_GetPLLCLKFreq();
   1224                  }
   1225                  /* Check if USB clock selection is divided by 1.5 */
   1226                  else /* RCC_USBCLKSOURCE_PLL_DIV1_5 */
   1227                  {
   1228                    frequency = (RCC_GetPLLCLKFreq() * 3U) / 2U;
   \      0x11C   0x....'....        BL       RCC_GetPLLCLKFreq
   \      0x120   0xEB00 0x0540      ADD      R5,R0,R0, LSL #+1
   \      0x124   0x086D             LSRS     R5,R5,#+1
   \      0x126   0xE030             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_12
   1229                  }
   1230                }
   1231                break;
   1232              }
   1233          #endif /* RCC_CFGR_USBPRE */
   1234          #if defined(RCC_CFGR2_ADC1PRES) || defined(RCC_CFGR_ADCPRE)
   1235            case RCC_PERIPHCLK_ADC1:
   1236              {
   1237                /* Get the current ADC1 source */
   1238                srcclk = __HAL_RCC_GET_ADC1_SOURCE();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_3: (+1)
   \      0x128   0x6ACC             LDR      R4,[R1, #+44]
   \      0x12A   0xF414 0x74F8      ANDS     R4,R4,#0x1F0
   1239          #if defined(RCC_CFGR2_ADC1PRES)
   1240                /* Check if ADC1 clock selection is AHB */
   1241                if (srcclk == RCC_ADC1PLLCLK_OFF)
   \      0x12E   0xD02B             BEQ.N    ??HAL_RCCEx_GetPeriphCLKFreq_25
   1242                {
   1243                    frequency = SystemCoreClock;
   1244                }
   1245                /* PLL clock has been selected */
   1246                else
   1247                {
   1248                  /* Check if PLL is ready */
   1249                  if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
   \      0x130   0x6808             LDR      R0,[R1, #+0]
   \      0x132   0x0181             LSLS     R1,R0,#+6
   \      0x134   0xD529             BPL.N    ??HAL_RCCEx_GetPeriphCLKFreq_12
   1250                  {
   1251                    /* Frequency is the PLL frequency divided by ADC prescaler (1U/2U/4U/6U/8U/10U/12U/16U/32U/64U/128U/256U) */
   1252                    frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADC1PRES)) & 0xFU];
   \      0x136   0x....'....        BL       RCC_GetPLLCLKFreq
   \      0x13A   0xF3C4 0x1203      UBFX     R2,R4,#+4,#+4
   \      0x13E   0xF83D 0x1012      LDRH     R1,[SP, R2, LSL #+1]
   \      0x142   0xFBB0 0xF5F1      UDIV     R5,R0,R1
   \      0x146   0xE020             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_12
   1253                  }
   1254                }
   1255          #else /* RCC_CFGR_ADCPRE */
   1256                /* ADC1 is set to PLCK2 frequency divided by 2U/4U/6U/8U */
   1257                frequency = HAL_RCC_GetPCLK2Freq() / (((srcclk  >> POSITION_VAL(RCC_CFGR_ADCPRE)) + 1U) * 2U);
   1258          #endif /* RCC_CFGR2_ADC1PRES */
   1259                break;
   1260              }
   1261          #endif /* RCC_CFGR2_ADC1PRES || RCC_CFGR_ADCPRE */
   1262          #if defined(RCC_CFGR2_ADCPRE12)
   1263            case RCC_PERIPHCLK_ADC12:
   1264              {
   1265                /* Get the current ADC12 source */
   1266                srcclk = __HAL_RCC_GET_ADC12_SOURCE();
   1267                /* Check if ADC12 clock selection is AHB */
   1268                if (srcclk == RCC_ADC12PLLCLK_OFF)
   1269                {
   1270                    frequency = SystemCoreClock;
   1271                }
   1272                /* PLL clock has been selected */
   1273                else
   1274                {
   1275                  /* Check if PLL is ready */
   1276                  if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
   1277                  {
   1278                    /* Frequency is the PLL frequency divided by ADC prescaler (1U/2U/4U/6/8U/10U/12U/16U/32U/64U/128U/256U) */
   1279                    frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE12)) & 0xF];
   1280                  }
   1281                }
   1282                break;
   1283              }
   1284          #endif /* RCC_CFGR2_ADCPRE12 */
   1285          #if defined(RCC_CFGR2_ADCPRE34)
   1286            case RCC_PERIPHCLK_ADC34:
   1287              {
   1288                /* Get the current ADC34 source */
   1289                srcclk = __HAL_RCC_GET_ADC34_SOURCE();
   1290                /* Check if ADC34 clock selection is AHB */
   1291                if (srcclk == RCC_ADC34PLLCLK_OFF)
   1292                {
   1293                    frequency = SystemCoreClock;
   1294                }
   1295                /* PLL clock has been selected */
   1296                else
   1297                {
   1298                  /* Check if PLL is ready */
   1299                  if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
   1300                  {
   1301                    /* Frequency is the PLL frequency divided by ADC prescaler (1U/2U/4U/6U/8U/10U/12U/16U/32U/64U/128U/256U) */
   1302                    frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> POSITION_VAL(RCC_CFGR2_ADCPRE34)) & 0xF];
   1303                  }
   1304                }
   1305                break;
   1306              }
   1307          #endif /* RCC_CFGR2_ADCPRE34 */
   1308          #if defined(RCC_CFGR3_TIM1SW)
   1309            case RCC_PERIPHCLK_TIM1:
   1310              {
   1311                /* Get the current TIM1 source */
   1312                srcclk = __HAL_RCC_GET_TIM1_SOURCE();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_5: (+1)
   \      0x148   0x6B08             LDR      R0,[R1, #+48]
   \      0x14A   0xF400 0x7080      AND      R0,R0,#0x100
   1313          
   1314                /* Check if PLL is ready and if TIM1 clock selection is PLL */
   1315                if ((srcclk == RCC_TIM1CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
   \      0x14E   0xF5B0 0x7F80      CMP      R0,#+256
   \      0x152   0xE010             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_26
   1316                {
   1317                  frequency = RCC_GetPLLCLKFreq();
   1318                }
   1319                /* Check if TIM1 clock selection is SYSCLK */
   1320                else if (srcclk == RCC_TIM1CLK_HCLK)
   1321                {
   1322                  frequency = SystemCoreClock;
   1323                }
   1324                break;
   1325              }
   1326          #endif /* RCC_CFGR3_TIM1SW */
   1327          #if defined(RCC_CFGR3_TIM2SW)
   1328            case RCC_PERIPHCLK_TIM2:
   1329              {
   1330                /* Get the current TIM2 source */
   1331                srcclk = __HAL_RCC_GET_TIM2_SOURCE();
   1332          
   1333                /* Check if PLL is ready and if TIM2 clock selection is PLL */
   1334                if ((srcclk == RCC_TIM2CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
   1335                {
   1336                  frequency = RCC_GetPLLCLKFreq();
   1337                }
   1338                /* Check if TIM2 clock selection is SYSCLK */
   1339                else if (srcclk == RCC_TIM2CLK_HCLK)
   1340                {
   1341                  frequency = SystemCoreClock;
   1342                }
   1343                break;
   1344              }
   1345          #endif /* RCC_CFGR3_TIM2SW */
   1346          #if defined(RCC_CFGR3_TIM8SW)
   1347            case RCC_PERIPHCLK_TIM8:
   1348              {
   1349                /* Get the current TIM8 source */
   1350                srcclk = __HAL_RCC_GET_TIM8_SOURCE();
   1351          
   1352                /* Check if PLL is ready and if TIM8 clock selection is PLL */
   1353                if ((srcclk == RCC_TIM8CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
   1354                {
   1355                  frequency = RCC_GetPLLCLKFreq();
   1356                }
   1357                /* Check if TIM8 clock selection is SYSCLK */
   1358                else if (srcclk == RCC_TIM8CLK_HCLK)
   1359                {
   1360                  frequency = SystemCoreClock;
   1361                }
   1362                break;
   1363              }
   1364          #endif /* RCC_CFGR3_TIM8SW */
   1365          #if defined(RCC_CFGR3_TIM15SW)
   1366            case RCC_PERIPHCLK_TIM15:
   1367              {
   1368                /* Get the current TIM15 source */
   1369                srcclk = __HAL_RCC_GET_TIM15_SOURCE();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_9: (+1)
   \      0x154   0x6B08             LDR      R0,[R1, #+48]
   \      0x156   0xF400 0x6080      AND      R0,R0,#0x400
   1370          
   1371                /* Check if PLL is ready and if TIM15 clock selection is PLL */
   1372                if ((srcclk == RCC_TIM15CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
   \      0x15A   0xF5B0 0x6F80      CMP      R0,#+1024
   \      0x15E   0xE00A             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_26
   1373                {
   1374                  frequency = RCC_GetPLLCLKFreq();
   1375                }
   1376                /* Check if TIM15 clock selection is SYSCLK */
   1377                else if (srcclk == RCC_TIM15CLK_HCLK)
   1378                {
   1379                  frequency = SystemCoreClock;
   1380                }
   1381                break;
   1382              }
   1383          #endif /* RCC_CFGR3_TIM15SW */
   1384          #if defined(RCC_CFGR3_TIM16SW)
   1385            case RCC_PERIPHCLK_TIM16:
   1386              {
   1387                /* Get the current TIM16 source */
   1388                srcclk = __HAL_RCC_GET_TIM16_SOURCE();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_10: (+1)
   \      0x160   0x6B08             LDR      R0,[R1, #+48]
   \      0x162   0xF400 0x6000      AND      R0,R0,#0x800
   1389          
   1390                /* Check if PLL is ready and if TIM16 clock selection is PLL */
   1391                if ((srcclk == RCC_TIM16CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
   \      0x166   0xF5B0 0x6F00      CMP      R0,#+2048
   \      0x16A   0xE004             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_26
   1392                {
   1393                  frequency = RCC_GetPLLCLKFreq();
   1394                }
   1395                /* Check if TIM16 clock selection is SYSCLK */
   1396                else if (srcclk == RCC_TIM16CLK_HCLK)
   1397                {
   1398                  frequency = SystemCoreClock;
   1399                }
   1400                break;
   1401              }
   1402          #endif /* RCC_CFGR3_TIM16SW */
   1403          #if defined(RCC_CFGR3_TIM17SW)
   1404            case RCC_PERIPHCLK_TIM17:
   1405              {
   1406                /* Get the current TIM17 source */
   1407                srcclk = __HAL_RCC_GET_TIM17_SOURCE();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_11: (+1)
   \      0x16C   0x6B08             LDR      R0,[R1, #+48]
   \      0x16E   0xF400 0x5000      AND      R0,R0,#0x2000
   1408          
   1409                /* Check if PLL is ready and if TIM17 clock selection is PLL */
   1410                if ((srcclk == RCC_TIM17CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
   \      0x172   0xF5B0 0x5F00      CMP      R0,#+8192
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_26: (+1)
   \      0x176   0xD106             BNE.N    ??HAL_RCCEx_GetPeriphCLKFreq_27
   \      0x178   0x6808             LDR      R0,[R1, #+0]
   \      0x17A   0x0181             LSLS     R1,R0,#+6
   \      0x17C   0xD505             BPL.N    ??HAL_RCCEx_GetPeriphCLKFreq_12
   1411                {
   1412                  frequency = RCC_GetPLLCLKFreq();
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_24: (+1)
   \      0x17E   0x....'....        BL       RCC_GetPLLCLKFreq
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_17: (+1)
   \      0x182   0x4605             MOV      R5,R0
   \      0x184   0xE001             B.N      ??HAL_RCCEx_GetPeriphCLKFreq_12
   1413                }
   1414                /* Check if TIM17 clock selection is SYSCLK */
   1415                else if (srcclk == RCC_TIM17CLK_HCLK)
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_27: (+1)
   \      0x186   0xB900             CBNZ.N   R0,??HAL_RCCEx_GetPeriphCLKFreq_12
   1416                {
   1417                  frequency = SystemCoreClock;
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_25: (+1)
   \      0x188   0x4615             MOV      R5,R2
   1418                }
   1419                break;
   1420              }
   1421          #endif /* RCC_CFGR3_TIM17SW */
   1422          #if defined(RCC_CFGR3_TIM20SW)
   1423            case RCC_PERIPHCLK_TIM20:
   1424              {
   1425                /* Get the current TIM20 source */
   1426                srcclk = __HAL_RCC_GET_TIM20_SOURCE();
   1427          
   1428                /* Check if PLL is ready and if TIM20 clock selection is PLL */
   1429                if ((srcclk == RCC_TIM20CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
   1430                {
   1431                  frequency = RCC_GetPLLCLKFreq();
   1432                }
   1433                /* Check if TIM20 clock selection is SYSCLK */
   1434                else if (srcclk == RCC_TIM20CLK_HCLK)
   1435                {
   1436                  frequency = SystemCoreClock;
   1437                }
   1438                break;
   1439              }
   1440          #endif /* RCC_CFGR3_TIM20SW */
   1441          #if defined(RCC_CFGR3_TIM34SW)
   1442            case RCC_PERIPHCLK_TIM34:
   1443              {
   1444                /* Get the current TIM34 source */
   1445                srcclk = __HAL_RCC_GET_TIM34_SOURCE();
   1446          
   1447                /* Check if PLL is ready and if TIM34 clock selection is PLL */
   1448                if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
   1449                {
   1450                  frequency = RCC_GetPLLCLKFreq();
   1451                }
   1452                /* Check if TIM34 clock selection is SYSCLK */
   1453                else if (srcclk == RCC_TIM34CLK_HCLK)
   1454                {
   1455                  frequency = SystemCoreClock;
   1456                }
   1457                break;
   1458              }
   1459          #endif /* RCC_CFGR3_TIM34SW */
   1460          #if defined(RCC_CFGR3_HRTIM1SW)
   1461            case RCC_PERIPHCLK_HRTIM1:
   1462              {
   1463                /* Get the current HRTIM1 source */
   1464                srcclk = __HAL_RCC_GET_HRTIM1_SOURCE();
   1465          
   1466                /* Check if PLL is ready and if HRTIM1 clock selection is PLL */
   1467                if ((srcclk == RCC_HRTIM1CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
   1468                {
   1469                  frequency = RCC_GetPLLCLKFreq();
   1470                }
   1471                /* Check if HRTIM1 clock selection is SYSCLK */
   1472                else if (srcclk == RCC_HRTIM1CLK_HCLK)
   1473                {
   1474                  frequency = SystemCoreClock;
   1475                }
   1476               break;
   1477              }
   1478          #endif /* RCC_CFGR3_HRTIM1SW */
   1479          #if defined(RCC_CFGR_SDPRE)
   1480            case RCC_PERIPHCLK_SDADC:
   1481              {
   1482                /* Get the current SDADC source */
   1483                srcclk = __HAL_RCC_GET_SDADC_SOURCE();
   1484                /* Frequency is the system frequency divided by SDADC prescaler (2U/4U/6U/8U/10U/12U/14U/16U/20U/24U/28U/32U/36U/40U/44U/48U) */
   1485                frequency = SystemCoreClock / sdadc_prescaler_table[(srcclk >> POSITION_VAL(RCC_CFGR_SDPRE)) & 0xF];
   1486                break;
   1487              }
   1488          #endif /* RCC_CFGR_SDPRE */
   1489          #if defined(RCC_CFGR3_CECSW)
   1490            case RCC_PERIPHCLK_CEC:
   1491              {
   1492                /* Get the current CEC source */
   1493                srcclk = __HAL_RCC_GET_CEC_SOURCE();
   1494          
   1495                /* Check if HSI is ready and if CEC clock selection is HSI */
   1496                if ((srcclk == RCC_CECCLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
   1497                {
   1498                  frequency = HSI_VALUE;
   1499                }
   1500                /* Check if LSE is ready  and if CEC clock selection is LSE */
   1501                else if ((srcclk == RCC_CECCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
   1502                {
   1503                  frequency = LSE_VALUE;
   1504                }
   1505                break;
   1506              }
   1507          #endif /* RCC_CFGR3_CECSW */
   1508            default: 
   1509              {
   1510                break;
   1511              }
   1512            }
   1513            return(frequency);
   \                     ??HAL_RCCEx_GetPeriphCLKFreq_12: (+1)
   \      0x18A   0x4628             MOV      R0,R5
   \      0x18C   0xB008             ADD      SP,SP,#+32
   \      0x18E   0xBD70             POP      {R4-R6,PC}       ;; return
   1514          }
   1515          
   1516          /**
   1517            * @}
   1518            */
   1519          
   1520          /**
   1521            * @}
   1522            */
   1523          
   1524          
   1525          #if defined(RCC_CFGR2_ADC1PRES) || defined(RCC_CFGR2_ADCPRE12) || defined(RCC_CFGR2_ADCPRE34) || defined(RCC_CFGR_USBPRE) \
   1526           || defined(RCC_CFGR3_TIM1SW) || defined(RCC_CFGR3_TIM2SW) || defined(RCC_CFGR3_TIM8SW) || defined(RCC_CFGR3_TIM15SW)     \
   1527           || defined(RCC_CFGR3_TIM16SW) || defined(RCC_CFGR3_TIM17SW) || defined(RCC_CFGR3_TIM20SW) || defined(RCC_CFGR3_TIM34SW)  \
   1528           || defined(RCC_CFGR3_HRTIM1SW)
   1529          
   1530          /** @addtogroup RCCEx_Private_Functions
   1531            * @{
   1532            */

   \                                 In section .text, align 2, keep-with-next
   1533          static uint32_t RCC_GetPLLCLKFreq(void)
   1534          {
   1535            uint32_t pllmul = 0U, pllsource = 0U, prediv = 0U, pllclk = 0U;
   1536          
   1537            pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
   \                     RCC_GetPLLCLKFreq: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable4  ;; 0x40021004
   \        0x2   0x6808             LDR      R0,[R1, #+0]
   1538            pllmul = ( pllmul >> 18U) + 2U;
   1539            pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
   \        0x4   0x680A             LDR      R2,[R1, #+0]
   \        0x6   0xF3C0 0x4083      UBFX     R0,R0,#+18,#+4
   \        0xA   0x1C80             ADDS     R0,R0,#+2
   1540          #if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
   1541            if (pllsource != RCC_PLLSOURCE_HSI)
   \        0xC   0x03D2             LSLS     R2,R2,#+15
   \        0xE   0xD508             BPL.N    ??RCC_GetPLLCLKFreq_0
   1542            {
   1543              prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
   \       0x10   0x6A89             LDR      R1,[R1, #+40]
   1544              /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
   1545              pllclk = (HSE_VALUE/prediv) * pllmul;
   \       0x12   0x....             LDR.N    R2,??DataTable4_7  ;; 0x7a1200
   \       0x14   0xF001 0x010F      AND      R1,R1,#0xF
   \       0x18   0x1C49             ADDS     R1,R1,#+1
   \       0x1A   0xFBB2 0xF3F1      UDIV     R3,R2,R1
   \       0x1E   0x4358             MULS     R0,R0,R3
   \       0x20   0x4770             BX       LR
   1546            }
   1547            else
   1548            {
   1549              /* HSI used as PLL clock source : PLLCLK = HSI/2U * PLLMUL */
   1550              pllclk = (HSI_VALUE >> 1U) * pllmul;
   \                     ??RCC_GetPLLCLKFreq_0: (+1)
   \       0x22   0x....             LDR.N    R1,??DataTable4_9  ;; 0x3d0900
   \       0x24   0x4348             MULS     R0,R1,R0
   1551            }
   1552          #else
   1553            prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
   1554            if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
   1555            {
   1556              /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
   1557              pllclk = (HSE_VALUE/prediv) * pllmul;
   1558            }
   1559            else
   1560            {
   1561              /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
   1562              pllclk = (HSI_VALUE/prediv) * pllmul;
   1563            }
   1564          #endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
   1565          
   1566            return pllclk;
   \       0x26   0x4770             BX       LR               ;; return
   1567          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \        0x0   0x4002'1004        DC32     0x40021004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \        0x0   0x4000'7000        DC32     0x40007000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \        0x0   0x4242'0440        DC32     0x42420440

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \        0x0   0x0001'0021        DC32     0x10021

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \        0x0   0x....'....        DC32     SystemCoreClock

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \        0x0   0x4002'1000        DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \        0x0   0x0003'D090        DC32     0x3d090

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \        0x0   0x007A'1200        DC32     0x7a1200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \        0x0   0xDEAD'DEAD        DC32     0xdeaddead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \        0x0   0x003D'0900        DC32     0x3d0900

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x0001 0x0002      DC16 1, 2, 4, 6, 8, 10, 12, 16, 32, 64, 128, 256, 256, 256, 256, 256

   \               0x0004 0x000

   \              6 0x0008 0x00

   \              0A 0x000C 0x0

   \              010 0x0020 0x

   \              0040 0x0080 0

   \              x0100 0x0100 

   \              0x0100 0x0100

   \               0x0100
   1568          /**
   1569            * @}
   1570            */
   1571          
   1572          #endif /* RCC_CFGR2_ADC1PRES || RCC_CFGR2_ADCPRExx || RCC_CFGR3_TIMxSW || RCC_CFGR3_HRTIM1SW || RCC_CFGR_USBPRE */
   1573            
   1574          /**
   1575            * @}
   1576            */
   1577            
   1578          #endif /* HAL_RCC_MODULE_ENABLED */
   1579          
   1580          /**
   1581            * @}
   1582            */
   1583          
   1584          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_RCCEx_GetPeriphCLKConfig
      48   HAL_RCCEx_GetPeriphCLKFreq
        48   -> HAL_RCC_GetPCLK1Freq
        48   -> HAL_RCC_GetSysClockFreq
        48   -> RCC_GetPLLCLKFreq
        48   -> __aeabi_memcpy4
      32   HAL_RCCEx_PeriphCLKConfig
        32   -> HAL_GetTick
       0   RCC_GetPLLCLKFreq


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
      32  ?_0
     160  HAL_RCCEx_GetPeriphCLKConfig
     400  HAL_RCCEx_GetPeriphCLKFreq
     388  HAL_RCCEx_PeriphCLKConfig
      40  RCC_GetPLLCLKFreq

 
 1'060 bytes in section .text
 
 1'060 bytes of CODE memory

Errors: none
Warnings: none
