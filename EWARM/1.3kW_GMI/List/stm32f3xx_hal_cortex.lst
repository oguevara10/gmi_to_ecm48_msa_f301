###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  10:14:08
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_hal_cortex.c
#    Command line      =
#        -f C:\Users\100001~1\AppData\Local\Temp\EW3E46.tmp
#        (C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_hal_cortex.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\1.3kW_GMI\List\stm32f3xx_hal_cortex.lst
#    Object file       =
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\1.3kW_GMI\Obj\stm32f3xx_hal_cortex.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_hal_cortex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f3xx_hal_cortex.c
      4            * @author  MCD Application Team
      5            * @brief   CORTEX HAL module driver.
      6            *          This file provides firmware functions to manage the following
      7            *          functionalities of the CORTEX:
      8            *           + Initialization and de-initialization functions
      9            *           + Peripheral Control functions
     10            *
     11            *  @verbatim
     12            ==============================================================================
     13                                  ##### How to use this driver #####
     14            ==============================================================================
     15          
     16              [..]
     17              *** How to configure Interrupts using CORTEX HAL driver ***
     18              ===========================================================
     19              [..]
     20              This section provides functions allowing to configure the NVIC interrupts (IRQ).
     21              The Cortex-M4 exceptions are managed by CMSIS functions.
     22          
     23              (#) Configure the NVIC Priority Grouping using HAL_NVIC_SetPriorityGrouping() function
     24          
     25               (#)  Configure the priority of the selected IRQ Channels using HAL_NVIC_SetPriority()
     26          
     27               (#)  Enable the selected IRQ Channels using HAL_NVIC_EnableIRQ()
     28          
     29          
     30               -@- When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
     31                   The pending IRQ priority will be managed only by the sub priority.
     32          
     33               -@- IRQ priority order (sorted by highest to lowest priority):
     34                  (+@) Lowest pre-emption priority
     35                  (+@) Lowest sub priority
     36                  (+@) Lowest hardware priority (IRQ number)
     37          
     38              [..]
     39              *** How to configure Systick using CORTEX HAL driver ***
     40              ========================================================
     41              [..]
     42              Setup SysTick Timer for time base 
     43                     
     44             (+) The HAL_SYSTICK_Config()function calls the SysTick_Config() function which
     45                 is a CMSIS function that:
     46                  (++) Configures the SysTick Reload register with value passed as function parameter.
     47                  (++) Configures the SysTick IRQ priority to the lowest value (0x0FU).
     48                  (++) Resets the SysTick Counter register.
     49                  (++) Configures the SysTick Counter clock source to be Core Clock Source (HCLK).
     50                  (++) Enables the SysTick Interrupt.
     51                  (++) Starts the SysTick Counter.
     52              
     53             (+) You can change the SysTick Clock source to be HCLK_Div8 by calling the macro
     54                 __HAL_CORTEX_SYSTICKCLK_CONFIG(SYSTICK_CLKSOURCE_HCLK_DIV8) just after the
     55                 HAL_SYSTICK_Config() function call. The __HAL_CORTEX_SYSTICKCLK_CONFIG() macro is defined
     56                 inside the stm32f3xx_hal_cortex.h file.
     57          
     58             (+) You can change the SysTick IRQ priority by calling the
     59                 HAL_NVIC_SetPriority(SysTick_IRQn,...) function just after the HAL_SYSTICK_Config() function 
     60                 call. The HAL_NVIC_SetPriority() call the NVIC_SetPriority() function which is a CMSIS function.
     61          
     62             (+) To adjust the SysTick time base, use the following formula:
     63          
     64                 Reload Value = SysTick Counter Clock (Hz) x  Desired Time base (s)
     65                 (++) Reload Value is the parameter to be passed for HAL_SYSTICK_Config() function
     66                 (++) Reload Value should not exceed 0xFFFFFF
     67          
     68            @endverbatim
     69            ******************************************************************************
     70            * @attention
     71            *
     72            * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
     73            * All rights reserved.</center></h2>
     74            *
     75            * This software component is licensed by ST under BSD 3-Clause license,
     76            * the "License"; You may not use this file except in compliance with the
     77            * License. You may obtain a copy of the License at:
     78            *                        opensource.org/licenses/BSD-3-Clause
     79            *
     80            ******************************************************************************
     81            */
     82          
     83          /*
     84            Additional Tables: CORTEX_NVIC_Priority_Table
     85               The table below gives the allowed values of the pre-emption priority and subpriority according
     86               to the Priority Grouping configuration performed by HAL_NVIC_SetPriorityGrouping() function
     87                 ==========================================================================================================================
     88                   NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  |       Description
     89                 ==========================================================================================================================
     90                  NVIC_PRIORITYGROUP_0  |                0                  |            0U-15             | 0 bits for pre-emption priority
     91                                        |                                   |                             | 4 bits for subpriority
     92                 --------------------------------------------------------------------------------------------------------------------------
     93                  NVIC_PRIORITYGROUP_1  |                0U-1                |            0U-7              | 1 bits for pre-emption priority
     94                                        |                                   |                             | 3 bits for subpriority
     95                 --------------------------------------------------------------------------------------------------------------------------
     96                  NVIC_PRIORITYGROUP_2  |                0U-3                |            0U-3              | 2 bits for pre-emption priority
     97                                        |                                   |                             | 2 bits for subpriority
     98                 --------------------------------------------------------------------------------------------------------------------------
     99                  NVIC_PRIORITYGROUP_3  |                0U-7                |            0U-1              | 3 bits for pre-emption priority
    100                                        |                                   |                             | 1 bits for subpriority
    101                 --------------------------------------------------------------------------------------------------------------------------
    102                  NVIC_PRIORITYGROUP_4  |                0U-15               |            0                | 4 bits for pre-emption priority
    103                                        |                                   |                             | 0 bits for subpriority
    104                 ==========================================================================================================================
    105          
    106          */
    107          
    108          /* Includes ------------------------------------------------------------------*/
    109          #include "stm32f3xx_hal.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __vfp void __NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     __NVIC_SetPriority: (+1)
   \        0x0   0x0109             LSLS     R1,R1,#+4
   \        0x2   0x0002             MOVS     R2,R0
   \        0x4   0xD402             BMI.N    ??__NVIC_SetPriority_0
   \        0x6   0x....             LDR.N    R0,??DataTable13  ;; 0xe000e400
   \        0x8   0x5481             STRB     R1,[R0, R2]
   \        0xA   0x4770             BX       LR
   \                     ??__NVIC_SetPriority_0: (+1)
   \        0xC   0x....             LDR.N    R3,??DataTable13_1  ;; 0xe000ed18
   \        0xE   0xF002 0x020F      AND      R2,R2,#0xF
   \       0x12   0x441A             ADD      R2,R3,R2
   \       0x14   0xF802 0x1C04      STRB     R1,[R2, #-4]
   \       0x18   0x4770             BX       LR               ;; return
    110          
    111          /** @addtogroup STM32F3xx_HAL_Driver
    112            * @{
    113            */
    114          
    115          /** @defgroup CORTEX CORTEX
    116            * @brief CORTEX CORTEX HAL module driver
    117            * @{
    118            */
    119          
    120          #ifdef HAL_CORTEX_MODULE_ENABLED
    121          
    122          /* Private typedef -----------------------------------------------------------*/
    123          /* Private define ------------------------------------------------------------*/
    124          /* Private macro -------------------------------------------------------------*/
    125          /* Private variables ---------------------------------------------------------*/
    126          /* Private function prototypes -----------------------------------------------*/
    127          /* Exported functions ---------------------------------------------------------*/
    128          
    129          /** @defgroup CORTEX_Exported_Functions CORTEX Exported Functions
    130            * @{
    131            */
    132          
    133          
    134          /** @defgroup CORTEX_Exported_Functions_Group1 Initialization and de-initialization functions
    135           *  @brief    Initialization and Configuration functions
    136           *
    137          @verbatim
    138            ==============================================================================
    139                        ##### Initialization and de-initialization functions #####
    140            ==============================================================================
    141              [..]
    142                This section provides the CORTEX HAL driver functions allowing to configure Interrupts
    143                Systick functionalities
    144          
    145          @endverbatim
    146            * @{
    147            */
    148          
    149          
    150          /**
    151            * @brief  Sets the priority grouping field (pre-emption priority and subpriority)
    152            *         using the required unlock sequence.
    153            * @param  PriorityGroup The priority grouping bits length.
    154            *         This parameter can be one of the following values:
    155            *         @arg NVIC_PRIORITYGROUP_0: 0 bits for pre-emption priority
    156            *                                    4 bits for subpriority
    157            *         @arg NVIC_PRIORITYGROUP_1: 1 bits for pre-emption priority
    158            *                                    3 bits for subpriority
    159            *         @arg NVIC_PRIORITYGROUP_2: 2 bits for pre-emption priority
    160            *                                    2 bits for subpriority
    161            *         @arg NVIC_PRIORITYGROUP_3: 3 bits for pre-emption priority
    162            *                                    1 bits for subpriority
    163            *         @arg NVIC_PRIORITYGROUP_4: 4 bits for pre-emption priority
    164            *                                    0 bits for subpriority
    165            * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
    166            *         The pending IRQ priority will be managed only by the subpriority.
    167            * @retval None
    168            */

   \                                 In section .text, align 2, keep-with-next
    169          void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
    170          {
    171            /* Check the parameters */
    172            assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
    173          
    174            /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
    175            NVIC_SetPriorityGrouping(PriorityGroup);
   \                     HAL_NVIC_SetPriorityGrouping: (+1)
   \        0x0   0x....             LDR.N    R3,??DataTable13_2  ;; 0xe000ed0c
   \        0x2   0x6819             LDR      R1,[R3, #+0]
   \        0x4   0xF64F 0x02FF      MOVW     R2,#+63743
   \        0x8   0x0200             LSLS     R0,R0,#+8
   \        0xA   0x4011             ANDS     R1,R2,R1
   \        0xC   0xF400 0x60E0      AND      R0,R0,#0x700
   \       0x10   0x4308             ORRS     R0,R0,R1
   \       0x12   0x....             LDR.N    R1,??DataTable13_3  ;; 0x5fa0000
   \       0x14   0x4308             ORRS     R0,R1,R0
   \       0x16   0x6018             STR      R0,[R3, #+0]
    176          }
   \       0x18   0x4770             BX       LR               ;; return
    177          
    178          /**
    179            * @brief  Sets the priority of an interrupt.
    180            * @param  IRQn External interrupt number
    181            *         This parameter can be an enumerator of IRQn_Type enumeration
    182            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
    183            * @param  PreemptPriority The pre-emption priority for the IRQn channel.
    184            *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
    185            *         A lower priority value indicates a higher priority
    186            * @param  SubPriority the subpriority level for the IRQ channel.
    187            *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
    188            *         A lower priority value indicates a higher priority.
    189            * @retval None
    190            */

   \                                 In section .text, align 2, keep-with-next
    191          void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
    192          {
   \                     HAL_NVIC_SetPriority: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
    193            uint32_t prioritygroup = 0x00U;
    194            
    195            /* Check the parameters */
    196            assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
    197            assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
    198            
    199            prioritygroup = NVIC_GetPriorityGrouping();
   \        0x2   0x....             LDR.N    R3,??DataTable13_2  ;; 0xe000ed0c
   \        0x4   0x681C             LDR      R4,[R3, #+0]
   \        0x6   0xF3C4 0x2302      UBFX     R3,R4,#+8,#+3
    200            
    201            NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
   \        0xA   0x2401             MOVS     R4,#+1
   \        0xC   0xF1C3 0x0507      RSB      R5,R3,#+7
   \       0x10   0x2D05             CMP      R5,#+5
   \       0x12   0xBF2E             ITEE     CS
   \       0x14   0x250F             MOVCS    R5,#+15
   \       0x16   0xFA04 0xF505      LSLCC    R5,R4,R5
   \       0x1A   0x1E6D             SUBCC    R5,R5,#+1
   \       0x1C   0x1D1E             ADDS     R6,R3,#+4
   \       0x1E   0x2E07             CMP      R6,#+7
   \       0x20   0xBF34             ITE      CC
   \       0x22   0x2300             MOVCC    R3,#+0
   \       0x24   0x1EDB             SUBCS    R3,R3,#+3
   \       0x26   0x4029             ANDS     R1,R5,R1
   \       0x28   0x4099             LSLS     R1,R1,R3
   \       0x2A   0xFA04 0xF303      LSL      R3,R4,R3
   \       0x2E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x32   0x1E5B             SUBS     R3,R3,#+1
   \       0x34   0x401A             ANDS     R2,R3,R2
   \       0x36   0x4311             ORRS     R1,R2,R1
   \       0x38   0x....             B.N      __NVIC_SetPriority
    202          }
    203          
    204          /**
    205            * @brief  Enables a device specific interrupt in the NVIC interrupt controller.
    206            * @note   To configure interrupts priority correctly, the NVIC_PriorityGroupConfig()
    207            *         function should be called before.
    208            * @param  IRQn External interrupt number
    209            *         This parameter can be an enumerator of IRQn_Type enumeration
    210            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
    211            * @retval None
    212            */

   \                                 In section .text, align 2, keep-with-next
    213          void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
    214          {
    215            /* Check the parameters */
    216            assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    217            
    218            /* Enable interrupt */
    219            NVIC_EnableIRQ(IRQn);
   \                     HAL_NVIC_EnableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xD407             BMI.N    ??HAL_NVIC_EnableIRQ_0
   \        0x4   0x2201             MOVS     R2,#+1
   \        0x6   0xF000 0x011F      AND      R1,R0,#0x1F
   \        0xA   0x....             LDR.N    R3,??DataTable13_4  ;; 0xe000e100
   \        0xC   0x408A             LSLS     R2,R2,R1
   \        0xE   0x0940             LSRS     R0,R0,#+5
   \       0x10   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
    220          }
   \                     ??HAL_NVIC_EnableIRQ_0: (+1)
   \       0x14   0x4770             BX       LR               ;; return
    221          
    222          /**
    223            * @brief  Disables a device specific interrupt in the NVIC interrupt controller.
    224            * @param  IRQn External interrupt number
    225            *         This parameter can be an enumerator of IRQn_Type enumeration
    226            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
    227            * @retval None
    228            */

   \                                 In section .text, align 2, keep-with-next
    229          void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
    230          {
    231            /* Check the parameters */
    232            assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
    233            
    234            /* Disable interrupt */
    235            NVIC_DisableIRQ(IRQn);
   \                     HAL_NVIC_DisableIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xD40B             BMI.N    ??HAL_NVIC_DisableIRQ_0
   \        0x4   0x2201             MOVS     R2,#+1
   \        0x6   0xF000 0x011F      AND      R1,R0,#0x1F
   \        0xA   0x....             LDR.N    R3,??DataTable13_5  ;; 0xe000e180
   \        0xC   0x408A             LSLS     R2,R2,R1
   \        0xE   0x0940             LSRS     R0,R0,#+5
   \       0x10   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
   \       0x14   0xF3BF 0x8F4F      DSB      SY
   \       0x18   0xF3BF 0x8F6F      ISB      SY
    236          }
   \                     ??HAL_NVIC_DisableIRQ_0: (+1)
   \       0x1C   0x4770             BX       LR               ;; return
    237          
    238          /**
    239            * @brief  Initiates a system reset request to reset the MCU.
    240            * @retval None
    241            */

   \                                 In section .text, align 2, keep-with-next
    242          void HAL_NVIC_SystemReset(void)
    243          {
    244            /* System Reset */
    245            NVIC_SystemReset();
   \                     HAL_NVIC_SystemReset: (+1)
   \        0x0   0xF3BF 0x8F4F      DSB      SY
   \        0x4   0x....             LDR.N    R1,??DataTable13_2  ;; 0xe000ed0c
   \        0x6   0x....             LDR.N    R0,??DataTable13_6  ;; 0x5fa0004
   \        0x8   0x680A             LDR      R2,[R1, #+0]
   \        0xA   0xF402 0x62E0      AND      R2,R2,#0x700
   \        0xE   0x4302             ORRS     R2,R0,R2
   \       0x10   0x600A             STR      R2,[R1, #+0]
   \       0x12   0xF3BF 0x8F4F      DSB      SY
   \                     ??HAL_NVIC_SystemReset_0: (+1)
   \       0x16   0xBF00             Nop
   \       0x18   0xE7FD             B.N      ??HAL_NVIC_SystemReset_0
    246          }
    247          
    248          /**
    249            * @brief  Initializes the System Timer and its interrupt, and starts the System Tick Timer.
    250            *         Counter is in free running mode to generate periodic interrupts.
    251            * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
    252            * @retval status:  - 0  Function succeeded.
    253            *                  - 1  Function failed.
    254            */

   \                                 In section .text, align 2, keep-with-next
    255          uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
    256          {
   \                     HAL_SYSTICK_Config: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    257             return SysTick_Config(TicksNumb);
   \        0x2   0x1E40             SUBS     R0,R0,#+1
   \        0x4   0xF1B0 0x7F80      CMP      R0,#+16777216
   \        0x8   0xD301             BCC.N    ??HAL_SYSTICK_Config_0
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xBD10             POP      {R4,PC}
   \                     ??HAL_SYSTICK_Config_0: (+1)
   \        0xE   0x....             LDR.N    R4,??DataTable13_7  ;; 0xe000e010
   \       0x10   0x6060             STR      R0,[R4, #+4]
   \       0x12   0x210F             MOVS     R1,#+15
   \       0x14   0xF04F 0x30FF      MOV      R0,#-1
   \       0x18   0x....'....        BL       __NVIC_SetPriority
   \       0x1C   0x2100             MOVS     R1,#+0
   \       0x1E   0x60A1             STR      R1,[R4, #+8]
   \       0x20   0x2007             MOVS     R0,#+7
   \       0x22   0x6020             STR      R0,[R4, #+0]
   \       0x24   0x2000             MOVS     R0,#+0
   \       0x26   0xBD10             POP      {R4,PC}          ;; return
    258          }
    259          /**
    260            * @}
    261            */
    262          
    263          /** @defgroup CORTEX_Exported_Functions_Group2 Peripheral Control functions
    264           *  @brief   Cortex control functions
    265           *
    266          @verbatim
    267            ==============================================================================
    268                                ##### Peripheral Control functions #####
    269            ==============================================================================
    270              [..]
    271                This subsection provides a set of functions allowing to control the CORTEX
    272                (NVIC, SYSTICK, MPU) functionalities.
    273          
    274          
    275          @endverbatim
    276            * @{
    277            */
    278          
    279          #if (__MPU_PRESENT == 1U)
    280          	
    281          /**
    282            * @brief  Disables the MPU also clears the HFNMIENA bit (ARM recommendation) 
    283            * @retval None
    284            */
    285          void HAL_MPU_Disable(void)
    286          {
    287            /* Disable fault exceptions */
    288            SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
    289            
    290            /* Disable the MPU */
    291            MPU->CTRL = 0U;
    292          }
    293          
    294          /**
    295            * @brief  Enables the MPU
    296            * @param  MPU_Control Specifies the control mode of the MPU during hard fault, 
    297            *          NMI, FAULTMASK and privileged access to the default memory 
    298            *          This parameter can be one of the following values:
    299            *            @arg MPU_HFNMI_PRIVDEF_NONE
    300            *            @arg MPU_HARDFAULT_NMI
    301            *            @arg MPU_PRIVILEGED_DEFAULT
    302            *            @arg MPU_HFNMI_PRIVDEF
    303            * @retval None
    304            */
    305          void HAL_MPU_Enable(uint32_t MPU_Control)
    306          {
    307            /* Enable the MPU */
    308            MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
    309            
    310            /* Enable fault exceptions */
    311            SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
    312          }
    313          	
    314          	/**
    315            * @brief  Initializes and configures the Region and the memory to be protected.
    316            * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
    317            *                the initialization and configuration information.
    318            * @retval None
    319            */
    320          void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
    321          {
    322            /* Check the parameters */
    323            assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
    324            assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));
    325          
    326            /* Set the Region number */
    327            MPU->RNR = MPU_Init->Number;
    328          
    329            if ((MPU_Init->Enable) != RESET)
    330            {
    331              /* Check the parameters */
    332              assert_param(IS_MPU_INSTRUCTION_ACCESS(MPU_Init->DisableExec));
    333              assert_param(IS_MPU_REGION_PERMISSION_ATTRIBUTE(MPU_Init->AccessPermission));
    334              assert_param(IS_MPU_TEX_LEVEL(MPU_Init->TypeExtField));
    335              assert_param(IS_MPU_ACCESS_SHAREABLE(MPU_Init->IsShareable));
    336              assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    337              assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    338              assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    339              assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    340              
    341              MPU->RBAR = MPU_Init->BaseAddress;
    342              MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
    343                          ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
    344                          ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
    345                          ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
    346                          ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
    347                          ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
    348                          ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
    349                          ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
    350                          ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
    351            }
    352            else
    353            {
    354              MPU->RBAR = 0x00U;
    355              MPU->RASR = 0x00U;
    356            }
    357          }
    358          #endif /* __MPU_PRESENT */
    359          
    360          /**
    361            * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
    362            * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
    363            */

   \                                 In section .text, align 2, keep-with-next
    364          uint32_t HAL_NVIC_GetPriorityGrouping(void)
    365          {
    366            /* Get the PRIGROUP[10:8] field value */
    367            return NVIC_GetPriorityGrouping();
   \                     HAL_NVIC_GetPriorityGrouping: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable13_2  ;; 0xe000ed0c
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0xF3C0 0x2002      UBFX     R0,R0,#+8,#+3
   \        0x8   0x4770             BX       LR               ;; return
    368          }
    369          
    370          /**
    371            * @brief  Gets the priority of an interrupt.
    372            * @param  IRQn External interrupt number
    373            *         This parameter can be an enumerator of IRQn_Type enumeration
    374            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
    375            * @param   PriorityGroup: the priority grouping bits length.
    376            *         This parameter can be one of the following values:
    377            *           @arg NVIC_PRIORITYGROUP_0: 0 bits for pre-emption priority
    378            *                                      4 bits for subpriority
    379            *           @arg NVIC_PRIORITYGROUP_1: 1 bits for pre-emption priority
    380            *                                      3 bits for subpriority
    381            *           @arg NVIC_PRIORITYGROUP_2: 2 bits for pre-emption priority
    382            *                                      2 bits for subpriority
    383            *           @arg NVIC_PRIORITYGROUP_3: 3 bits for pre-emption priority
    384            *                                      1 bits for subpriority
    385            *           @arg NVIC_PRIORITYGROUP_4: 4 bits for pre-emption priority
    386            *                                      0 bits for subpriority
    387            * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
    388            * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
    389            * @retval None
    390            */

   \                                 In section .text, align 2, keep-with-next
    391          void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
    392          {
   \                     HAL_NVIC_GetPriority: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
    393            /* Check the parameters */
    394            assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
    395            /* Get priority for Cortex-M system or device specific interrupts */
    396            NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0xD402             BMI.N    ??HAL_NVIC_GetPriority_0
   \        0x6   0x....             LDR.N    R0,??DataTable13  ;; 0xe000e400
   \        0x8   0x5D00             LDRB     R0,[R0, R4]
   \        0xA   0xE005             B.N      ??HAL_NVIC_GetPriority_1
   \                     ??HAL_NVIC_GetPriority_0: (+1)
   \        0xC   0x....             LDR.N    R0,??DataTable13_1  ;; 0xe000ed18
   \        0xE   0xF004 0x040F      AND      R4,R4,#0xF
   \       0x12   0x4404             ADD      R4,R0,R4
   \       0x14   0xF814 0x0C04      LDRB     R0,[R4, #-4]
   \                     ??HAL_NVIC_GetPriority_1: (+1)
   \       0x18   0xF001 0x0107      AND      R1,R1,#0x7
   \       0x1C   0x0900             LSRS     R0,R0,#+4
   \       0x1E   0x2401             MOVS     R4,#+1
   \       0x20   0xF1C1 0x0507      RSB      R5,R1,#+7
   \       0x24   0x2D05             CMP      R5,#+5
   \       0x26   0xBF2E             ITEE     CS
   \       0x28   0x250F             MOVCS    R5,#+15
   \       0x2A   0xFA04 0xF505      LSLCC    R5,R4,R5
   \       0x2E   0x1E6D             SUBCC    R5,R5,#+1
   \       0x30   0x1D0E             ADDS     R6,R1,#+4
   \       0x32   0x2E07             CMP      R6,#+7
   \       0x34   0xBF34             ITE      CC
   \       0x36   0x2100             MOVCC    R1,#+0
   \       0x38   0x1EC9             SUBCS    R1,R1,#+3
   \       0x3A   0xFA20 0xF601      LSR      R6,R0,R1
   \       0x3E   0x408C             LSLS     R4,R4,R1
   \       0x40   0x4035             ANDS     R5,R5,R6
   \       0x42   0x1E64             SUBS     R4,R4,#+1
   \       0x44   0x6015             STR      R5,[R2, #+0]
   \       0x46   0x4020             ANDS     R0,R4,R0
   \       0x48   0x6018             STR      R0,[R3, #+0]
    397          }
   \       0x4A   0xBD70             POP      {R4-R6,PC}       ;; return
    398          
    399          /**
    400            * @brief  Sets Pending bit of an external interrupt.
    401            * @param  IRQn External interrupt number
    402            *         This parameter can be an enumerator of IRQn_Type enumeration
    403            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
    404            * @retval None
    405            */

   \                                 In section .text, align 2, keep-with-next
    406          void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
    407          {
    408            /* Set interrupt pending */
    409            NVIC_SetPendingIRQ(IRQn);
   \                     HAL_NVIC_SetPendingIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xD407             BMI.N    ??HAL_NVIC_SetPendingIRQ_0
   \        0x4   0x2201             MOVS     R2,#+1
   \        0x6   0xF000 0x011F      AND      R1,R0,#0x1F
   \        0xA   0x....             LDR.N    R3,??DataTable13_8  ;; 0xe000e200
   \        0xC   0x408A             LSLS     R2,R2,R1
   \        0xE   0x0940             LSRS     R0,R0,#+5
   \       0x10   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
    410          }
   \                     ??HAL_NVIC_SetPendingIRQ_0: (+1)
   \       0x14   0x4770             BX       LR               ;; return
    411          
    412          /**
    413            * @brief  Gets Pending Interrupt (reads the pending register in the NVIC
    414            *         and returns the pending bit for the specified interrupt).
    415            * @param  IRQn External interrupt number
    416            *         This parameter can be an enumerator of IRQn_Type enumeration
    417            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
    418            * @retval status: - 0  Interrupt status is not pending.
    419            *                 - 1  Interrupt status is pending.
    420            */

   \                                 In section .text, align 2, keep-with-next
    421          uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
    422          {
   \                     HAL_NVIC_GetPendingIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    423            /* Return 1 if pending else 0U */
    424            return NVIC_GetPendingIRQ(IRQn);
   \        0x2   0xD401             BMI.N    ??HAL_NVIC_GetPendingIRQ_0
   \        0x4   0x....             LDR.N    R0,??DataTable13_8  ;; 0xe000e200
   \        0x6   0x....             B.N      ?Subroutine0
   \                     ??HAL_NVIC_GetPendingIRQ_0: (+1)
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x4770             BX       LR               ;; return
    425          }
    426          
    427          /**
    428            * @brief  Clears the pending bit of an external interrupt.
    429            * @param  IRQn External interrupt number
    430            *         This parameter can be an enumerator of IRQn_Type enumeration
    431            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
    432            * @retval None
    433            */

   \                                 In section .text, align 2, keep-with-next
    434          void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
    435          {
    436            /* Clear pending interrupt */
    437            NVIC_ClearPendingIRQ(IRQn);
   \                     HAL_NVIC_ClearPendingIRQ: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0xD407             BMI.N    ??HAL_NVIC_ClearPendingIRQ_0
   \        0x4   0x2201             MOVS     R2,#+1
   \        0x6   0xF000 0x011F      AND      R1,R0,#0x1F
   \        0xA   0x....             LDR.N    R3,??DataTable13_9  ;; 0xe000e280
   \        0xC   0x408A             LSLS     R2,R2,R1
   \        0xE   0x0940             LSRS     R0,R0,#+5
   \       0x10   0xF843 0x2020      STR      R2,[R3, R0, LSL #+2]
    438          }
   \                     ??HAL_NVIC_ClearPendingIRQ_0: (+1)
   \       0x14   0x4770             BX       LR               ;; return
    439          
    440          /**
    441            * @brief  Gets active interrupt ( reads the active register in NVIC and returns the active bit).
    442            * @param  IRQn External interrupt number
    443            *         This parameter can be an enumerator of IRQn_Type enumeration
    444            *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
    445            * @retval status: - 0  Interrupt status is not pending.
    446            *                 - 1  Interrupt status is pending.
    447            */

   \                                 In section .text, align 2, keep-with-next
    448          uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
    449          {
   \                     HAL_NVIC_GetActive: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    450            /* Return 1 if active else 0U */
    451            return NVIC_GetActive(IRQn);
   \        0x2   0xD401             BMI.N    ??HAL_NVIC_GetActive_0
   \        0x4   0x....             LDR.N    R0,??DataTable13_10  ;; 0xe000e300
   \        0x6   0x....             B.N      ?Subroutine0
   \                     ??HAL_NVIC_GetActive_0: (+1)
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x4770             BX       LR               ;; return
    452          }
    453          
    454          /**
    455            * @brief  Configures the SysTick clock source.
    456            * @param  CLKSource specifies the SysTick clock source.
    457            *         This parameter can be one of the following values:
    458            *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
    459            *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
    460            * @retval None
    461            */

   \                                 In section .text, align 2, keep-with-next
    462          void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
    463          {
    464            /* Check the parameters */
    465            assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
    466            if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
   \                     HAL_SYSTICK_CLKSourceConfig: (+1)
   \        0x0   0x2804             CMP      R0,#+4
   \        0x2   0x....             LDR.N    R1,??DataTable13_7  ;; 0xe000e010
   \        0x4   0xD104             BNE.N    ??HAL_SYSTICK_CLKSourceConfig_0
    467            {
    468              SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
   \        0x6   0x6808             LDR      R0,[R1, #+0]
   \        0x8   0xF040 0x0004      ORR      R0,R0,#0x4
   \        0xC   0x6008             STR      R0,[R1, #+0]
   \        0xE   0x4770             BX       LR
    469            }
    470            else
    471            {
    472              SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
   \                     ??HAL_SYSTICK_CLKSourceConfig_0: (+1)
   \       0x10   0x680A             LDR      R2,[R1, #+0]
   \       0x12   0xF022 0x0204      BIC      R2,R2,#0x4
   \       0x16   0x600A             STR      R2,[R1, #+0]
    473            }
    474          }
   \       0x18   0x4770             BX       LR               ;; return
    475          
    476          /**
    477            * @brief  This function handles SYSTICK interrupt request.
    478            * @retval None
    479            */

   \                                 In section .text, align 2, keep-with-next
    480          void HAL_SYSTICK_IRQHandler(void)
    481          {
    482            HAL_SYSTICK_Callback();
   \                     HAL_SYSTICK_IRQHandler: (+1)
   \        0x0   0x....'....        B.W      HAL_SYSTICK_Callback
    483          }
    484          
    485          /**
    486            * @brief  SYSTICK callback.
    487            * @retval None
    488            */

   \                                 In section .text, align 2
    489          __weak void HAL_SYSTICK_Callback(void)
    490          {
    491            /* NOTE : This function Should not be modified, when the callback is needed,
    492                      the HAL_SYSTICK_Callback could be implemented in the user file
    493             */
    494          }
   \                     HAL_SYSTICK_Callback: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x094A             LSRS     R2,R1,#+5
   \        0x2   0xF850 0x0022      LDR      R0,[R0, R2, LSL #+2]
   \        0x6   0xF001 0x011F      AND      R1,R1,#0x1F
   \        0xA   0x40C8             LSRS     R0,R0,R1
   \        0xC   0xF000 0x0001      AND      R0,R0,#0x1
   \       0x10   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \        0x0   0xE000'E400        DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_1:
   \        0x0   0xE000'ED18        DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_2:
   \        0x0   0xE000'ED0C        DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_3:
   \        0x0   0x05FA'0000        DC32     0x5fa0000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_4:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_5:
   \        0x0   0xE000'E180        DC32     0xe000e180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_6:
   \        0x0   0x05FA'0004        DC32     0x5fa0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_7:
   \        0x0   0xE000'E010        DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_8:
   \        0x0   0xE000'E200        DC32     0xe000e200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_9:
   \        0x0   0xE000'E280        DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13_10:
   \        0x0   0xE000'E300        DC32     0xe000e300
    495          
    496          /**
    497            * @}
    498            */
    499          
    500          /**
    501            * @}
    502            */
    503          
    504          #endif /* HAL_CORTEX_MODULE_ENABLED */
    505          /**
    506            * @}
    507            */
    508          
    509          /**
    510            * @}
    511            */
    512          
    513          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_NVIC_ClearPendingIRQ
       0   HAL_NVIC_DisableIRQ
       0   HAL_NVIC_EnableIRQ
       0   HAL_NVIC_GetActive
       0   HAL_NVIC_GetPendingIRQ
      16   HAL_NVIC_GetPriority
       0   HAL_NVIC_GetPriorityGrouping
       0   HAL_NVIC_SetPendingIRQ
      16   HAL_NVIC_SetPriority
         0   -> __NVIC_SetPriority
       0   HAL_NVIC_SetPriorityGrouping
       0   HAL_NVIC_SystemReset
       0   HAL_SYSTICK_CLKSourceConfig
       0   HAL_SYSTICK_Callback
       8   HAL_SYSTICK_Config
         8   -> __NVIC_SetPriority
       0   HAL_SYSTICK_IRQHandler
         0   -> HAL_SYSTICK_Callback
       0   __NVIC_SetPriority


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable13
       4  ??DataTable13_1
       4  ??DataTable13_10
       4  ??DataTable13_2
       4  ??DataTable13_3
       4  ??DataTable13_4
       4  ??DataTable13_5
       4  ??DataTable13_6
       4  ??DataTable13_7
       4  ??DataTable13_8
       4  ??DataTable13_9
      18  ?Subroutine0
      22  HAL_NVIC_ClearPendingIRQ
      30  HAL_NVIC_DisableIRQ
      22  HAL_NVIC_EnableIRQ
      12  HAL_NVIC_GetActive
      12  HAL_NVIC_GetPendingIRQ
      76  HAL_NVIC_GetPriority
      10  HAL_NVIC_GetPriorityGrouping
      22  HAL_NVIC_SetPendingIRQ
      58  HAL_NVIC_SetPriority
      26  HAL_NVIC_SetPriorityGrouping
      26  HAL_NVIC_SystemReset
      26  HAL_SYSTICK_CLKSourceConfig
       2  HAL_SYSTICK_Callback
      40  HAL_SYSTICK_Config
       4  HAL_SYSTICK_IRQHandler
      26  __NVIC_SetPriority

 
 476 bytes in section .text
 
 474 bytes of CODE memory (+ 2 bytes shared)

Errors: none
Warnings: none
