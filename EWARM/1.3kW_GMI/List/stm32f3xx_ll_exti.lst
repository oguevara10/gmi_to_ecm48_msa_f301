###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  14:03:55
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_ll_exti.c
#    Command line      =
#        -f C:\Users\100001~1\AppData\Local\Temp\EWA172.tmp
#        (C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_ll_exti.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List\stm32f3xx_ll_exti.lst
#    Object file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj\stm32f3xx_ll_exti.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_ll_exti.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f3xx_ll_exti.c
      4            * @author  MCD Application Team
      5            * @brief   EXTI LL module driver.
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          #if defined(USE_FULL_LL_DRIVER)
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "stm32f3xx_ll_exti.h"
     23          #ifdef  USE_FULL_ASSERT
     24          #include "stm32_assert.h"
     25          #else
     26          #define assert_param(expr) ((void)0U)
     27          #endif
     28          
     29          /** @addtogroup STM32F3xx_LL_Driver
     30            * @{
     31            */
     32          
     33          #if defined (EXTI)
     34          
     35          /** @defgroup EXTI_LL EXTI
     36            * @{
     37            */
     38          
     39          /* Private types -------------------------------------------------------------*/
     40          /* Private variables ---------------------------------------------------------*/
     41          /* Private constants ---------------------------------------------------------*/
     42          /* Private macros ------------------------------------------------------------*/
     43          /** @addtogroup EXTI_LL_Private_Macros
     44            * @{
     45            */
     46          
     47          #define IS_LL_EXTI_LINE_0_31(__VALUE__)              (((__VALUE__) & ~LL_EXTI_LINE_ALL_0_31) == 0x00000000U)
     48          #if defined(EXTI_32_63_SUPPORT)
     49          #define IS_LL_EXTI_LINE_32_63(__VALUE__)             (((__VALUE__) & ~LL_EXTI_LINE_ALL_32_63) == 0x00000000U)
     50          #endif
     51          
     52          #define IS_LL_EXTI_MODE(__VALUE__)                   (((__VALUE__) == LL_EXTI_MODE_IT)            \
     53                                                             || ((__VALUE__) == LL_EXTI_MODE_EVENT)         \
     54                                                             || ((__VALUE__) == LL_EXTI_MODE_IT_EVENT))
     55          
     56          
     57          #define IS_LL_EXTI_TRIGGER(__VALUE__)                (((__VALUE__) == LL_EXTI_TRIGGER_NONE)       \
     58                                                             || ((__VALUE__) == LL_EXTI_TRIGGER_RISING)     \
     59                                                             || ((__VALUE__) == LL_EXTI_TRIGGER_FALLING)    \
     60                                                             || ((__VALUE__) == LL_EXTI_TRIGGER_RISING_FALLING))
     61          
     62          /**
     63            * @}
     64            */
     65          
     66          /* Private function prototypes -----------------------------------------------*/
     67          
     68          /* Exported functions --------------------------------------------------------*/
     69          /** @addtogroup EXTI_LL_Exported_Functions
     70            * @{
     71            */
     72          
     73          /** @addtogroup EXTI_LL_EF_Init
     74            * @{
     75            */
     76          
     77          /**
     78            * @brief  De-initialize the EXTI registers to their default reset values.
     79            * @retval An ErrorStatus enumeration value:
     80            *          - SUCCESS: EXTI registers are de-initialized
     81            *          - ERROR: not applicable
     82            */

   \                                 In section .text, align 2, keep-with-next
     83          uint32_t LL_EXTI_DeInit(void)
     84          {
     85            /* Interrupt mask register set to default reset values */
     86            LL_EXTI_WriteReg(IMR,   0x1F800000U);
   \                     LL_EXTI_DeInit: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable1  ;; 0x40010400
   \        0x2   0xF04F 0x51FC      MOV      R1,#+528482304
   \        0x6   0x6001             STR      R1,[R0, #+0]
     87            /* Event mask register set to default reset values */
     88            LL_EXTI_WriteReg(EMR,   0x00000000U);
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x6042             STR      R2,[R0, #+4]
     89            /* Rising Trigger selection register set to default reset values */
     90            LL_EXTI_WriteReg(RTSR,  0x00000000U);
   \        0xC   0x2300             MOVS     R3,#+0
   \        0xE   0x6083             STR      R3,[R0, #+8]
     91            /* Falling Trigger selection register set to default reset values */
     92            LL_EXTI_WriteReg(FTSR,  0x00000000U);
   \       0x10   0x60C2             STR      R2,[R0, #+12]
     93            /* Software interrupt event register set to default reset values */
     94            LL_EXTI_WriteReg(SWIER, 0x00000000U);
   \       0x12   0x6102             STR      R2,[R0, #+16]
     95            /* Pending register clear */
     96            LL_EXTI_WriteReg(PR,    0x007FFFFFU);
     97          
     98          #if defined(EXTI_32_63_SUPPORT)
     99            /* Interrupt mask register 2 set to default reset values */
    100          #if defined(STM32F334x8)
    101            LL_EXTI_WriteReg(IMR2,        0xFFFFFFFEU);
    102          #else
    103            LL_EXTI_WriteReg(IMR2,        0xFFFFFFFCU);
   \       0x14   0xF06F 0x0203      MVN      R2,#+3
   \       0x18   0x....             LDR.N    R1,??DataTable1_1  ;; 0x7fffff
   \       0x1A   0x6141             STR      R1,[R0, #+20]
   \       0x1C   0x6202             STR      R2,[R0, #+32]
    104          #endif  
    105            /* Event mask register 2 set to default reset values */
    106            LL_EXTI_WriteReg(EMR2,        0x00000000U);
   \       0x1E   0x6243             STR      R3,[R0, #+36]
    107            /* Rising Trigger selection register 2 set to default reset values */
    108            LL_EXTI_WriteReg(RTSR2,       0x00000000U);
   \       0x20   0x6283             STR      R3,[R0, #+40]
    109            /* Falling Trigger selection register 2 set to default reset values */
    110            LL_EXTI_WriteReg(FTSR2,       0x00000000U);
   \       0x22   0x62C3             STR      R3,[R0, #+44]
    111            /* Software interrupt event register 2 set to default reset values */
    112            LL_EXTI_WriteReg(SWIER2,      0x00000000U);
   \       0x24   0x6303             STR      R3,[R0, #+48]
    113            /* Pending register 2 clear */
    114            LL_EXTI_WriteReg(PR2,         0x00000003U);
   \       0x26   0x2103             MOVS     R1,#+3
   \       0x28   0x6341             STR      R1,[R0, #+52]
    115          
    116          #endif
    117            return SUCCESS;
   \       0x2A   0x2000             MOVS     R0,#+0
   \       0x2C   0x4770             BX       LR               ;; return
    118          }
    119          
    120          /**
    121            * @brief  Initialize the EXTI registers according to the specified parameters in EXTI_InitStruct.
    122            * @param  EXTI_InitStruct pointer to a @ref LL_EXTI_InitTypeDef structure.
    123            * @retval An ErrorStatus enumeration value:
    124            *          - SUCCESS: EXTI registers are initialized
    125            *          - ERROR: not applicable
    126            */

   \                                 In section .text, align 2, keep-with-next
    127          uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
    128          {
   \                     LL_EXTI_Init: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
    129            ErrorStatus status = SUCCESS;
    130            /* Check the parameters */
    131            assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
    132          #if defined(EXTI_32_63_SUPPORT)
    133            assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
    134          #endif
    135            assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
    136            assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));
    137          
    138            /* ENABLE LineCommand */
    139            if (EXTI_InitStruct->LineCommand != DISABLE)
   \        0x2   0x7A02             LDRB     R2,[R0, #+8]
   \        0x4   0x6803             LDR      R3,[R0, #+0]
   \        0x6   0x....             LDR.N    R4,??DataTable1  ;; 0x40010400
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x2A00             CMP      R2,#+0
   \        0xC   0xD07D             BEQ.N    ??LL_EXTI_Init_0
    140            {
    141              assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));
    142          
    143              /* Configure EXTI Lines in range from 0 to 31 */
    144              if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
   \        0xE   0x2B00             CMP      R3,#+0
   \       0x10   0xD03B             BEQ.N    ??LL_EXTI_Init_1
    145              {
    146                switch (EXTI_InitStruct->Mode)
   \       0x12   0x7A42             LDRB     R2,[R0, #+9]
   \       0x14   0xB11A             CBZ.N    R2,??LL_EXTI_Init_2
   \       0x16   0x2A02             CMP      R2,#+2
   \       0x18   0xD00E             BEQ.N    ??LL_EXTI_Init_3
   \       0x1A   0xD309             BCC.N    ??LL_EXTI_Init_4
   \       0x1C   0xE014             B.N      ??LL_EXTI_Init_5
    147                {
    148                  case LL_EXTI_MODE_IT:
    149                    /* First Disable Event on provided Lines */
    150                    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_2: (+1)
   \       0x1E   0x6865             LDR      R5,[R4, #+4]
   \       0x20   0xEA25 0x0303      BIC      R3,R5,R3
   \       0x24   0x6063             STR      R3,[R4, #+4]
    151                    /* Then Enable IT on provided Lines */
    152                    LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
   \       0x26   0x6823             LDR      R3,[R4, #+0]
   \       0x28   0x6802             LDR      R2,[R0, #+0]
   \       0x2A   0x4313             ORRS     R3,R2,R3
   \       0x2C   0x6023             STR      R3,[R4, #+0]
    153                    break;
   \       0x2E   0xE00C             B.N      ??LL_EXTI_Init_6
    154                  case LL_EXTI_MODE_EVENT:
    155                    /* First Disable IT on provided Lines */
    156                    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_4: (+1)
   \       0x30   0x6825             LDR      R5,[R4, #+0]
   \       0x32   0xEA25 0x0303      BIC      R3,R5,R3
   \       0x36   0xE001             B.N      ??LL_EXTI_Init_7
    157                    /* Then Enable Event on provided Lines */
    158                    LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
    159                    break;
    160                  case LL_EXTI_MODE_IT_EVENT:
    161                    /* Directly Enable IT & Event on provided Lines */
    162                    LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_3: (+1)
   \       0x38   0x6825             LDR      R5,[R4, #+0]
   \       0x3A   0x432B             ORRS     R3,R3,R5
   \                     ??LL_EXTI_Init_7: (+1)
   \       0x3C   0x6023             STR      R3,[R4, #+0]
    163                    LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
   \       0x3E   0x6863             LDR      R3,[R4, #+4]
   \       0x40   0x6802             LDR      R2,[R0, #+0]
   \       0x42   0x4313             ORRS     R3,R2,R3
   \       0x44   0x6063             STR      R3,[R4, #+4]
    164                    break;
   \       0x46   0xE000             B.N      ??LL_EXTI_Init_6
    165                  default:
    166                    status = ERROR;
   \                     ??LL_EXTI_Init_5: (+1)
   \       0x48   0x2101             MOVS     R1,#+1
    167                    break;
    168                }
    169                if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
   \                     ??LL_EXTI_Init_6: (+1)
   \       0x4A   0x7A82             LDRB     R2,[R0, #+10]
   \       0x4C   0xB1EA             CBZ.N    R2,??LL_EXTI_Init_1
    170                {
    171                  switch (EXTI_InitStruct->Trigger)
   \       0x4E   0x2A01             CMP      R2,#+1
   \       0x50   0xD004             BEQ.N    ??LL_EXTI_Init_8
   \       0x52   0xD319             BCC.N    ??LL_EXTI_Init_9
   \       0x54   0x2A03             CMP      R2,#+3
   \       0x56   0xD00E             BEQ.N    ??LL_EXTI_Init_10
   \       0x58   0xD309             BCC.N    ??LL_EXTI_Init_11
   \       0x5A   0xE015             B.N      ??LL_EXTI_Init_9
    172                  {
    173                    case LL_EXTI_TRIGGER_RISING:
    174                      /* First Disable Falling Trigger on provided Lines */
    175                      LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_8: (+1)
   \       0x5C   0x68E3             LDR      R3,[R4, #+12]
   \       0x5E   0x6802             LDR      R2,[R0, #+0]
   \       0x60   0x4393             BICS     R3,R3,R2
   \       0x62   0x60E3             STR      R3,[R4, #+12]
    176                      /* Then Enable Rising Trigger on provided Lines */
    177                      LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
   \       0x64   0x68A3             LDR      R3,[R4, #+8]
   \       0x66   0x6802             LDR      R2,[R0, #+0]
   \       0x68   0x4313             ORRS     R3,R2,R3
   \       0x6A   0x60A3             STR      R3,[R4, #+8]
    178                      break;
   \       0x6C   0xE00D             B.N      ??LL_EXTI_Init_1
    179                    case LL_EXTI_TRIGGER_FALLING:
    180                      /* First Disable Rising Trigger on provided Lines */
    181                      LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_11: (+1)
   \       0x6E   0x68A3             LDR      R3,[R4, #+8]
   \       0x70   0x6802             LDR      R2,[R0, #+0]
   \       0x72   0x4393             BICS     R3,R3,R2
   \       0x74   0xE002             B.N      ??LL_EXTI_Init_12
    182                      /* Then Enable Falling Trigger on provided Lines */
    183                      LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
    184                      break;
    185                    case LL_EXTI_TRIGGER_RISING_FALLING:
    186                      LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_10: (+1)
   \       0x76   0x68A3             LDR      R3,[R4, #+8]
   \       0x78   0x6802             LDR      R2,[R0, #+0]
   \       0x7A   0x4313             ORRS     R3,R2,R3
   \                     ??LL_EXTI_Init_12: (+1)
   \       0x7C   0x60A3             STR      R3,[R4, #+8]
    187                      LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
   \       0x7E   0x68E3             LDR      R3,[R4, #+12]
   \       0x80   0x6802             LDR      R2,[R0, #+0]
   \       0x82   0x4313             ORRS     R3,R2,R3
   \       0x84   0x60E3             STR      R3,[R4, #+12]
    188                      break;
   \       0x86   0xE000             B.N      ??LL_EXTI_Init_1
    189                    default:
    190                      status = ERROR;
   \                     ??LL_EXTI_Init_9: (+1)
   \       0x88   0x2101             MOVS     R1,#+1
    191                      break;
    192                  }
    193                }
    194              }
    195          #if defined(EXTI_32_63_SUPPORT)
    196              /* Configure EXTI Lines in range from 32 to 63 */
    197              if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
   \                     ??LL_EXTI_Init_1: (+1)
   \       0x8A   0x6842             LDR      R2,[R0, #+4]
   \       0x8C   0x2A00             CMP      R2,#+0
   \       0x8E   0xD04C             BEQ.N    ??LL_EXTI_Init_13
    198              {
    199                switch (EXTI_InitStruct->Mode)
   \       0x90   0x7A43             LDRB     R3,[R0, #+9]
   \       0x92   0xB11B             CBZ.N    R3,??LL_EXTI_Init_14
   \       0x94   0x2B02             CMP      R3,#+2
   \       0x96   0xD00E             BEQ.N    ??LL_EXTI_Init_15
   \       0x98   0xD309             BCC.N    ??LL_EXTI_Init_16
   \       0x9A   0xE014             B.N      ??LL_EXTI_Init_17
    200                {
    201                  case LL_EXTI_MODE_IT:
    202                    /* First Disable Event on provided Lines */
    203                    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
   \                     ??LL_EXTI_Init_14: (+1)
   \       0x9C   0x6A65             LDR      R5,[R4, #+36]
   \       0x9E   0xEA25 0x0202      BIC      R2,R5,R2
   \       0xA2   0x6262             STR      R2,[R4, #+36]
    204                    /* Then Enable IT on provided Lines */
    205                    LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
   \       0xA4   0x6A23             LDR      R3,[R4, #+32]
   \       0xA6   0x6842             LDR      R2,[R0, #+4]
   \       0xA8   0x4313             ORRS     R3,R2,R3
   \       0xAA   0x6223             STR      R3,[R4, #+32]
    206                    break;
   \       0xAC   0xE00C             B.N      ??LL_EXTI_Init_18
    207                  case LL_EXTI_MODE_EVENT:
    208                    /* First Disable IT on provided Lines */
    209                    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
   \                     ??LL_EXTI_Init_16: (+1)
   \       0xAE   0x6A23             LDR      R3,[R4, #+32]
   \       0xB0   0xEA23 0x0202      BIC      R2,R3,R2
   \       0xB4   0xE001             B.N      ??LL_EXTI_Init_19
    210                    /* Then Enable Event on provided Lines */
    211                    LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
    212                    break;
    213                  case LL_EXTI_MODE_IT_EVENT:
    214                    /* Directly Enable IT & Event on provided Lines */
    215                    LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
   \                     ??LL_EXTI_Init_15: (+1)
   \       0xB6   0x6A23             LDR      R3,[R4, #+32]
   \       0xB8   0x431A             ORRS     R2,R2,R3
   \                     ??LL_EXTI_Init_19: (+1)
   \       0xBA   0x6222             STR      R2,[R4, #+32]
    216                    LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
   \       0xBC   0x6A65             LDR      R5,[R4, #+36]
   \       0xBE   0x6842             LDR      R2,[R0, #+4]
   \       0xC0   0x4315             ORRS     R5,R2,R5
   \       0xC2   0x6265             STR      R5,[R4, #+36]
    217                    break;
   \       0xC4   0xE000             B.N      ??LL_EXTI_Init_18
    218                  default:
    219                    status = ERROR;
   \                     ??LL_EXTI_Init_17: (+1)
   \       0xC6   0x2101             MOVS     R1,#+1
    220                    break;
    221                }
    222                if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
   \                     ??LL_EXTI_Init_18: (+1)
   \       0xC8   0x7A82             LDRB     R2,[R0, #+10]
   \       0xCA   0xB372             CBZ.N    R2,??LL_EXTI_Init_13
    223                {
    224                  switch (EXTI_InitStruct->Trigger)
   \       0xCC   0x2A01             CMP      R2,#+1
   \       0xCE   0xD004             BEQ.N    ??LL_EXTI_Init_20
   \       0xD0   0xD319             BCC.N    ??LL_EXTI_Init_21
   \       0xD2   0x2A03             CMP      R2,#+3
   \       0xD4   0xD00E             BEQ.N    ??LL_EXTI_Init_22
   \       0xD6   0xD309             BCC.N    ??LL_EXTI_Init_23
   \       0xD8   0xE015             B.N      ??LL_EXTI_Init_21
    225                  {
    226                    case LL_EXTI_TRIGGER_RISING:
    227                      /* First Disable Falling Trigger on provided Lines */
    228                      LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
   \                     ??LL_EXTI_Init_20: (+1)
   \       0xDA   0x6AE3             LDR      R3,[R4, #+44]
   \       0xDC   0x6842             LDR      R2,[R0, #+4]
   \       0xDE   0x4393             BICS     R3,R3,R2
   \       0xE0   0x62E3             STR      R3,[R4, #+44]
    229                      /* Then Enable IT on provided Lines */
    230                      LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
   \       0xE2   0x6AA3             LDR      R3,[R4, #+40]
   \       0xE4   0x6840             LDR      R0,[R0, #+4]
   \       0xE6   0x4303             ORRS     R3,R0,R3
   \       0xE8   0x62A3             STR      R3,[R4, #+40]
    231                      break;
   \       0xEA   0xE01E             B.N      ??LL_EXTI_Init_13
    232                    case LL_EXTI_TRIGGER_FALLING:
    233                      /* First Disable Rising Trigger on provided Lines */
    234                      LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
   \                     ??LL_EXTI_Init_23: (+1)
   \       0xEC   0x6AA3             LDR      R3,[R4, #+40]
   \       0xEE   0x6842             LDR      R2,[R0, #+4]
   \       0xF0   0x4393             BICS     R3,R3,R2
   \       0xF2   0xE002             B.N      ??LL_EXTI_Init_24
    235                      /* Then Enable Falling Trigger on provided Lines */
    236                      LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
    237                      break;
    238                    case LL_EXTI_TRIGGER_RISING_FALLING:
    239                      LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
   \                     ??LL_EXTI_Init_22: (+1)
   \       0xF4   0x6AA3             LDR      R3,[R4, #+40]
   \       0xF6   0x6842             LDR      R2,[R0, #+4]
   \       0xF8   0x4313             ORRS     R3,R2,R3
   \                     ??LL_EXTI_Init_24: (+1)
   \       0xFA   0x62A3             STR      R3,[R4, #+40]
    240                      LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
   \       0xFC   0x6AE3             LDR      R3,[R4, #+44]
   \       0xFE   0x6840             LDR      R0,[R0, #+4]
   \      0x100   0x4303             ORRS     R3,R0,R3
   \      0x102   0x62E3             STR      R3,[R4, #+44]
    241                      break;
   \      0x104   0xE011             B.N      ??LL_EXTI_Init_13
    242                    default:
    243                      status = ERROR;
   \                     ??LL_EXTI_Init_21: (+1)
   \      0x106   0x2101             MOVS     R1,#+1
    244                      break;
   \      0x108   0xE00F             B.N      ??LL_EXTI_Init_13
    245                  }
    246                }
    247              }
    248          #endif
    249            }
    250            /* DISABLE LineCommand */
    251            else
    252            {
    253              /* De-configure EXTI Lines in range from 0 to 31 */
    254              LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
   \                     ??LL_EXTI_Init_0: (+1)
   \      0x10A   0x6825             LDR      R5,[R4, #+0]
   \      0x10C   0xEA25 0x0303      BIC      R3,R5,R3
   \      0x110   0x6023             STR      R3,[R4, #+0]
    255              LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
   \      0x112   0x6863             LDR      R3,[R4, #+4]
   \      0x114   0x6802             LDR      R2,[R0, #+0]
   \      0x116   0x4393             BICS     R3,R3,R2
   \      0x118   0x6063             STR      R3,[R4, #+4]
    256          #if defined(EXTI_32_63_SUPPORT)
    257              /* De-configure EXTI Lines in range from 32 to 63 */
    258              LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
   \      0x11A   0x6A23             LDR      R3,[R4, #+32]
   \      0x11C   0x6842             LDR      R2,[R0, #+4]
   \      0x11E   0x4393             BICS     R3,R3,R2
   \      0x120   0x6223             STR      R3,[R4, #+32]
    259              LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
   \      0x122   0x6A63             LDR      R3,[R4, #+36]
   \      0x124   0x6840             LDR      R0,[R0, #+4]
   \      0x126   0x4383             BICS     R3,R3,R0
   \      0x128   0x6263             STR      R3,[R4, #+36]
    260          #endif
    261            }
    262            return status;
   \                     ??LL_EXTI_Init_13: (+1)
   \      0x12A   0x4608             MOV      R0,R1
   \      0x12C   0xBD30             POP      {R4,R5,PC}       ;; return
    263          }
    264          
    265          /**
    266            * @brief  Set each @ref LL_EXTI_InitTypeDef field to default value.
    267            * @param  EXTI_InitStruct Pointer to a @ref LL_EXTI_InitTypeDef structure.
    268            * @retval None
    269            */

   \                                 In section .text, align 2, keep-with-next
    270          void LL_EXTI_StructInit(LL_EXTI_InitTypeDef *EXTI_InitStruct)
    271          {
    272            EXTI_InitStruct->Line_0_31      = LL_EXTI_LINE_NONE;
   \                     LL_EXTI_StructInit: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x6001             STR      R1,[R0, #+0]
    273          #if defined(EXTI_32_63_SUPPORT)
    274            EXTI_InitStruct->Line_32_63     = LL_EXTI_LINE_NONE;
    275          #endif
    276            EXTI_InitStruct->LineCommand    = DISABLE;
    277            EXTI_InitStruct->Mode           = LL_EXTI_MODE_IT;
    278            EXTI_InitStruct->Trigger        = LL_EXTI_TRIGGER_FALLING;
   \        0x4   0x2202             MOVS     R2,#+2
   \        0x6   0x6041             STR      R1,[R0, #+4]
   \        0x8   0x7201             STRB     R1,[R0, #+8]
   \        0xA   0x7241             STRB     R1,[R0, #+9]
   \        0xC   0x7282             STRB     R2,[R0, #+10]
    279          }
   \        0xE   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \        0x0   0x4001'0400        DC32     0x40010400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \        0x0   0x007F'FFFF        DC32     0x7fffff
    280          
    281          /**
    282            * @}
    283            */
    284          
    285          /**
    286            * @}
    287            */
    288          
    289          /**
    290            * @}
    291            */
    292          
    293          #endif /* defined (EXTI) */
    294          
    295          /**
    296            * @}
    297            */
    298          
    299          #endif /* USE_FULL_LL_DRIVER */
    300          
    301          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LL_EXTI_DeInit
      12   LL_EXTI_Init
       0   LL_EXTI_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      46  LL_EXTI_DeInit
     302  LL_EXTI_Init
      16  LL_EXTI_StructInit

 
 372 bytes in section .text
 
 372 bytes of CODE memory

Errors: none
Warnings: none
