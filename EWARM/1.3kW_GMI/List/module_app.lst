###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  14:03:33
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                        
#    Endian                       =  little
#    Source file                  =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\FlexMouse\Features\module_app.c
#    Command line                 =
#        -f C:\Users\100001~1\AppData\Local\Temp\EW4BAD.tmp
#        (C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\FlexMouse\Features\module_app.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale                       =  C
#    List file                    =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List\module_app.lst
#    Object file                  =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj\module_app.o
#    Runtime model:                  
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\FlexMouse\Features\module_app.c
      1          /**
      2            ********************************************************************************************************************************
      3            * @file    module_app.c 
      4            * @author  Pamela Lee
      5            * @brief   This is a template non-driver app.
      6            * @details This app does nothing.
      7            ********************************************************************************************************************************
      8            */
      9          
     10          /* Includes --------------------------------------------------------------------------------------------------------------------*/
     11          #include "driver_usart1.h"
     12          
     13          
     14          /* Content ---------------------------------------------------------------------------------------------------------------------*/
     15          extern ProcessInfo processInfoTable[];
     16          
     17          #define DemandPollPeriod 2000                                                       //time period for checking and sending 0-10V and speed data to motor board
     18          uint64_t tt_DemandTime;
     19          
     20          Usart1_Control* usart1Control_AppLocal;

   \                                 In section .bss, align 1
     21          uint8_t testCounter = 0;
   \                     testCounter:
   \        0x0                      DS8 1

   \                                 In section .data, align 8
     22          uint64_t errorCounter = 0;
     23          
     24          
     25          
     26          uint8_t tmpry4Test = true; /** this is only for testing the error/log data exchange !!!!!!!!!!!!! please delete these line for production version **/
   \                     tmpry4Test:
   \        0x0   0x01               DC8 1
   \        0x1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \                     tt_DemandTime:
   \        0x8                      DS8 8
   \                     errorCounter:
   \       0x10   0x0000'0000'0      DC64 0

   \              000'0000
     27          #define tmpDelayPeriod 100                                                       //time period for checking and sending 0-10V and speed data to motor board
     28          uint64_t tt_DemandtmpDelayTime;
   \                     tt_DemandtmpDelayTime:
   \       0x18                      DS8 8
   \                     usart1Control_AppLocal:
   \       0x20                      DS8 4
     29          
     30          
     31          enum AppStates {
     32              INIT_APP,
     33              RUN_APP,
     34              // additional states to be added here as necessary.
     35              IRQ_APP = DEFAULT_IRQ_STATE,
     36              STOP_APP = KILL_APP
     37          };
     38          
     39          /** pam procedure #10 of Module insertion  :  add the module execution function **/

   \                                 In section .text, align 2, keep-with-next
     40          uint8_t p_moduleApp_u32(uint8_t module_id_u8, uint8_t prev_state_u8, uint8_t next_State_u8,
     41                                  uint8_t irq_id_u8) {
   \                     p_moduleApp_u32: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
     42              uint8_t return_state_u8 = 0;
   \        0x4   0x2000             MOVS     R0,#+0
     43              switch (next_State_u8) {
   \        0x6   0x....             LDR.N    R5,??DataTable0
   \        0x8   0xB132             CBZ.N    R2,??p_moduleApp_u32_0
   \        0xA   0x2A01             CMP      R2,#+1
   \        0xC   0xD013             BEQ.N    ??p_moduleApp_u32_1
   \        0xE   0x2AC8             CMP      R2,#+200
   \       0x10   0xD043             BEQ.N    ??p_moduleApp_u32_2
   \       0x12   0x2AFF             CMP      R2,#+255
   \       0x14   0xD04B             BEQ.N    ??p_moduleApp_u32_3
   \       0x16   0xE049             B.N      ??p_moduleApp_u32_4
     44                  case INIT_APP: {
     45                      uint8_t Usart1index  = getProcessInfoIndex(MODULE_USART1); //return Process index from processInfo array
   \                     ??p_moduleApp_u32_0: (+1)
   \       0x18   0x....'....        BL       getProcessInfoIndex
     46                      usart1Control_AppLocal = (Usart1_Control*)((*(processInfoTable[Usart1index].Sched_DrvData.p_masterSharedMem_u32)).p_ramBuf_u8);    //Get structured memory for USART1
   \       0x1C   0x2116             MOVS     R1,#+22
   \       0x1E   0x....             LDR.N    R2,??DataTable0_1
   \       0x20   0x4348             MULS     R0,R1,R0
   \       0x22   0x1811             ADDS     R1,R2,R0
   \       0x24   0xF8D1 0x000B      LDR      R0,[R1, #+11]
   \       0x28   0x6800             LDR      R0,[R0, #+0]
   \       0x2A   0x6228             STR      R0,[R5, #+32]
     47                      tt_DemandTime = getSysCount() + DemandPollPeriod;                          //store time tick value  
   \       0x2C   0x....'....        BL       getSysCount
   \       0x30   0x....'....        BL       ?Subroutine0
     48                      return_state_u8 = RUN_APP;
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x34   0xE038             B.N      ??p_moduleApp_u32_5
     49                      break;
     50                  }
     51                  case RUN_APP: {
     52                      if (getSysCount() >= tt_DemandTime) {
   \                     ??p_moduleApp_u32_1: (+1)
   \       0x36   0x....'....        BL       getSysCount
   \       0x3A   0xE9D5 0x2302      LDRD     R2,R3,[R5, #+8]
   \       0x3E   0x4299             CMP      R1,R3
   \       0x40   0xD306             BCC.N    ??CrossCallReturnLabel_1
   \       0x42   0xD801             BHI.N    ??p_moduleApp_u32_6
   \       0x44   0x4290             CMP      R0,R2
   \       0x46   0xD303             BCC.N    ??CrossCallReturnLabel_1
     53                          unsigned char speedTx[] = {0x55, 0x01, 0x00, 0xFF, 0x00, (unsigned char)testCounter, (unsigned char)module_id_u8, 0xCC};
     54                          unsigned int speedLen = sizeof(speedTx);
     55                  //        RingBuf_WriteBlock((*usart1Control_AppLocal).seqMemTX_u32, speedTx, &speedLen);             
     56                          tt_DemandTime = getSysCount() + DemandPollPeriod;                          //update next time tick value 
   \                     ??p_moduleApp_u32_6: (+1)
   \       0x48   0x....'....        BL       getSysCount
   \       0x4C   0x....'....        BL       ?Subroutine0
     57                      }      
     58                      
     59                      
     60                      /** this is only for testing the error/log data exchange !!!!!!!!!!!!! please delete these line for production version **/
     61                      tt_DemandtmpDelayTime = getSysCount() + tmpDelayPeriod + errorCounter;                          //update next time tick value 
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x50   0x....'....        BL       getSysCount
   \       0x54   0xE9D5 0x2304      LDRD     R2,R3,[R5, #+16]
   \       0x58   0x1880             ADDS     R0,R0,R2
   \       0x5A   0x4159             ADCS     R1,R1,R3
   \       0x5C   0xF110 0x0664      ADDS     R6,R0,#+100
   \       0x60   0xF141 0x0700      ADC      R7,R1,#+0
   \       0x64   0xE9C5 0x6706      STRD     R6,R7,[R5, #+24]
     62                      if(errorCounter >= 4){ // && (tmpry4Test == true)) {                            //test the error reporting by software interrupt
   \       0x68   0x2B00             CMP      R3,#+0
   \       0x6A   0xD801             BHI.N    ??p_moduleApp_u32_7
   \       0x6C   0x2A04             CMP      R2,#+4
   \       0x6E   0xD31B             BCC.N    ??p_moduleApp_u32_5
     63                        setupSoftwareIRQ(module_id_u8, MODULE_ERR_LOGHANDLE, 0xEF, 0x01, 0x00, NULL);
   \                     ??p_moduleApp_u32_7: (+1)
   \       0x70   0x2000             MOVS     R0,#+0
   \       0x72   0x9001             STR      R0,[SP, #+4]
   \       0x74   0x9000             STR      R0,[SP, #+0]
   \       0x76   0x2301             MOVS     R3,#+1
   \       0x78   0x22EF             MOVS     R2,#+239
   \       0x7A   0x2109             MOVS     R1,#+9
   \       0x7C   0x4620             MOV      R0,R4
   \       0x7E   0x....'....        BL       setupSoftwareIRQ
     64                        tmpry4Test = false;
   \       0x82   0x2000             MOVS     R0,#+0
   \       0x84   0x7028             STRB     R0,[R5, #+0]
     65                        while(getSysCount() < tt_DemandtmpDelayTime){}
   \                     ??p_moduleApp_u32_8: (+1)
   \       0x86   0x....'....        BL       getSysCount
   \       0x8A   0xE9D5 0x2306      LDRD     R2,R3,[R5, #+24]
   \       0x8E   0x4299             CMP      R1,R3
   \       0x90   0xD3F9             BCC.N    ??p_moduleApp_u32_8
   \       0x92   0xD809             BHI.N    ??p_moduleApp_u32_5
   \       0x94   0x4290             CMP      R0,R2
   \       0x96   0xD3F6             BCC.N    ??p_moduleApp_u32_8
     66                        
     67                      }
     68                     /** this is only for testing the error/log data exchange !!!!!!!!!!!!! please delete these line for production version end **/          
     69                      return_state_u8 = RUN_APP;
   \       0x98   0xE006             B.N      ??p_moduleApp_u32_5
     70                      break;
     71                  }
     72                  case IRQ_APP: {
     73                      errorCounter++;
   \                     ??p_moduleApp_u32_2: (+1)
   \       0x9A   0xE9D5 0x0104      LDRD     R0,R1,[R5, #+16]
   \       0x9E   0x1C42             ADDS     R2,R0,#+1
   \       0xA0   0xF161 0x33FF      SBC      R3,R1,#-1
   \       0xA4   0xE9C5 0x2304      STRD     R2,R3,[R5, #+16]
     74                      return_state_u8 = RUN_APP;
   \                     ??p_moduleApp_u32_5: (+1)
   \       0xA8   0x2001             MOVS     R0,#+1
     75                      break;
   \       0xAA   0xBDFE             POP      {R1-R7,PC}
     76                  }
     77                  case STOP_APP: {
     78                      return_state_u8 = INIT_APP;
     79                      break;
     80                  }
     81                  default: {
     82                      return_state_u8 = STOP_APP;
   \                     ??p_moduleApp_u32_4: (+1)
   \       0xAC   0x20FF             MOVS     R0,#+255
     83                      break;
     84                  }
     85              }
     86              return return_state_u8;
   \                     ??p_moduleApp_u32_3: (+1)
   \       0xAE   0xBDFE             POP      {R1-R7,PC}       ;; return
     87          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0xF510 0x60FA      ADDS     R0,R0,#+2000
   \        0x4   0xF141 0x0100      ADC      R1,R1,#+0
   \        0x8   0xE9C5 0x0102      STRD     R0,R1,[R5, #+8]
   \        0xC   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \        0x0   0x....'....        DC32     tmpry4Test

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \        0x0   0x....'....        DC32     processInfoTable
     88          /** pam procedure #10 of Module insertion  :  add the module execution function end **/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   p_moduleApp_u32
        32   -> getProcessInfoIndex
        32   -> getSysCount
        32   -> setupSoftwareIRQ


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
      14  ?Subroutine0
     176  p_moduleApp_u32
       1  testCounter
      36  tmpry4Test
          tt_DemandTime
          errorCounter
          tt_DemandtmpDelayTime
          usart1Control_AppLocal

 
   1 byte  in section .bss
  36 bytes in section .data
 198 bytes in section .text
 
 198 bytes of CODE memory
  37 bytes of DATA memory

Errors: none
Warnings: 2
