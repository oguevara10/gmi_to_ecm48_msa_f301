###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  11:12:56
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\MCSDK_v5.4.4-Full\MotorControl\MCSDK\MCLib\Any\Src\pqd_motor_power_measurement.c
#    Command line      =
#        -f C:\Users\100001~1\AppData\Local\Temp\EW12BC.tmp
#        (C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\MCSDK_v5.4.4-Full\MotorControl\MCSDK\MCLib\Any\Src\pqd_motor_power_measurement.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List\pqd_motor_power_measurement.lst
#    Object file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj\pqd_motor_power_measurement.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\MCSDK_v5.4.4-Full\MotorControl\MCSDK\MCLib\Any\Src\pqd_motor_power_measurement.c
      1          /**
      2            ******************************************************************************
      3            * @file    pqd_motor_power_measurement.c
      4            * @author  Motor Control SDK Team, ST Microelectronics
      5            * @brief   This file provides firmware functions that implement the following features
      6            *          of the PQD Motor Power Measurement component of the Motor Control SDK:
      7            *
      8            *           * Calculate power of the motor
      9            *           * Clear power measurement
     10            *           * Get Power of the motor
     11            *           * Get average Power of the motor
     12            *
     13            ******************************************************************************
     14            * @attention
     15            *
     16            * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
     17            * All rights reserved.</center></h2>
     18            *
     19            * This software component is licensed by ST under Ultimate Liberty license
     20            * SLA0044, the "License"; You may not use this file except in compliance with
     21            * the License. You may obtain a copy of the License at:
     22            *                             www.st.com/SLA0044
     23            *
     24            ******************************************************************************
     25            */
     26          
     27          /* Includes ------------------------------------------------------------------*/
     28          
     29          #include "pqd_motor_power_measurement.h"
     30          
     31          #include "mc_type.h"
     32          
     33          
     34          /** @addtogroup MCSDK
     35            * @{
     36            */
     37          
     38          /** @addtogroup motorpowermeasurement
     39            * @{
     40            */
     41          
     42          /** @defgroup pqd_motorpowermeasurement PQD Motor Power Measurement
     43            * @brief PQD Motor Power Measurement component of the Motor Control SDK
     44            *
     45            * pqd method to measure power of the motor
     46            *
     47            * @todo Document the PQD Motor Power Measurement "module".
     48            *
     49            * @{
     50            */
     51          
     52          /**
     53            * @brief  This method should be called with periodicity. It computes and
     54            *         returns the measured motor power expressed in watt. It is also used
     55            *         to fill, with that measure, the buffer used to compute the average
     56            *         motor power.
     57            * @param power handle.
     58            * @retval int16_t The measured motor power expressed in watt.
     59            */

   \                                 In section .text, align 2
     60          __weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
     61          {
   \                     PQD_CalcElMotorPower: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
     62          
     63            int32_t wAux, wAux2, wAux3;
     64            qd_t Iqd = pHandle->pFOCVars->Iqd;
   \        0x4   0xF504 0x7584      ADD      R5,R4,#+264
   \        0x8   0x6868             LDR      R0,[R5, #+4]
   \        0xA   0xF9B0 0x200E      LDRSH    R2,[R0, #+14]
   \        0xE   0xF9B0 0x100C      LDRSH    R1,[R0, #+12]
     65            qd_t Vqd = pHandle->pFOCVars->Vqd;
   \       0x12   0xF9B0 0x3016      LDRSH    R3,[R0, #+22]
   \       0x16   0xF9B0 0x0018      LDRSH    R0,[R0, #+24]
   \       0x1A   0xFB12 0xF700      SMULBB   R7,R2,R0
     66            wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
     67                   ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
     68            wAux /= 65536;
     69          
     70            wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
   \       0x1E   0x68A8             LDR      R0,[R5, #+8]
   \       0x20   0xFB11 0xF603      SMULBB   R6,R1,R3
   \       0x24   0x....'....        BL       VBS_GetAvBusVoltage_V
     71            wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
     72          
     73            wAux3 = wAux * wAux2;
     74            wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
     75            wAux3 /= 10;
     76            wAux3 /= 65536;
     77          
     78            MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
   \       0x28   0x19BE             ADDS     R6,R7,R6
   \       0x2A   0x682A             LDR      R2,[R5, #+0]
   \       0x2C   0x13F1             ASRS     R1,R6,#+15
   \       0x2E   0xEB06 0x4611      ADD      R6,R6,R1, LSR #+16
   \       0x32   0x4350             MULS     R0,R0,R2
   \       0x34   0xF44F 0x7116      MOV      R1,#+600
   \       0x38   0x1436             ASRS     R6,R6,#+16
   \       0x3A   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \       0x3E   0x434E             MULS     R6,R1,R6
   \       0x40   0x2006             MOVS     R0,#+6
   \       0x42   0x4346             MULS     R6,R0,R6
   \       0x44   0x4620             MOV      R0,R4
   \       0x46   0x230A             MOVS     R3,#+10
   \       0x48   0xFB96 0xF1F3      SDIV     R1,R6,R3
   \       0x4C   0x13CA             ASRS     R2,R1,#+15
   \       0x4E   0xEB01 0x4112      ADD      R1,R1,R2, LSR #+16
   \       0x52   0xE8BD 0x40F4      POP      {R2,R4-R7,LR}
   \       0x56   0x1409             ASRS     R1,R1,#+16
   \       0x58   0x....'....        B.W      MPM_CalcElMotorPower
     79          
     80          }
     81          
     82          /**
     83            * @}
     84            */
     85          
     86          /**
     87            * @}
     88            */
     89          
     90          /** @} */
     91          
     92          /************************ (C) COPYRIGHT 2019 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   PQD_CalcElMotorPower
         0   -> MPM_CalcElMotorPower
        24   -> VBS_GetAvBusVoltage_V


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      92  PQD_CalcElMotorPower

 
 92 bytes in section .text
 
 0 bytes of CODE memory (+ 92 bytes shared)

Errors: none
Warnings: none
