###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  14:03:28
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\MCSDK_v5.4.4-Full\MotorControl\MCSDK\MCLib\Any\Src\digital_output.c
#    Command line      =
#        -f C:\Users\100001~1\AppData\Local\Temp\EW355A.tmp
#        (C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\MCSDK_v5.4.4-Full\MotorControl\MCSDK\MCLib\Any\Src\digital_output.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List\digital_output.lst
#    Object file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj\digital_output.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\MCSDK_v5.4.4-Full\MotorControl\MCSDK\MCLib\Any\Src\digital_output.c
      1          /**
      2            ******************************************************************************
      3            * @file    digital_output.c
      4            * @author  Motor Control SDK Team, ST Microelectronics
      5            * @brief   This file provides firmware functions that implement the Digital
      6            *          Output component of the Motor Control SDK:
      7            *
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
     12            * All rights reserved.</center></h2>
     13            *
     14            * This software component is licensed by ST under Ultimate Liberty license
     15            * SLA0044, the "License"; You may not use this file except in compliance with
     16            * the License. You may obtain a copy of the License at:
     17            *                             www.st.com/SLA0044
     18            *
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "digital_output.h"
     24          #include "mc_type.h"
     25          
     26          /** @addtogroup MCSDK
     27            * @{
     28            */
     29          
     30          /** @defgroup DigitalOutput Digital Output
     31            * @brief digital output component of the Motor Control SDK
     32            *
     33            * @{
     34            */
     35          
     36          
     37          /**
     38          * @brief Accordingly with selected polarity, it sets to active or inactive the
     39          *        digital output
     40          * @param pHandle handler address of the digital output component.
     41          * @param OutputState_t New requested state
     42          * @retval none
     43          */

   \                                 In section .text, align 2
     44          __weak void DOUT_SetOutputState( DOUT_handle_t * pHandle, DOutputState_t State )
     45          {
   \                     DOUT_SetOutputState: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
     46          
     47            if ( State == ACTIVE )
   \        0x2   0x8902             LDRH     R2,[R0, #+8]
   \        0x4   0x6843             LDR      R3,[R0, #+4]
   \        0x6   0x7A84             LDRB     R4,[R0, #+10]
   \        0x8   0x2901             CMP      R1,#+1
   \        0xA   0xD102             BNE.N    ??DOUT_SetOutputState_0
     48            {
     49              if ( pHandle->bDOutputPolarity == DOutputActiveHigh )
   \        0xC   0x2C01             CMP      R4,#+1
   \        0xE   0xD102             BNE.N    ??DOUT_SetOutputState_1
     50              {
     51                LL_GPIO_SetOutputPin( pHandle->hDOutputPort, pHandle->hDOutputPin );
   \       0x10   0xE003             B.N      ??DOUT_SetOutputState_2
     52              }
     53              else
     54              {
     55                LL_GPIO_ResetOutputPin( pHandle->hDOutputPort, pHandle->hDOutputPin );
     56              }
     57            }
     58            else if ( pHandle->bDOutputPolarity == DOutputActiveHigh )
   \                     ??DOUT_SetOutputState_0: (+1)
   \       0x12   0x2C01             CMP      R4,#+1
   \       0x14   0xD101             BNE.N    ??DOUT_SetOutputState_2
     59            {
     60              LL_GPIO_ResetOutputPin( pHandle->hDOutputPort, pHandle->hDOutputPin );
   \                     ??DOUT_SetOutputState_1: (+1)
   \       0x16   0x629A             STR      R2,[R3, #+40]
     61            }
   \       0x18   0xE000             B.N      ??DOUT_SetOutputState_3
     62            else
     63            {
     64              LL_GPIO_SetOutputPin( pHandle->hDOutputPort, pHandle->hDOutputPin );
   \                     ??DOUT_SetOutputState_2: (+1)
   \       0x1A   0x619A             STR      R2,[R3, #+24]
     65            }
     66            pHandle->OutputState = State;
   \                     ??DOUT_SetOutputState_3: (+1)
   \       0x1C   0x7001             STRB     R1,[R0, #+0]
     67          }
   \       0x1E   0xBD10             POP      {R4,PC}          ;; return
     68          
     69          /**
     70          * @brief It returns the state of the digital output
     71          * @param pHandle pointer on related component instance
     72          * @retval OutputState_t Digital output state (ACTIVE or INACTIVE)
     73          */

   \                                 In section .text, align 2
     74          __weak DOutputState_t DOUT_GetOutputState( DOUT_handle_t * pHandle )
     75          {
     76            return ( pHandle->OutputState );
   \                     DOUT_GetOutputState: (+1)
   \        0x0   0x7800             LDRB     R0,[R0, #+0]
   \        0x2   0x4770             BX       LR               ;; return
     77          }
     78          
     79          /**
     80            * @}
     81            */
     82          
     83          /**
     84            * @}
     85            */
     86          
     87          /************************ (C) COPYRIGHT 2019 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DOUT_GetOutputState
       8   DOUT_SetOutputState


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  DOUT_GetOutputState
      32  DOUT_SetOutputState

 
 36 bytes in section .text
 
 0 bytes of CODE memory (+ 36 bytes shared)

Errors: none
Warnings: none
