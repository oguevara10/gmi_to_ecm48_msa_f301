###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  10:13:45
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\MCSDK_v5.4.4-Full\MotorControl\MCSDK\MCLib\Any\Src\bus_voltage_sensor.c
#    Command line      =
#        -f C:\Users\100001~1\AppData\Local\Temp\EWDFB9.tmp
#        (C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\MCSDK_v5.4.4-Full\MotorControl\MCSDK\MCLib\Any\Src\bus_voltage_sensor.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\1.3kW_GMI\List\bus_voltage_sensor.lst
#    Object file       =
#        C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\EWARM\1.3kW_GMI\Obj\bus_voltage_sensor.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\ecm48_motor_drive_us\MCSDK_v5.4.4-Full\MotorControl\MCSDK\MCLib\Any\Src\bus_voltage_sensor.c
      1          /**
      2            ******************************************************************************
      3            * @file    bus_voltage_sensor.c
      4            * @author  Motor Control SDK Team, ST Microelectronics
      5            * @brief   This file provides firmware functions that implement the features
      6            *          of the BusVoltageSensor component of the Motor Control SDK.
      7            *
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
     12            * All rights reserved.</center></h2>
     13            *
     14            * This software component is licensed by ST under Ultimate Liberty license
     15            * SLA0044, the "License"; You may not use this file except in compliance with
     16            * the License. You may obtain a copy of the License at:
     17            *                             www.st.com/SLA0044
     18            *
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          
     24          #include "bus_voltage_sensor.h"
     25          
     26          
     27          /** @addtogroup MCSDK
     28            * @{
     29            */
     30          
     31          /** @defgroup BusVoltageSensor Bus Voltage Sensor
     32            * @brief Bus Voltage Sensor components of the Motor Control SDK
     33            *
     34            * Two Bus Voltage Sensor implementations are provided:
     35            *
     36            * - The @ref RDividerBusVoltageSensor "Resistor Divider Bus Voltage Sensor" operates as the name suggests
     37            * - The @ref VirtualBusVoltageSensor "Virtual Bus Voltage Sensor" does not make measurement but rather
     38            *   returns a fixed, application defined value.
     39            *
     40            * @todo Document the Bus Voltage Sensor "module".
     41            *
     42            * @{
     43            */
     44          
     45          /**
     46            * @brief  It return latest Vbus conversion result expressed in u16Volt
     47            * @param  pHandle related Handle of BusVoltageSensor_Handle_t
     48            * @retval uint16_t Latest Vbus conversion result in digit
     49            */

   \                                 In section .text, align 2
     50          __weak uint16_t VBS_GetBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
     51          {
     52            return ( pHandle->LatestConv );
   \                     VBS_GetBusVoltage_d: (+1)
   \        0x0   0x8880             LDRH     R0,[R0, #+4]
   \        0x2   0x4770             BX       LR               ;; return
     53          }
     54          
     55          #if defined (CCMRAM)
     56          #if defined (__ICCARM__)
     57          #pragma location = ".ccmram"
     58          #elif defined (__CC_ARM) || defined(__GNUC__)
     59          __attribute__( ( section ( ".ccmram" ) ) )
     60          #endif
     61          #endif
     62          /**
     63            * @brief  It return latest averaged Vbus measurement expressed in u16Volt
     64            * @param  pHandle related Handle of BusVoltageSensor_Handle_t
     65            * @retval uint16_t Latest averaged Vbus measurement in digit
     66            */

   \                                 In section .text, align 2
     67          __weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
     68          {
     69            return ( pHandle->AvBusVoltage_d );
   \                     VBS_GetAvBusVoltage_d: (+1)
   \        0x0   0x88C0             LDRH     R0,[R0, #+6]
   \        0x2   0x4770             BX       LR               ;; return
     70          }
     71          
     72          /**
     73            * @brief  It return latest averaged Vbus measurement expressed in Volts
     74            * @param  pHandle related Handle of BusVoltageSensor_Handle_t
     75            * @retval uint16_t Latest averaged Vbus measurement in Volts
     76            */

   \                                 In section .text, align 2
     77          __weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
     78          {
   \                     VBS_GetAvBusVoltage_V: (+1)
   \        0x0   0x4601             MOV      R1,R0
     79            uint32_t temp;
     80          
     81            temp = ( uint32_t )( pHandle->AvBusVoltage_d );
     82            temp *= pHandle->ConversionFactor;
     83            temp /= 65536u;
     84          
     85            return ( ( uint16_t )temp );
   \        0x2   0x88C8             LDRH     R0,[R1, #+6]
   \        0x4   0x8849             LDRH     R1,[R1, #+2]
   \        0x6   0x4348             MULS     R0,R1,R0
   \        0x8   0x0C00             LSRS     R0,R0,#+16
   \        0xA   0x4770             BX       LR               ;; return
     86          }
     87          
     88          /**
     89            * @brief  It returns MC_OVER_VOLT, MC_UNDER_VOLT or MC_NO_ERROR depending on
     90            *         bus voltage and protection threshold values
     91            * @param  pHandle related Handle of BusVoltageSensor_Handle_t
     92            * @retval uint16_t Fault code error
     93            */

   \                                 In section .text, align 2
     94          __weak uint16_t VBS_CheckVbus( BusVoltageSensor_Handle_t * pHandle )
     95          {
     96            return ( pHandle->FaultState );
   \                     VBS_CheckVbus: (+1)
   \        0x0   0x8900             LDRH     R0,[R0, #+8]
   \        0x2   0x4770             BX       LR               ;; return
     97          }
     98          
     99          /**
    100            * @}
    101            */
    102          
    103          /**
    104            * @}
    105            */
    106          
    107          /************************ (C) COPYRIGHT 2019 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   VBS_CheckVbus
       0   VBS_GetAvBusVoltage_V
       0   VBS_GetAvBusVoltage_d
       0   VBS_GetBusVoltage_d


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  VBS_CheckVbus
      12  VBS_GetAvBusVoltage_V
       4  VBS_GetAvBusVoltage_d
       4  VBS_GetBusVoltage_d

 
 24 bytes in section .text
 
 0 bytes of CODE memory (+ 24 bytes shared)

Errors: none
Warnings: none
