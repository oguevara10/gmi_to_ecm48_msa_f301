###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  11:12:54
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\MCSDK_v5.4.4-Full\MotorControl\MCSDK\MCLib\Any\Src\open_loop.c
#    Command line      =
#        -f C:\Users\100001~1\AppData\Local\Temp\EWEA3.tmp
#        (C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\MCSDK_v5.4.4-Full\MotorControl\MCSDK\MCLib\Any\Src\open_loop.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List\open_loop.lst
#    Object file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj\open_loop.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\MCSDK_v5.4.4-Full\MotorControl\MCSDK\MCLib\Any\Src\open_loop.c
      1          /**
      2            ******************************************************************************
      3            * @file    open_loop.c
      4            * @author  Motor Control SDK Team, ST Microelectronics
      5            * @brief   This file provides firmware functions that implement the features
      6            *          of the Open Loop component.
      7            *
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
     12            * All rights reserved.</center></h2>
     13            *
     14            * This software component is licensed by ST under Ultimate Liberty license
     15            * SLA0044, the "License"; You may not use this file except in compliance with
     16            * the License. You may obtain a copy of the License at:
     17            *                             www.st.com/SLA0044
     18            *
     19            ******************************************************************************
     20            */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "open_loop.h"
     24          
     25          /** @addtogroup MCSDK
     26            * @{
     27            */
     28          
     29          /** @defgroup OpenLoop Open Loop Control
     30            * @brief Open Loop component of the Motor Control SDK
     31            *
     32            * Used to run the motor in open loop mode.
     33            *
     34            * @todo Document the Bus Open Loop "module".
     35            *
     36            * @{
     37            */
     38          
     39          /* Private defines -----------------------------------------------------------*/
     40          
     41          /**
     42            * @brief  Initialize OpenLoop variables.
     43            * @param  pHandle: Pointer on Handle structure of OpenLoop feature.
     44            * @param  pVSS: Pointer on virtual speed sensor structure.
     45            *  @retval none
     46            */

   \                                 In section .text, align 2
     47          __weak void OL_Init( OpenLoop_Handle_t * pHandle, VirtualSpeedSensor_Handle_t * pVSS )
     48          {
     49            pHandle->hVoltage = pHandle->hDefaultVoltage;
   \                     OL_Init: (+1)
   \        0x0   0x8802             LDRH     R2,[R0, #+0]
   \        0x2   0x8102             STRH     R2,[R0, #+8]
     50            pHandle->pVSS = pVSS;
   \        0x4   0x60C1             STR      R1,[R0, #+12]
     51          }
   \        0x6   0x4770             BX       LR               ;; return
     52          
     53          /**
     54            * @brief  Set Vqd according to open loop phase voltage.
     55            * @param  pHandle: Pointer on Handle structure of OpenLoop feature.
     56            *  @retval qd_t Vqd conditioned values.
     57            */

   \                                 In section .text, align 2
     58          __weak qd_t OL_VqdConditioning( OpenLoop_Handle_t * pHandle )
     59          {
   \                     OL_VqdConditioning: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
     60            qd_t Vqd;
     61          
     62            Vqd.q = pHandle->hVoltage;
   \        0x2   0xF9B0 0x1008      LDRSH    R1,[R0, #+8]
   \        0x6   0xF8AD 0x1000      STRH     R1,[SP, #+0]
     63            Vqd.d = 0;
   \        0xA   0x2200             MOVS     R2,#+0
   \        0xC   0xF8AD 0x2002      STRH     R2,[SP, #+2]
     64          
     65            return ( Vqd );
   \       0x10   0x9800             LDR      R0,[SP, #+0]
   \       0x12   0xB001             ADD      SP,SP,#+4
   \       0x14   0x4770             BX       LR               ;; return
     66          }
     67          
     68          /**
     69            * @brief  Allow to set new open loop phase voltage.
     70            * @param  pHandle: Pointer on Handle structure of OpenLoop feature.
     71            * @param  hNewVoltage: New voltage value to apply.
     72            * @retval None
     73            */

   \                                 In section .text, align 2
     74          __weak void OL_UpdateVoltage( OpenLoop_Handle_t * pHandle, int16_t hNewVoltage )
     75          {
     76            pHandle->hVoltage = hNewVoltage;
   \                     OL_UpdateVoltage: (+1)
   \        0x0   0x8101             STRH     R1,[R0, #+8]
     77          }
   \        0x2   0x4770             BX       LR               ;; return
     78          
     79          /**
     80            * @brief  Compute phase voltage to apply according to average mechanical speed (V/F Mode).
     81            * @param  pHandle: Pointer on Handle structure of OpenLoop feature.
     82            * @retval None
     83            */

   \                                 In section .text, align 2
     84          __weak void OL_Calc( OpenLoop_Handle_t * pHandle )
     85          {
     86            if ( pHandle->VFMode == true )
   \                     OL_Calc: (+1)
   \        0x0   0x7881             LDRB     R1,[R0, #+2]
   \        0x2   0x2901             CMP      R1,#+1
   \        0x4   0xD10D             BNE.N    ??OL_Calc_0
     87            {
     88              /* V/F mode true means enabled */
     89              if (pHandle->pVSS->_Super.hAvrMecSpeedUnit >= 0)
   \        0x6   0x68C1             LDR      R1,[R0, #+12]
   \        0x8   0xF9B0 0x2006      LDRSH    R2,[R0, #+6]
   \        0xC   0xF9B1 0x100C      LDRSH    R1,[R1, #+12]
   \       0x10   0xF9B0 0x3004      LDRSH    R3,[R0, #+4]
   \       0x14   0xFB12 0xF201      SMULBB   R2,R2,R1
   \       0x18   0x2900             CMP      R1,#+0
   \       0x1A   0xBF54             ITE      PL
   \       0x1C   0x18D2             ADDPL    R2,R2,R3
   \       0x1E   0x1A9A             SUBMI    R2,R3,R2
     90              {
     91                pHandle->hVoltage = pHandle->hVFOffset + ( pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit );
     92              }
     93              else
     94              {
     95                pHandle->hVoltage = pHandle->hVFOffset - ( pHandle->hVFSlope * pHandle->pVSS->_Super.hAvrMecSpeedUnit );
   \       0x20   0x8102             STRH     R2,[R0, #+8]
     96              }
     97            }
     98          }
   \                     ??OL_Calc_0: (+1)
   \       0x22   0x4770             BX       LR               ;; return
     99          
    100          /**
    101            * @brief  Allow activation of the Voltage versus Frequency mode (V/F mode).
    102            * @param  pHandle: Pointer on Handle structure of OpenLoop feature.
    103            * @param  VFEnabling: Flag to enable the V/F mode.
    104            * @retval None
    105            */

   \                                 In section .text, align 2
    106          __weak void OL_VF( OpenLoop_Handle_t * pHandle, bool VFEnabling )
    107          {
    108            pHandle->VFMode = VFEnabling;
   \                     OL_VF: (+1)
   \        0x0   0x7081             STRB     R1,[R0, #+2]
    109          }
   \        0x2   0x4770             BX       LR               ;; return
    110          
    111          /**
    112            * @}
    113            */
    114          
    115          /**
    116            * @}
    117            */
    118          
    119          /************************ (C) COPYRIGHT 2019 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OL_Calc
       0   OL_Init
       0   OL_UpdateVoltage
       0   OL_VF
       4   OL_VqdConditioning


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      36  OL_Calc
       8  OL_Init
       4  OL_UpdateVoltage
       4  OL_VF
      22  OL_VqdConditioning

 
 74 bytes in section .text
 
 0 bytes of CODE memory (+ 74 bytes shared)

Errors: none
Warnings: none
