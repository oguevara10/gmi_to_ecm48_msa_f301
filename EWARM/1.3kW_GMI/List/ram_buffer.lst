###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  11:12:57
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                        
#    Endian                       =  little
#    Source file                  =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\FlexMouse\Memory\ram_buffer.c
#    Command line                 =
#        -f C:\Users\100001~1\AppData\Local\Temp\EW1A43.tmp
#        (C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\FlexMouse\Memory\ram_buffer.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale                       =  C
#    List file                    =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List\ram_buffer.lst
#    Object file                  =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj\ram_buffer.o
#    Runtime model:                  
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\FlexMouse\Memory\ram_buffer.c
      1          /**
      2            ********************************************************************************************************************************
      3            * @file    ram_buffer.c 
      4            * @author  Pamela Lee
      5            * @brief   This file implements the interface for the RAM buffer data structure.
      6            * @details This file contains definitions for constants, macros, global variables, and function prototypes required to
      7            *          implement a single RAM buffer (consequitive RAM area allocation) data structure.
      8            ********************************************************************************************************************************
      9            */
     10          
     11          /* Includes --------------------------------------------------------------------------------------------------------------------*/
     12          #include "ram_buffer.h"

   \                                 In section .bss, align 1
   \   static __absolute uint8_t Ram_mallocError
   \                     Ram_mallocError:
   \        0x0                      DS8 1
     13          
     14          #include <stdlib.h>
     15          #include <string.h>
     16          
     17          /* Content ---------------------------------------------------------------------------------------------------------------------*/
     18          
     19          /* Private Function Prototypes -------------------------------------------------------------------------------------------------*/
     20          static uint8_t *RamBuf_SetPointerToRamBuf(Ram_Buf_Handle this_ram_buf_u32, uint8_t *p_RamBuf_u8);
     21          static uint8_t RamBuf_GetTotalNumOfElements(Ram_Buf_Handle this_ram_buf_u32);
     22          static uint8_t RamBuf_SetTotalNumOfElements(Ram_Buf_Handle this_ram_buf_u32, uint32_t totalNumOfElements_u32);
     23          static uint8_t RamBuf_SetAccessMode(Ram_Buf_Handle this_ram_buf_u32, uint8_t access_mode_u8);
     24          static uint8_t *RamBuf_SetUserList(Ram_Buf_Handle this_ram_buf_u32, uint8_t *p_user_list_u8);
     25          static uint8_t RamBuf_SetUserListSize(Ram_Buf_Handle this_ram_buf_u32, uint8_t user_list_size_u8);
     26          
     27          /* Public Functions ------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     28          void RamBuf_Initialize(Ram_Buf_Handle this_ram_buf_u32, uint8_t owner_u8, uint8_t ram_buf_size_u8,
     29                                    uint8_t access_mode_u8, uint8_t *p_user_list_u8, uint8_t user_list_size_u8) {
   \                     RamBuf_Initialize: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x4617             MOV      R7,R2
   \        0x6   0x460D             MOV      R5,R1
   \        0x8   0x461E             MOV      R6,R3
     30              uint8_t* tmpryBuf;                                                                  //check any Heap memory alocation error                 //house keeping code
     31              if( (tmpryBuf = malloc(ram_buf_size_u8)) == NULL) Ram_mallocError++;                //check any Heap memory alocation error                 //house keeping code
   \        0xA   0x4638             MOV      R0,R7
   \        0xC   0x....'....        BL       malloc
   \       0x10   0xB918             CBNZ.N   R0,??RamBuf_Initialize_0
   \       0x12   0x....             LDR.N    R1,??DataTable0
   \       0x14   0x780A             LDRB     R2,[R1, #+0]
   \       0x16   0x1C52             ADDS     R2,R2,#+1
   \       0x18   0x700A             STRB     R2,[R1, #+0]
   \                     ??RamBuf_Initialize_0: (+1)
   \       0x1A   0x9907             LDR      R1,[SP, #+28]
   \       0x1C   0x9A06             LDR      R2,[SP, #+24]
     32              RamBuf_SetPointerToRamBuf(this_ram_buf_u32, tmpryBuf);
   \       0x1E   0x6020             STR      R0,[R4, #+0]
     33              RamBuf_SetOwner(this_ram_buf_u32, owner_u8);
     34              RamBuf_SetAccessMode(this_ram_buf_u32, access_mode_u8);
     35              RamBuf_SetUserList(this_ram_buf_u32, p_user_list_u8);
     36              RamBuf_SetUserListSize(this_ram_buf_u32, user_list_size_u8);
   \       0x20   0x7421             STRB     R1,[R4, #+16]
   \       0x22   0x60E2             STR      R2,[R4, #+12]
   \       0x24   0x7225             STRB     R5,[R4, #+8]
   \       0x26   0x7266             STRB     R6,[R4, #+9]
     37              RamBuf_SetTotalNumOfElements(this_ram_buf_u32, ram_buf_size_u8);
   \       0x28   0x4639             MOV      R1,R7
   \       0x2A   0x4620             MOV      R0,R4
   \       0x2C   0x....'....        BL       RamBuf_SetTotalNumOfElements
     38              RamBuf_SetProcessInstanceIndex(this_ram_buf_u32, 255);
   \       0x30   0x20FF             MOVS     R0,#+255
   \       0x32   0x7460             STRB     R0,[R4, #+17]
     39          }
   \       0x34   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     40          

   \                                 In section .text, align 2, keep-with-next
     41          void RamBuf_Release(Ram_Buf_Handle this_ram_buf_u32) {
   \                     RamBuf_Release: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
     42              RamBuf_SetOwner(this_ram_buf_u32, 255);
     43              RamBuf_SetAccessMode(this_ram_buf_u32, 1);
   \        0x4   0x2001             MOVS     R0,#+1
   \        0x6   0x7260             STRB     R0,[R4, #+9]
     44              RamBuf_SetUserList(this_ram_buf_u32, NULL);
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x25FF             MOVS     R5,#+255
   \        0xC   0x60E1             STR      R1,[R4, #+12]
     45              RamBuf_SetUserListSize(this_ram_buf_u32, 0);
   \        0xE   0x7421             STRB     R1,[R4, #+16]
   \       0x10   0x7225             STRB     R5,[R4, #+8]
     46              RamBuf_SetTotalNumOfElements(this_ram_buf_u32, 0);
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0x....'....        BL       RamBuf_SetTotalNumOfElements
     47              RamBuf_SetProcessInstanceIndex(this_ram_buf_u32, 255);
   \       0x18   0x7465             STRB     R5,[R4, #+17]
     48          }
   \       0x1A   0xBD31             POP      {R0,R4,R5,PC}    ;; return
     49          

   \                                 In section .text, align 2, keep-with-next
     50          uint8_t RamBuf_GetOwner(Ram_Buf_Handle this_ram_buf_u32) {
     51              return (*this_ram_buf_u32).owner_u8;
   \                     RamBuf_GetOwner: (+1)
   \        0x0   0x7A00             LDRB     R0,[R0, #+8]
   \        0x2   0x4770             BX       LR               ;; return
     52          }
     53          

   \                                 In section .text, align 2, keep-with-next
     54          uint8_t RamBuf_SetOwner(Ram_Buf_Handle this_ram_buf_u32, uint8_t owner_u8) {
     55              (*this_ram_buf_u32).owner_u8 = owner_u8;
   \                     RamBuf_SetOwner: (+1)
   \        0x0   0x7201             STRB     R1,[R0, #+8]
     56              return RamBuf_GetOwner(this_ram_buf_u32) == owner_u8;
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x4770             BX       LR               ;; return
     57          }
     58          

   \                                 In section .text, align 2, keep-with-next
     59          uint8_t RamBuf_GetProcessInstanceIndex(Ram_Buf_Handle this_ram_buf_u32) {
     60              return (*this_ram_buf_u32).processInstanceIndex_u8;
   \                     RamBuf_GetProcessInstanceIndex: (+1)
   \        0x0   0x7C40             LDRB     R0,[R0, #+17]
   \        0x2   0x4770             BX       LR               ;; return
     61          }
     62          

   \                                 In section .text, align 2, keep-with-next
     63          uint8_t RamBuf_SetProcessInstanceIndex(Ram_Buf_Handle this_ram_buf_u32, uint8_t processInstanceIndex_u8) {
     64              return (*this_ram_buf_u32).processInstanceIndex_u8 = processInstanceIndex_u8;
   \                     RamBuf_SetProcessInstanceIndex: (+1)
   \        0x0   0x7441             STRB     R1,[R0, #+17]
   \        0x2   0x4608             MOV      R0,R1
   \        0x4   0x4770             BX       LR               ;; return
     65          }
     66          
     67          /* Private Functions -----------------------------------------------------------------------------------------------------------*/
     68          
     69          /**
     70            ********************************************************************************************************************************
     71            * @brief   Returns 
     72            * @details 
     73            * @param   this_ram_buf_u32   The RAM buffer handle referencing the RAM buffer that the function must operate on.
     74            * @return  Returns 
     75            ********************************************************************************************************************************
     76            */
     77          static uint8_t *RamBuf_SetPointerToRamBuf(Ram_Buf_Handle this_ram_buf_u32, uint8_t *p_ramBuf_u8) {
     78              return (*this_ram_buf_u32).p_ramBuf_u8 = p_ramBuf_u8;
     79          }
     80          
     81          /**
     82            ********************************************************************************************************************************
     83            * @brief   Returns 
     84            * @details 
     85            * @param   this_ram_buf_u32   The RAM buffer handle referencing the RAM buffer that the function must operate on.
     86            * @return  Returns 
     87            ********************************************************************************************************************************
     88            */
     89          static uint8_t RamBuf_GetTotalNumOfElements(Ram_Buf_Handle this_ram_buf_u32) {
     90              return (*this_ram_buf_u32).totalNumOfElements_u32;
     91          }
     92          
     93          /**
     94            ********************************************************************************************************************************
     95            * @brief   Returns 
     96            * @details 
     97            * @param   this_ram_buf_u32   The RAM buffer handle referencing the RAM buffer that the function must operate on.
     98            * @return  Returns 
     99            ********************************************************************************************************************************
    100            */

   \                                 In section .text, align 2, keep-with-next
    101          static uint8_t RamBuf_SetTotalNumOfElements(Ram_Buf_Handle this_ram_buf_u32, uint32_t totalNumOfElements_u32) {
   \                     RamBuf_SetTotalNumOfElements: (+1)
   \        0x0   0x4602             MOV      R2,R0
    102              (*this_ram_buf_u32).totalNumOfElements_u32 = totalNumOfElements_u32;
    103              return RamBuf_GetTotalNumOfElements(this_ram_buf_u32) == totalNumOfElements_u32;
   \        0x2   0xB2C8             UXTB     R0,R1
   \        0x4   0x4288             CMP      R0,R1
   \        0x6   0xBF0C             ITE      EQ
   \        0x8   0x2001             MOVEQ    R0,#+1
   \        0xA   0x2000             MOVNE    R0,#+0
   \        0xC   0x6051             STR      R1,[R2, #+4]
   \        0xE   0x4770             BX       LR               ;; return
    104          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \        0x0   0x....'....        DC32     Ram_mallocError
    105          
    106          /**
    107            ********************************************************************************************************************************
    108            * @brief   Returns 
    109            * @details 
    110            * @param   this_ram_buf_u32   The RAM buffer handle referencing the RAM buffer that the function must operate on.
    111            * @return  Returns 
    112            ********************************************************************************************************************************
    113            */
    114          static uint8_t RamBuf_SetAccessMode(Ram_Buf_Handle this_ram_buf_u32, uint8_t access_mode_u8) {
    115              return (*this_ram_buf_u32).accessMode_u8 = access_mode_u8;
    116          }
    117          
    118          /**
    119            ********************************************************************************************************************************
    120            * @brief   Returns 
    121            * @details 
    122            * @param   this_ram_buf_u32   The RAM buffer handle referencing the RAM buffer that the function must operate on.
    123            * @return  Returns 
    124            ********************************************************************************************************************************
    125            */
    126          static uint8_t *RamBuf_SetUserList(Ram_Buf_Handle this_ram_buf_u32, uint8_t *p_user_list_u8) {
    127              return (*this_ram_buf_u32).p_userList_u8 = p_user_list_u8;
    128          }
    129          
    130          /**
    131            ********************************************************************************************************************************
    132            * @brief   Returns 
    133            * @details 
    134            * @param   this_ram_buf_u32   The RAM buffer handle referencing the RAM buffer that the function must operate on.
    135            * @return  Returns 
    136            ********************************************************************************************************************************
    137            */
    138          static uint8_t RamBuf_SetUserListSize(Ram_Buf_Handle this_ram_buf_u32, uint8_t user_list_size_u8) {
    139              return (*this_ram_buf_u32).userListSize_u8 = user_list_size_u8;
    140          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   RamBuf_GetOwner
       0   RamBuf_GetProcessInstanceIndex
      24   RamBuf_Initialize
        24   -> RamBuf_SetTotalNumOfElements
        24   -> malloc
      16   RamBuf_Release
        16   -> RamBuf_SetTotalNumOfElements
       0   RamBuf_SetOwner
       0   RamBuf_SetProcessInstanceIndex
       0   RamBuf_SetTotalNumOfElements


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  RamBuf_GetOwner
       4  RamBuf_GetProcessInstanceIndex
      54  RamBuf_Initialize
      28  RamBuf_Release
       6  RamBuf_SetOwner
       6  RamBuf_SetProcessInstanceIndex
      16  RamBuf_SetTotalNumOfElements
       1  Ram_mallocError

 
   1 byte  in section .bss
 122 bytes in section .text
 
 122 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
