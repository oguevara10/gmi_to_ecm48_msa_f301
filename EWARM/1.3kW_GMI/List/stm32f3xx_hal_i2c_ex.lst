###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  11:13:06
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_hal_i2c_ex.c
#    Command line      =
#        -f C:\Users\100001~1\AppData\Local\Temp\EW3D02.tmp
#        (C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_hal_i2c_ex.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List\stm32f3xx_hal_i2c_ex.lst
#    Object file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj\stm32f3xx_hal_i2c_ex.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_hal_i2c_ex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f3xx_hal_i2c_ex.c
      4            * @author  MCD Application Team
      5            * @brief   I2C Extended HAL module driver.
      6            *          This file provides firmware functions to manage the following
      7            *          functionalities of I2C Extended peripheral:
      8            *           + Extended features functions
      9            *
     10            @verbatim
     11            ==============================================================================
     12                         ##### I2C peripheral Extended features  #####
     13            ==============================================================================
     14          
     15            [..] Comparing to other previous devices, the I2C interface for STM32F3xx
     16                 devices contains the following additional features
     17          
     18                 (+) Possibility to disable or enable Analog Noise Filter
     19                 (+) Use of a configured Digital Noise Filter
     20                 (+) Disable or enable wakeup from Stop mode(s)
     21                 (+) Disable or enable Fast Mode Plus
     22          
     23                               ##### How to use this driver #####
     24            ==============================================================================
     25            [..] This driver provides functions to configure Noise Filter and Wake Up Feature
     26              (#) Configure I2C Analog noise filter using the function HAL_I2CEx_ConfigAnalogFilter()
     27              (#) Configure I2C Digital noise filter using the function HAL_I2CEx_ConfigDigitalFilter()
     28              (#) Configure the enable or disable of I2C Wake Up Mode using the functions :
     29                    (++) HAL_I2CEx_EnableWakeUp()
     30                    (++) HAL_I2CEx_DisableWakeUp()
     31              (#) Configure the enable or disable of fast mode plus driving capability using the functions :
     32                    (++) HAL_I2CEx_EnableFastModePlus()
     33                    (++) HAL_I2CEx_DisableFastModePlus()
     34            @endverbatim
     35            ******************************************************************************
     36            * @attention
     37            *
     38            * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
     39            * All rights reserved.</center></h2>
     40            *
     41            * This software component is licensed by ST under BSD 3-Clause license,
     42            * the "License"; You may not use this file except in compliance with the
     43            * License. You may obtain a copy of the License at:
     44            *                        opensource.org/licenses/BSD-3-Clause
     45            *
     46            ******************************************************************************
     47            */
     48          
     49          /* Includes ------------------------------------------------------------------*/
     50          #include "stm32f3xx_hal.h"
     51          
     52          /** @addtogroup STM32F3xx_HAL_Driver
     53            * @{
     54            */
     55          
     56          /** @defgroup I2CEx I2CEx
     57            * @brief I2C Extended HAL module driver
     58            * @{
     59            */
     60          
     61          #ifdef HAL_I2C_MODULE_ENABLED
     62          
     63          /* Private typedef -----------------------------------------------------------*/
     64          /* Private define ------------------------------------------------------------*/
     65          /* Private macro -------------------------------------------------------------*/
     66          /* Private variables ---------------------------------------------------------*/
     67          /* Private function prototypes -----------------------------------------------*/
     68          /* Private functions ---------------------------------------------------------*/
     69          
     70          /** @defgroup I2CEx_Exported_Functions I2C Extended Exported Functions
     71            * @{
     72            */
     73          
     74          /** @defgroup I2CEx_Exported_Functions_Group1 Extended features functions
     75            * @brief    Extended features functions
     76           *
     77          @verbatim
     78           ===============================================================================
     79                                ##### Extended features functions #####
     80           ===============================================================================
     81              [..] This section provides functions allowing to:
     82                (+) Configure Noise Filters
     83                (+) Configure Wake Up Feature
     84                (+) Configure Fast Mode Plus
     85          
     86          @endverbatim
     87            * @{
     88            */
     89          
     90          /**
     91            * @brief  Configure I2C Analog noise filter.
     92            * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
     93            *                the configuration information for the specified I2Cx peripheral.
     94            * @param  AnalogFilter New state of the Analog filter.
     95            * @retval HAL status
     96            */

   \                                 In section .text, align 2, keep-with-next
     97          HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
     98          {
   \                     HAL_I2CEx_ConfigAnalogFilter: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
     99            /* Check the parameters */
    100            assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
    101            assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
    102          
    103            if (hi2c->State == HAL_I2C_STATE_READY)
   \        0x2   0xF100 0x0240      ADD      R2,R0,#+64
   \        0x6   0x7853             LDRB     R3,[R2, #+1]
   \        0x8   0x2B20             CMP      R3,#+32
   \        0xA   0xD10C             BNE.N    ??HAL_I2CEx_ConfigAnalogFilter_0
    104            {
    105              /* Process Locked */
    106              __HAL_LOCK(hi2c);
   \        0xC   0x7814             LDRB     R4,[R2, #+0]
   \        0xE   0x2C01             CMP      R4,#+1
   \       0x10   0xD009             BEQ.N    ??HAL_I2CEx_ConfigAnalogFilter_0
   \       0x12   0x....'....        BL       ?Subroutine3
    107          
    108              hi2c->State = HAL_I2C_STATE_BUSY;
    109          
    110              /* Disable the selected I2C peripheral */
    111              __HAL_I2C_DISABLE(hi2c);
    112          
    113              /* Reset I2Cx ANOFF bit */
    114              hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x16   0xF424 0x5480      BIC      R4,R4,#0x1000
   \       0x1A   0x601C             STR      R4,[R3, #+0]
    115          
    116              /* Set analog filter bit*/
    117              hi2c->Instance->CR1 |= AnalogFilter;
   \       0x1C   0x6803             LDR      R3,[R0, #+0]
   \       0x1E   0x681D             LDR      R5,[R3, #+0]
   \       0x20   0x4329             ORRS     R1,R1,R5
   \       0x22   0x6019             STR      R1,[R3, #+0]
    118          
    119              __HAL_I2C_ENABLE(hi2c);
   \       0x24   0x....             B.N      ?Subroutine0
    120          
    121              hi2c->State = HAL_I2C_STATE_READY;
    122          
    123              /* Process Unlocked */
    124              __HAL_UNLOCK(hi2c);
    125          
    126              return HAL_OK;
    127            }
    128            else
    129            {
    130              return HAL_BUSY;
   \                     ??HAL_I2CEx_ConfigAnalogFilter_0: (+1)
   \       0x26   0x2002             MOVS     R0,#+2
   \       0x28   0xBD30             POP      {R4,R5,PC}       ;; return
    131            }
    132          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x2301             MOVS     R3,#+1
   \        0x2   0x7013             STRB     R3,[R2, #+0]
   \        0x4   0x2424             MOVS     R4,#+36
   \        0x6   0x7054             STRB     R4,[R2, #+1]
   \        0x8   0x6803             LDR      R3,[R0, #+0]
   \        0xA   0x681D             LDR      R5,[R3, #+0]
   \        0xC   0x086D             LSRS     R5,R5,#+1
   \        0xE   0x006D             LSLS     R5,R5,#+1
   \       0x10   0x601D             STR      R5,[R3, #+0]
   \       0x12   0x6803             LDR      R3,[R0, #+0]
   \       0x14   0x681C             LDR      R4,[R3, #+0]
   \       0x16   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0xF041 0x0101      ORR      R1,R1,#0x1
   \        0x8   0x6001             STR      R1,[R0, #+0]
   \        0xA   0x2020             MOVS     R0,#+32
   \        0xC   0x7050             STRB     R0,[R2, #+1]
   \        0xE   0x2100             MOVS     R1,#+0
   \       0x10   0x7011             STRB     R1,[R2, #+0]
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xBD30             POP      {R4,R5,PC}
    133          
    134          /**
    135            * @brief  Configure I2C Digital noise filter.
    136            * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
    137            *                the configuration information for the specified I2Cx peripheral.
    138            * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
    139            * @retval HAL status
    140            */

   \                                 In section .text, align 2, keep-with-next
    141          HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
    142          {
   \                     HAL_I2CEx_ConfigDigitalFilter: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
    143            uint32_t tmpreg;
    144          
    145            /* Check the parameters */
    146            assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
    147            assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
    148          
    149            if (hi2c->State == HAL_I2C_STATE_READY)
   \        0x2   0xF100 0x0240      ADD      R2,R0,#+64
   \        0x6   0x7853             LDRB     R3,[R2, #+1]
   \        0x8   0x2B20             CMP      R3,#+32
   \        0xA   0xD10A             BNE.N    ??HAL_I2CEx_ConfigDigitalFilter_0
    150            {
    151              /* Process Locked */
    152              __HAL_LOCK(hi2c);
   \        0xC   0x7814             LDRB     R4,[R2, #+0]
   \        0xE   0x2C01             CMP      R4,#+1
   \       0x10   0xD007             BEQ.N    ??HAL_I2CEx_ConfigDigitalFilter_0
   \       0x12   0x....'....        BL       ?Subroutine3
    153          
    154              hi2c->State = HAL_I2C_STATE_BUSY;
    155          
    156              /* Disable the selected I2C peripheral */
    157              __HAL_I2C_DISABLE(hi2c);
    158          
    159              /* Get the old register value */
    160              tmpreg = hi2c->Instance->CR1;
    161          
    162              /* Reset I2Cx DNF bits [11:8] */
    163              tmpreg &= ~(I2C_CR1_DNF);
    164          
    165              /* Set I2Cx DNF coefficient */
    166              tmpreg |= DigitalFilter << 8U;
    167          
    168              /* Store the new register value */
    169              hi2c->Instance->CR1 = tmpreg;
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x16   0xF424 0x6470      BIC      R4,R4,#0xF00
   \       0x1A   0xEA44 0x2401      ORR      R4,R4,R1, LSL #+8
   \       0x1E   0x601C             STR      R4,[R3, #+0]
    170          
    171              __HAL_I2C_ENABLE(hi2c);
   \       0x20   0x....             B.N      ?Subroutine0
    172          
    173              hi2c->State = HAL_I2C_STATE_READY;
    174          
    175              /* Process Unlocked */
    176              __HAL_UNLOCK(hi2c);
    177          
    178              return HAL_OK;
    179            }
    180            else
    181            {
    182              return HAL_BUSY;
   \                     ??HAL_I2CEx_ConfigDigitalFilter_0: (+1)
   \       0x22   0x2002             MOVS     R0,#+2
   \       0x24   0xBD30             POP      {R4,R5,PC}       ;; return
    183            }
    184          }
    185          
    186          /**
    187            * @brief  Enable I2C wakeup from Stop mode(s).
    188            * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
    189            *                the configuration information for the specified I2Cx peripheral.
    190            * @retval HAL status
    191            */

   \                                 In section .text, align 2, keep-with-next
    192          HAL_StatusTypeDef HAL_I2CEx_EnableWakeUp(I2C_HandleTypeDef *hi2c)
    193          {
   \                     HAL_I2CEx_EnableWakeUp: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    194            /* Check the parameters */
    195            assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));
    196          
    197            if (hi2c->State == HAL_I2C_STATE_READY)
   \        0x2   0xF100 0x0140      ADD      R1,R0,#+64
   \        0x6   0x784A             LDRB     R2,[R1, #+1]
   \        0x8   0x2A20             CMP      R2,#+32
   \        0xA   0xD107             BNE.N    ??HAL_I2CEx_EnableWakeUp_0
    198            {
    199              /* Process Locked */
    200              __HAL_LOCK(hi2c);
   \        0xC   0x780B             LDRB     R3,[R1, #+0]
   \        0xE   0x2B01             CMP      R3,#+1
   \       0x10   0xD004             BEQ.N    ??HAL_I2CEx_EnableWakeUp_0
   \       0x12   0x....'....        BL       ?Subroutine4
    201          
    202              hi2c->State = HAL_I2C_STATE_BUSY;
    203          
    204              /* Disable the selected I2C peripheral */
    205              __HAL_I2C_DISABLE(hi2c);
    206          
    207              /* Enable wakeup from stop mode */
    208              hi2c->Instance->CR1 |= I2C_CR1_WUPEN;
    209          
    210              __HAL_I2C_ENABLE(hi2c);
    211          
    212              hi2c->State = HAL_I2C_STATE_READY;
    213          
    214              /* Process Unlocked */
    215              __HAL_UNLOCK(hi2c);
    216          
    217              return HAL_OK;
    218            }
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x16   0xF443 0x2380      ORR      R3,R3,#0x40000
   \       0x1A   0x....             B.N      ?Subroutine1
    219            else
    220            {
    221              return HAL_BUSY;
   \                     ??HAL_I2CEx_EnableWakeUp_0: (+1)
   \       0x1C   0x2002             MOVS     R0,#+2
   \       0x1E   0xBD10             POP      {R4,PC}          ;; return
    222            }
    223          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \        0x0   0x2201             MOVS     R2,#+1
   \        0x2   0x700A             STRB     R2,[R1, #+0]
   \        0x4   0x2324             MOVS     R3,#+36
   \        0x6   0x704B             STRB     R3,[R1, #+1]
   \        0x8   0x6802             LDR      R2,[R0, #+0]
   \        0xA   0x6814             LDR      R4,[R2, #+0]
   \        0xC   0x0864             LSRS     R4,R4,#+1
   \        0xE   0x0064             LSLS     R4,R4,#+1
   \       0x10   0x6014             STR      R4,[R2, #+0]
   \       0x12   0x6802             LDR      R2,[R0, #+0]
   \       0x14   0x6813             LDR      R3,[R2, #+0]
   \       0x16   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x6013             STR      R3,[R2, #+0]
   \        0x2   0x6800             LDR      R0,[R0, #+0]
   \        0x4   0x6802             LDR      R2,[R0, #+0]
   \        0x6   0xF042 0x0201      ORR      R2,R2,#0x1
   \        0xA   0x6002             STR      R2,[R0, #+0]
   \        0xC   0x2020             MOVS     R0,#+32
   \        0xE   0x7048             STRB     R0,[R1, #+1]
   \       0x10   0x2200             MOVS     R2,#+0
   \       0x12   0x700A             STRB     R2,[R1, #+0]
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xBD10             POP      {R4,PC}
    224          
    225          /**
    226            * @brief  Disable I2C wakeup from Stop mode(s).
    227            * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
    228            *                the configuration information for the specified I2Cx peripheral.
    229            * @retval HAL status
    230            */

   \                                 In section .text, align 2, keep-with-next
    231          HAL_StatusTypeDef HAL_I2CEx_DisableWakeUp(I2C_HandleTypeDef *hi2c)
    232          {
   \                     HAL_I2CEx_DisableWakeUp: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    233            /* Check the parameters */
    234            assert_param(IS_I2C_WAKEUP_FROMSTOP_INSTANCE(hi2c->Instance));
    235          
    236            if (hi2c->State == HAL_I2C_STATE_READY)
   \        0x2   0xF100 0x0140      ADD      R1,R0,#+64
   \        0x6   0x784A             LDRB     R2,[R1, #+1]
   \        0x8   0x2A20             CMP      R2,#+32
   \        0xA   0xD107             BNE.N    ??HAL_I2CEx_DisableWakeUp_0
    237            {
    238              /* Process Locked */
    239              __HAL_LOCK(hi2c);
   \        0xC   0x780B             LDRB     R3,[R1, #+0]
   \        0xE   0x2B01             CMP      R3,#+1
   \       0x10   0xD004             BEQ.N    ??HAL_I2CEx_DisableWakeUp_0
   \       0x12   0x....'....        BL       ?Subroutine4
    240          
    241              hi2c->State = HAL_I2C_STATE_BUSY;
    242          
    243              /* Disable the selected I2C peripheral */
    244              __HAL_I2C_DISABLE(hi2c);
    245          
    246              /* Enable wakeup from stop mode */
    247              hi2c->Instance->CR1 &= ~(I2C_CR1_WUPEN);
    248          
    249              __HAL_I2C_ENABLE(hi2c);
    250          
    251              hi2c->State = HAL_I2C_STATE_READY;
    252          
    253              /* Process Unlocked */
    254              __HAL_UNLOCK(hi2c);
    255          
    256              return HAL_OK;
    257            }
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x16   0xF423 0x2380      BIC      R3,R3,#0x40000
   \       0x1A   0x....             B.N      ?Subroutine1
    258            else
    259            {
    260              return HAL_BUSY;
   \                     ??HAL_I2CEx_DisableWakeUp_0: (+1)
   \       0x1C   0x2002             MOVS     R0,#+2
   \       0x1E   0xBD10             POP      {R4,PC}          ;; return
    261            }
    262          }
    263          
    264          /**
    265            * @brief Enable the I2C fast mode plus driving capability.
    266            * @param ConfigFastModePlus Selects the pin.
    267            *   This parameter can be one of the @ref I2CEx_FastModePlus values
    268            * @note  For I2C1, fast mode plus driving capability can be enabled on all selected
    269            *        I2C1 pins using I2C_FASTMODEPLUS_I2C1 parameter or independently
    270            *        on each one of the following pins PB6, PB7, PB8 and PB9.
    271            * @note  For remaining I2C1 pins (PA14, PA15...) fast mode plus driving capability
    272            *        can be enabled only by using I2C_FASTMODEPLUS_I2C1 parameter.
    273            * @note  For all I2C2 pins fast mode plus driving capability can be enabled
    274            *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
    275            * @note  For all I2C3 pins fast mode plus driving capability can be enabled
    276            *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
    277            * @retval None
    278            */

   \                                 In section .text, align 2, keep-with-next
    279          void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
    280          {
    281            /* Check the parameter */
    282            assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
    283          
    284            /* Enable SYSCFG clock */
    285            __HAL_RCC_SYSCFG_CLK_ENABLE();
   \                     HAL_I2CEx_EnableFastModePlus: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable2  ;; 0x40021018
   \        0x2   0xB081             SUB      SP,SP,#+4
   \        0x4   0x680A             LDR      R2,[R1, #+0]
   \        0x6   0xF042 0x0201      ORR      R2,R2,#0x1
   \        0xA   0x600A             STR      R2,[R1, #+0]
   \        0xC   0x6809             LDR      R1,[R1, #+0]
   \        0xE   0xF001 0x0101      AND      R1,R1,#0x1
   \       0x12   0x9100             STR      R1,[SP, #+0]
   \       0x14   0x9900             LDR      R1,[SP, #+0]
    286          
    287            /* Enable fast mode plus driving capability for selected pin */
    288            SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
   \       0x16   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40010000
   \       0x18   0x680A             LDR      R2,[R1, #+0]
   \       0x1A   0x4310             ORRS     R0,R0,R2
   \       0x1C   0x....             B.N      ?Subroutine2
    289          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x6008             STR      R0,[R1, #+0]
   \        0x2   0xB001             ADD      SP,SP,#+4
   \        0x4   0x4770             BX       LR               ;; return
    290          
    291          /**
    292            * @brief Disable the I2C fast mode plus driving capability.
    293            * @param ConfigFastModePlus Selects the pin.
    294            *   This parameter can be one of the @ref I2CEx_FastModePlus values
    295            * @note  For I2C1, fast mode plus driving capability can be disabled on all selected
    296            *        I2C1 pins using I2C_FASTMODEPLUS_I2C1 parameter or independently
    297            *        on each one of the following pins PB6, PB7, PB8 and PB9.
    298            * @note  For remaining I2C1 pins (PA14, PA15...) fast mode plus driving capability
    299            *        can be disabled only by using I2C_FASTMODEPLUS_I2C1 parameter.
    300            * @note  For all I2C2 pins fast mode plus driving capability can be disabled
    301            *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
    302            * @note  For all I2C3 pins fast mode plus driving capability can be disabled
    303            *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
    304            * @retval None
    305            */

   \                                 In section .text, align 2, keep-with-next
    306          void HAL_I2CEx_DisableFastModePlus(uint32_t ConfigFastModePlus)
    307          {
    308            /* Check the parameter */
    309            assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));
    310          
    311            /* Enable SYSCFG clock */
    312            __HAL_RCC_SYSCFG_CLK_ENABLE();
   \                     HAL_I2CEx_DisableFastModePlus: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable2  ;; 0x40021018
   \        0x2   0xB081             SUB      SP,SP,#+4
   \        0x4   0x680A             LDR      R2,[R1, #+0]
   \        0x6   0xF042 0x0201      ORR      R2,R2,#0x1
   \        0xA   0x600A             STR      R2,[R1, #+0]
   \        0xC   0x6809             LDR      R1,[R1, #+0]
   \        0xE   0xF001 0x0101      AND      R1,R1,#0x1
   \       0x12   0x9100             STR      R1,[SP, #+0]
   \       0x14   0x9900             LDR      R1,[SP, #+0]
    313          
    314            /* Disable fast mode plus driving capability for selected pin */
    315            CLEAR_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
   \       0x16   0x....             LDR.N    R1,??DataTable2_1  ;; 0x40010000
   \       0x18   0x680A             LDR      R2,[R1, #+0]
   \       0x1A   0xEA22 0x0000      BIC      R0,R2,R0
   \       0x1E                      REQUIRE ?Subroutine2
   \       0x1E                      ;; // Fall through to label ?Subroutine2
    316          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x4002'1018        DC32     0x40021018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x4001'0000        DC32     0x40010000
    317          
    318          /**
    319            * @}
    320            */
    321          
    322          /**
    323            * @}
    324            */
    325          
    326          #endif /* HAL_I2C_MODULE_ENABLED */
    327          /**
    328            * @}
    329            */
    330          
    331          /**
    332            * @}
    333            */
    334          
    335          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   HAL_I2CEx_ConfigAnalogFilter
      12   HAL_I2CEx_ConfigDigitalFilter
       4   HAL_I2CEx_DisableFastModePlus
       8   HAL_I2CEx_DisableWakeUp
       4   HAL_I2CEx_EnableFastModePlus
       8   HAL_I2CEx_EnableWakeUp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      22  ?Subroutine0
      24  ?Subroutine1
       6  ?Subroutine2
      24  ?Subroutine3
      24  ?Subroutine4
      42  HAL_I2CEx_ConfigAnalogFilter
      38  HAL_I2CEx_ConfigDigitalFilter
      30  HAL_I2CEx_DisableFastModePlus
      32  HAL_I2CEx_DisableWakeUp
      30  HAL_I2CEx_EnableFastModePlus
      32  HAL_I2CEx_EnableWakeUp

 
 312 bytes in section .text
 
 312 bytes of CODE memory

Errors: none
Warnings: none
