###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  13:35:43
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode                        
#    Endian                       =  little
#    Source file                  =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\FlexMouse\Memory\ring_buffer.c
#    Command line                 =
#        -f C:\Users\100001~1\AppData\Local\Temp\EWD102.tmp
#        (C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\FlexMouse\Memory\ring_buffer.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale                       =  C
#    List file                    =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List\ring_buffer.lst
#    Object file                  =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj\ring_buffer.o
#    Runtime model:                  
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\FlexMouse\Memory\ring_buffer.c
      1          /**
      2            ********************************************************************************************************************************
      3            * @file    ring_buffer.c
      4            * @author  Pamela Lee
      5            * @brief   This file implements the interface for the ring buffer data structure.
      6            * @details This file contains function definitions implementing a ring buffer (first in first out queue) data structure.
      7            *          The ring buffer is a fixed size structure that can be initialized with size ranging from 2 to (2^32)-1 bytes.
      8            *          New data is entered at the location where the ring buffer head pointer indicates.
      9            *          Stored data is accessed at the location that the ring buffer tail pointer indicates.
     10            ********************************************************************************************************************************
     11            */
     12          
     13          /* Includes --------------------------------------------------------------------------------------------------------------------*/
     14          #include "ring_buffer.h"

   \                                 In section .bss, align 1
   \   static __absolute uint8_t Ring_mallocError
   \                     Ring_mallocError:
   \        0x0                      DS8 1
     15          
     16          /* Private Function Prototypes -------------------------------------------------------------------------------------------------*/
     17          static uint8_t RingBuf_GetValueOfHead(Ring_Buf_Handle this_ring_buf_u32);
     18          static uint8_t RingBuf_SetValueOfHead(Ring_Buf_Handle this_ring_buf_u32, uint8_t head_s32);
     19          static uint8_t RingBuf_GetValueOfTail(Ring_Buf_Handle this_ring_buf_u32);
     20          static uint8_t RingBuf_SetValueOfTail(Ring_Buf_Handle this_ring_buf_u32, uint8_t tail_s32);
     21          static uint8_t RingBuf_IncHead(Ring_Buf_Handle this_ring_buf_u32);
     22          static uint8_t RingBuf_IncTail(Ring_Buf_Handle this_ring_buf_u32);
     23          static uint8_t *RingBuf_GetPhysicalAddressOfHeadPlusOffset(Ring_Buf_Handle this_ring_buf_u32, uint32_t offset_u32);
     24          static uint8_t RingBuf_IsEmpty(Ring_Buf_Handle this_ring_buf_u32);
     25          static uint8_t RingBuf_IsFull(Ring_Buf_Handle this_ring_buf_u32);
     26          static int32_t RingBuf_CalculateAvailableSpace(Ring_Buf_Handle this_ring_buf_u32);
     27          static uint8_t *RingBuf_SetPointerToRingBuf(Ring_Buf_Handle this_ring_buf_u32, uint8_t *p_ringBuf_u8);
     28          static uint8_t RingBuf_SetUsedNumOfElements(Ring_Buf_Handle this_ring_buf_u32, uint32_t usedNumOfElements_s32);
     29          static uint8_t RingBuf_GetTotalNumOfElements(Ring_Buf_Handle this_ring_buf_u32);
     30          static uint8_t RingBuf_SetTotalNumOfElements(Ring_Buf_Handle this_ring_buf_u32, uint32_t totalNumOfElements_u32);
     31          static uint8_t RingBuf_GetIsOverwrittingAllowed(Ring_Buf_Handle this_ring_buf_u32);
     32          static uint8_t RingBuf_SetIsOverwrittingAllowed(Ring_Buf_Handle this_ring_buf_u32, uint8_t is_OverwrittingAllowed_u8);
     33          static uint8_t RingBuf_SetAccessMode(Ring_Buf_Handle this_ring_buf_u32, uint8_t access_mode_u8);
     34          static uint8_t *RingBuf_SetUserList(Ring_Buf_Handle this_ring_buf_u32, uint8_t *p_user_list_u8);
     35          static uint8_t RingBuf_SetUserListSize(Ring_Buf_Handle this_ring_buf_u32, uint8_t user_list_size_u8);
     36          
     37          /* Public Functions ------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     38          void RingBuf_Initialize(Ring_Buf_Handle this_ring_buf_u32, uint8_t owner_u8, uint8_t ring_buf_size_u8,
     39                                     uint8_t access_mode_u8, uint8_t *p_user_list_u8, uint8_t user_list_size_u8) {
   \                     RingBuf_Initialize: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x4690             MOV      R8,R2
   \        0x8   0x460E             MOV      R6,R1
   \        0xA   0x4699             MOV      R9,R3
     40              uint8_t* tmpryBuf;                                                          //check any Heap memory alocation error                 //house keeping code
     41              if( (tmpryBuf = malloc(ring_buf_size_u8)) == NULL) Ring_mallocError++;      //check any Heap memory alocation error                 //house keeping code
   \        0xC   0x4640             MOV      R0,R8
   \        0xE   0x....'....        BL       malloc
   \       0x12   0xB918             CBNZ.N   R0,??RingBuf_Initialize_0
   \       0x14   0x....             LDR.N    R1,??DataTable0
   \       0x16   0x780A             LDRB     R2,[R1, #+0]
   \       0x18   0x1C52             ADDS     R2,R2,#+1
   \       0x1A   0x700A             STRB     R2,[R1, #+0]
   \                     ??RingBuf_Initialize_0: (+1)
   \       0x1C   0x9C09             LDR      R4,[SP, #+36]
   \       0x1E   0x9F08             LDR      R7,[SP, #+32]
     42              RingBuf_SetPointerToRingBuf(this_ring_buf_u32, tmpryBuf);
   \       0x20   0x6028             STR      R0,[R5, #+0]
     43              RingBuf_SetValueOfHead(this_ring_buf_u32, 0);
   \       0x22   0x2100             MOVS     R1,#+0
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0x....'....        BL       RingBuf_SetValueOfHead
     44              RingBuf_SetValueOfTail(this_ring_buf_u32, 0);
   \       0x2A   0x2100             MOVS     R1,#+0
   \       0x2C   0x4628             MOV      R0,R5
   \       0x2E   0x....'....        BL       RingBuf_SetValueOfTail
     45              RingBuf_SetUsedNumOfElements(this_ring_buf_u32, 0);
   \       0x32   0x2100             MOVS     R1,#+0
   \       0x34   0x....'....        BL       ?Subroutine1
     46              RingBuf_SetTotalNumOfElements(this_ring_buf_u32, ring_buf_size_u8);
     47              RingBuf_SetIsOverwrittingAllowed(this_ring_buf_u32, TRUE);
   \                     ??CrossCallReturnLabel_6: (+1)
   \       0x38   0x2001             MOVS     R0,#+1
   \       0x3A   0xF8C5 0x8010      STR      R8,[R5, #+16]
   \       0x3E   0x7528             STRB     R0,[R5, #+20]
     48              RingBuf_SetOwner(this_ring_buf_u32, owner_u8);
   \       0x40   0x756E             STRB     R6,[R5, #+21]
     49              RingBuf_SetAccessMode(this_ring_buf_u32, access_mode_u8);
   \       0x42   0xF885 0x9016      STRB     R9,[R5, #+22]
     50              RingBuf_SetUserList(this_ring_buf_u32, p_user_list_u8);
   \       0x46   0x61AF             STR      R7,[R5, #+24]
     51              RingBuf_SetUserListSize(this_ring_buf_u32, user_list_size_u8);
     52              RingBuf_SetProcessInstanceIndex(this_ring_buf_u32, NONE_AVAILABLE);
   \       0x48   0x20FF             MOVS     R0,#+255
   \       0x4A   0x772C             STRB     R4,[R5, #+28]
   \       0x4C   0x7768             STRB     R0,[R5, #+29]
     53              RingBuf_SetSystemInstanceIndex(this_ring_buf_u32, NONE_AVAILABLE);
   \       0x4E   0x77A8             STRB     R0,[R5, #+30]
     54          }
   \       0x50   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x4628             MOV      R0,R5
   \        0x2   0x....             B.N      RingBuf_SetUsedNumOfElements
     55          

   \                                 In section .text, align 2, keep-with-next
     56          void RingBuf_ClearContents(Ring_Buf_Handle this_ring_buf_u32) {
   \                     RingBuf_ClearContents: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x4604             MOV      R4,R0
     57              RingBuf_SetValueOfHead(this_ring_buf_u32, 0);
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x....'....        BL       RingBuf_SetValueOfHead
     58              RingBuf_SetValueOfTail(this_ring_buf_u32, 0);
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0x....'....        BL       RingBuf_SetValueOfTail
     59              RingBuf_SetUsedNumOfElements(this_ring_buf_u32, 0);
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0xE8BD 0x4010      POP      {R4,LR}
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0x....             B.N      RingBuf_SetUsedNumOfElements
     60          }
     61          

   \                                 In section .text, align 2, keep-with-next
     62          uint8_t RingBuf_WriteCharacter(Ring_Buf_Handle this_ring_buf_u32, uint8_t c[]) {
   \                     RingBuf_WriteCharacter: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
     63              uint8_t *TailPtr = RingBuf_GetPointerToRingBuf(this_ring_buf_u32) + RingBuf_GetValueOfTail(this_ring_buf_u32);
   \        0x6   0x6821             LDR      R1,[R4, #+0]
   \        0x8   0x7A20             LDRB     R0,[R4, #+8]
   \        0xA   0x180E             ADDS     R6,R1,R0
     64              if (RingBuf_IsFull(this_ring_buf_u32) && !RingBuf_GetIsOverwrittingAllowed(this_ring_buf_u32)) {
   \        0xC   0x4620             MOV      R0,R4
   \        0xE   0x....'....        BL       RingBuf_IsFull
   \       0x12   0xB108             CBZ.N    R0,??RingBuf_WriteCharacter_0
   \       0x14   0x7D20             LDRB     R0,[R4, #+20]
   \       0x16   0xB138             CBZ.N    R0,??RingBuf_WriteCharacter_1
     65                  return FALSE;
     66              }
     67              *TailPtr = c[0];
   \                     ??RingBuf_WriteCharacter_0: (+1)
   \       0x18   0x7828             LDRB     R0,[R5, #+0]
   \       0x1A   0x7030             STRB     R0,[R6, #+0]
     68              RingBuf_SetUsedNumOfElements(this_ring_buf_u32, RingBuf_GetUsedNumOfElements(this_ring_buf_u32) + 1);
   \       0x1C   0x....'....        BL       ?Subroutine3
     69              return RingBuf_IncTail(this_ring_buf_u32);
   \                     ??CrossCallReturnLabel_12: (+1)
   \       0x20   0x4620             MOV      R0,R4
   \       0x22   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x26   0x....             B.N      RingBuf_IncTail
   \                     ??RingBuf_WriteCharacter_1: (+1)
   \       0x28   0xBD70             POP      {R4-R6,PC}       ;; return
     70          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x4620             MOV      R0,R4
   \        0x2   0x7B21             LDRB     R1,[R4, #+12]
   \        0x4   0x1C49             ADDS     R1,R1,#+1
   \        0x6   0x....             B.N      RingBuf_SetUsedNumOfElements
     71          

   \                                 In section .text, align 2, keep-with-next
     72          uint8_t RingBuf_WriteBlock(Ring_Buf_Handle this_ring_buf_u32, uint8_t c[], uint32_t *length) {
   \                     RingBuf_WriteBlock: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
     73              uint8_t *TailPtr;
     74                for (uint32_t i = 0; i < *length; i++) {
   \        0x8   0x2700             MOVS     R7,#+0
   \        0xA   0xE009             B.N      ??RingBuf_WriteBlock_0
     75                    if ((RingBuf_CalculateAvailableSpace(this_ring_buf_u32) < *length) && !RingBuf_GetIsOverwrittingAllowed(this_ring_buf_u32)) {
     76                        return FALSE;
     77                    }
     78                    TailPtr = RingBuf_GetPointerToRingBuf(this_ring_buf_u32) + RingBuf_GetValueOfTail(this_ring_buf_u32);
     79                    *TailPtr = c[i];
   \                     ??RingBuf_WriteBlock_1: (+1)
   \        0xC   0x6821             LDR      R1,[R4, #+0]
   \        0xE   0x7A22             LDRB     R2,[R4, #+8]
   \       0x10   0x5DE8             LDRB     R0,[R5, R7]
   \       0x12   0x5488             STRB     R0,[R1, R2]
     80                    RingBuf_SetUsedNumOfElements(this_ring_buf_u32, RingBuf_GetUsedNumOfElements(this_ring_buf_u32) + 1);
   \       0x14   0x....'....        BL       ?Subroutine3
     81                    RingBuf_IncTail(this_ring_buf_u32);
   \                     ??CrossCallReturnLabel_11: (+1)
   \       0x18   0x4620             MOV      R0,R4
   \       0x1A   0x....'....        BL       RingBuf_IncTail
   \       0x1E   0x1C7F             ADDS     R7,R7,#+1
   \                     ??RingBuf_WriteBlock_0: (+1)
   \       0x20   0x6830             LDR      R0,[R6, #+0]
   \       0x22   0x4287             CMP      R7,R0
   \       0x24   0xD209             BCS.N    ??RingBuf_WriteBlock_2
   \       0x26   0x4620             MOV      R0,R4
   \       0x28   0x....'....        BL       RingBuf_CalculateAvailableSpace
   \       0x2C   0x6831             LDR      R1,[R6, #+0]
   \       0x2E   0x4288             CMP      R0,R1
   \       0x30   0xD2EC             BCS.N    ??RingBuf_WriteBlock_1
     82                }
   \       0x32   0x7D20             LDRB     R0,[R4, #+20]
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD1E9             BNE.N    ??RingBuf_WriteBlock_1
   \       0x38   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     83                return TRUE;
   \                     ??RingBuf_WriteBlock_2: (+1)
   \       0x3A   0x2001             MOVS     R0,#+1
   \       0x3C   0xBDF2             POP      {R1,R4-R7,PC}
     84          }
     85          

   \                                 In section .text, align 2, keep-with-next
     86          uint8_t RingBuf_ReadBlock(Ring_Buf_Handle this_ring_buf_u32, uint8_t c[], uint32_t *length) {
   \                     RingBuf_ReadBlock: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x4604             MOV      R4,R0
   \        0x4   0x460D             MOV      R5,R1
   \        0x6   0x4616             MOV      R6,R2
     87              uint32_t i = 0;
   \        0x8   0x2700             MOVS     R7,#+0
   \        0xA   0xE00D             B.N      ??RingBuf_ReadBlock_0
     88              for (; i < *length; i++) {
     89                  if (!RingBuf_IsEmpty(this_ring_buf_u32)) {
     90                      *(c++) = *(RingBuf_GetPointerToRingBuf(this_ring_buf_u32) + RingBuf_GetValueOfHead(this_ring_buf_u32));
   \                     ??RingBuf_ReadBlock_1: (+1)
   \        0xC   0x6820             LDR      R0,[R4, #+0]
   \        0xE   0x7921             LDRB     R1,[R4, #+4]
   \       0x10   0x5C42             LDRB     R2,[R0, R1]
   \       0x12   0xF805 0x2B01      STRB     R2,[R5], #+1
     91                      RingBuf_SetUsedNumOfElements(this_ring_buf_u32,
     92                                                         RingBuf_GetUsedNumOfElements(this_ring_buf_u32) - 1);
   \       0x16   0x4620             MOV      R0,R4
   \       0x18   0x7B21             LDRB     R1,[R4, #+12]
   \       0x1A   0x1E49             SUBS     R1,R1,#+1
   \       0x1C   0x....'....        BL       RingBuf_SetUsedNumOfElements
     93                      RingBuf_IncHead(this_ring_buf_u32);
   \       0x20   0x4620             MOV      R0,R4
   \       0x22   0x....'....        BL       RingBuf_IncHead
     94                  } else {
   \       0x26   0x1C7F             ADDS     R7,R7,#+1
   \                     ??RingBuf_ReadBlock_0: (+1)
   \       0x28   0x6830             LDR      R0,[R6, #+0]
   \       0x2A   0x4287             CMP      R7,R0
   \       0x2C   0xD207             BCS.N    ??RingBuf_ReadBlock_2
   \       0x2E   0x4620             MOV      R0,R4
   \       0x30   0x....'....        BL       RingBuf_IsEmpty
   \       0x34   0x2800             CMP      R0,#+0
   \       0x36   0xD0E9             BEQ.N    ??RingBuf_ReadBlock_1
     95                      *length = i;
   \       0x38   0x6037             STR      R7,[R6, #+0]
     96                      return FALSE;
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
     97                  }
     98              }
     99              *length = i;
   \                     ??RingBuf_ReadBlock_2: (+1)
   \       0x3E   0x6037             STR      R7,[R6, #+0]
    100              return TRUE;
   \       0x40   0x2001             MOVS     R0,#+1
   \       0x42   0xBDF2             POP      {R1,R4-R7,PC}
    101          }
    102          

   \                                 In section .text, align 2, keep-with-next
    103          uint8_t RingBuf_Observe(Ring_Buf_Handle this_ring_buf_u32, uint8_t c[], uint32_t offset_u32, uint32_t *length) {
   \                     RingBuf_Observe: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4605             MOV      R5,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x4617             MOV      R7,R2
   \        0xA   0x461C             MOV      R4,R3
    104              uint8_t *ptr;
    105              RingBuf_CalculateAvailableSpace(this_ring_buf_u32);
   \        0xC   0x....'....        BL       RingBuf_CalculateAvailableSpace
    106              if (RingBuf_GetUsedNumOfElements(this_ring_buf_u32) <= offset_u32) {
   \       0x10   0x7B28             LDRB     R0,[R5, #+12]
   \       0x12   0x4287             CMP      R7,R0
   \       0x14   0xD305             BCC.N    ??RingBuf_Observe_0
    107                  *length = OFFSET_ERROR;
   \       0x16   0xF64F 0x71FF      MOVW     R1,#+65535
   \       0x1A   0x6021             STR      R1,[R4, #+0]
    108                  return FALSE;
   \       0x1C   0x2000             MOVS     R0,#+0
   \                     ??RingBuf_Observe_1: (+1)
   \       0x1E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    109              }
    110              uint32_t i = 0;
   \                     ??RingBuf_Observe_0: (+1)
   \       0x22   0x2600             MOVS     R6,#+0
   \       0x24   0xE003             B.N      ??RingBuf_Observe_2
    111              for (; i < *length; i++) {
    112                  ptr = RingBuf_GetPhysicalAddressOfHeadPlusOffset(this_ring_buf_u32, offset_u32 + i);
    113                  if (ptr != 0) 
    114                  {
    115                      *(c++) = *ptr;
   \                     ??RingBuf_Observe_3: (+1)
   \       0x26   0x7800             LDRB     R0,[R0, #+0]
   \       0x28   0xF808 0x0B01      STRB     R0,[R8], #+1
    116                  } else {
   \       0x2C   0x1C76             ADDS     R6,R6,#+1
   \                     ??RingBuf_Observe_2: (+1)
   \       0x2E   0x6821             LDR      R1,[R4, #+0]
   \       0x30   0x428E             CMP      R6,R1
   \       0x32   0xD207             BCS.N    ??RingBuf_Observe_4
   \       0x34   0x19F1             ADDS     R1,R6,R7
   \       0x36   0x4628             MOV      R0,R5
   \       0x38   0x....'....        BL       RingBuf_GetPhysicalAddressOfHeadPlusOffset
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD1F2             BNE.N    ??RingBuf_Observe_3
    117                      *length = i;
   \       0x40   0x6026             STR      R6,[R4, #+0]
    118                      return FALSE;
   \       0x42   0xE7EC             B.N      ??RingBuf_Observe_1
    119                  }
    120              }
    121              *length = i;
   \                     ??RingBuf_Observe_4: (+1)
   \       0x44   0x6026             STR      R6,[R4, #+0]
    122              return TRUE;
   \       0x46   0x2001             MOVS     R0,#+1
   \       0x48   0xE7E9             B.N      ??RingBuf_Observe_1
    123          }
    124          

   \                                 In section .text, align 2, keep-with-next
    125          uint32_t RingBuf_Search(Ring_Buf_Handle this_ring_buf_u32, uint8_t c, uint32_t offset_u32) {
   \                     RingBuf_Search: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4604             MOV      R4,R0
   \        0x6   0x4688             MOV      R8,R1
   \        0x8   0x4616             MOV      R6,R2
    126              uint8_t *ptr;
    127              RingBuf_CalculateAvailableSpace(this_ring_buf_u32);
   \        0xA   0x....'....        BL       RingBuf_CalculateAvailableSpace
    128              if (RingBuf_GetUsedNumOfElements(this_ring_buf_u32) <= offset_u32) {
   \        0xE   0x7B20             LDRB     R0,[R4, #+12]
   \       0x10   0x4286             CMP      R6,R0
   \       0x12   0xD303             BCC.N    ??RingBuf_Search_0
    129                  return OFFSET_ERROR;
   \       0x14   0xF64F 0x70FF      MOVW     R0,#+65535
   \                     ??RingBuf_Search_1: (+1)
   \       0x18   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    130              }
    131              uint8_t i = 0;
   \                     ??RingBuf_Search_0: (+1)
   \       0x1C   0x2700             MOVS     R7,#+0
   \       0x1E   0xE000             B.N      ??RingBuf_Search_2
    132              for (; i < RingBuf_GetUsedNumOfElements(this_ring_buf_u32); i++) {
   \                     ??RingBuf_Search_3: (+1)
   \       0x20   0x1C7F             ADDS     R7,R7,#+1
   \                     ??RingBuf_Search_2: (+1)
   \       0x22   0x68E1             LDR      R1,[R4, #+12]
   \       0x24   0xB2F8             UXTB     R0,R7
   \       0x26   0xB2C9             UXTB     R1,R1
   \       0x28   0x4288             CMP      R0,R1
   \       0x2A   0xD209             BCS.N    ??RingBuf_Search_4
    133                  ptr = RingBuf_GetPhysicalAddressOfHeadPlusOffset(this_ring_buf_u32, offset_u32 + i);
   \       0x2C   0xB2FD             UXTB     R5,R7
   \       0x2E   0x19A9             ADDS     R1,R5,R6
   \       0x30   0x4620             MOV      R0,R4
   \       0x32   0x....'....        BL       RingBuf_GetPhysicalAddressOfHeadPlusOffset
    134                  if (*ptr == c) {
   \       0x36   0x7800             LDRB     R0,[R0, #+0]
   \       0x38   0x4540             CMP      R0,R8
   \       0x3A   0xD1F1             BNE.N    ??RingBuf_Search_3
    135                      return i;
   \       0x3C   0x4628             MOV      R0,R5
   \       0x3E   0xE7EB             B.N      ??RingBuf_Search_1
    136                  }
    137              }
    138              return NOT_FOUND;
   \                     ??RingBuf_Search_4: (+1)
   \       0x40   0xF44F 0x4070      MOV      R0,#+61440
   \       0x44   0xE7E8             B.N      ??RingBuf_Search_1
    139          }
    140          

   \                                 In section .text, align 2, keep-with-next
    141          uint8_t *RingBuf_GetPointerToRingBuf(Ring_Buf_Handle this_ring_buf_u32) {
    142              return (*this_ring_buf_u32).p_ringBuf_u8;
   \                     RingBuf_GetPointerToRingBuf: (+1)
   \        0x0   0x6800             LDR      R0,[R0, #+0]
   \        0x2   0x4770             BX       LR               ;; return
    143          }
    144          

   \                                 In section .text, align 2, keep-with-next
    145          uint8_t RingBuf_GetUsedNumOfElements(Ring_Buf_Handle this_ring_buf_u32) {
    146              return (*this_ring_buf_u32).usedNumOfElements_s32;
   \                     RingBuf_GetUsedNumOfElements: (+1)
   \        0x0   0x68C0             LDR      R0,[R0, #+12]
   \        0x2   0xB2C0             UXTB     R0,R0
   \        0x4   0x4770             BX       LR               ;; return
    147          }
    148              

   \                                 In section .text, align 2, keep-with-next
    149          int32_t RingBuf_GetCalculateAvailableSpace(Ring_Buf_Handle this_ring_buf_u32) {
    150              return (RingBuf_CalculateAvailableSpace(this_ring_buf_u32));
   \                     RingBuf_GetCalculateAvailableSpace: (+1)
   \        0x0   0x....             B.N      RingBuf_CalculateAvailableSpace
    151          }
    152          
    153          

   \                                 In section .text, align 2, keep-with-next
    154          uint8_t RingBuf_GetOwner(Ring_Buf_Handle this_ring_buf_u32) {
    155              return (*this_ring_buf_u32).owner_u8;
   \                     RingBuf_GetOwner: (+1)
   \        0x0   0x7D40             LDRB     R0,[R0, #+21]
   \        0x2   0x4770             BX       LR               ;; return
    156          }
    157          

   \                                 In section .text, align 2, keep-with-next
    158          uint8_t RingBuf_SetOwner(Ring_Buf_Handle this_ring_buf_u32, uint8_t owner_u8) {
    159              (*this_ring_buf_u32).owner_u8 = owner_u8;
   \                     RingBuf_SetOwner: (+1)
   \        0x0   0x7541             STRB     R1,[R0, #+21]
    160              return RingBuf_GetOwner(this_ring_buf_u32) == owner_u8;
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x4770             BX       LR               ;; return
    161          }
    162          

   \                                 In section .text, align 2, keep-with-next
    163          uint8_t RingBuf_SetProcessInstanceIndex(Ring_Buf_Handle this_ring_buf_u32, uint8_t processInstanceIndex_u8) {
    164              return (*this_ring_buf_u32).processInstanceIndex_u8 = processInstanceIndex_u8;
   \                     RingBuf_SetProcessInstanceIndex: (+1)
   \        0x0   0x7741             STRB     R1,[R0, #+29]
   \        0x2   0x4608             MOV      R0,R1
   \        0x4   0x4770             BX       LR               ;; return
    165          }
    166          

   \                                 In section .text, align 2, keep-with-next
    167          uint8_t RingBuf_GetProcessInstanceIndex(Ring_Buf_Handle this_ring_buf_u32) {
    168              return (*this_ring_buf_u32).processInstanceIndex_u8;
   \                     RingBuf_GetProcessInstanceIndex: (+1)
   \        0x0   0x7F40             LDRB     R0,[R0, #+29]
   \        0x2   0x4770             BX       LR               ;; return
    169          }
    170          

   \                                 In section .text, align 2, keep-with-next
    171          uint8_t RingBuf_SetSystemInstanceIndex(Ring_Buf_Handle this_ring_buf_u32, uint8_t systemInstanceIndex_u8) {
    172              return (*this_ring_buf_u32).systemInstanceIndex_u8 = systemInstanceIndex_u8;
   \                     RingBuf_SetSystemInstanceIndex: (+1)
   \        0x0   0x7781             STRB     R1,[R0, #+30]
   \        0x2   0x4608             MOV      R0,R1
   \        0x4   0x4770             BX       LR               ;; return
    173          }
    174          
    175          /* Private Functions -----------------------------------------------------------------------------------------------------------*/
    176          /**
    177            ********************************************************************************************************************************
    178            * @brief   Private observer function for obtaining a copy of the value of head_s32. 
    179            * @details 
    180            * @param   *this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on.
    181            * @return  Returns 
    182            ********************************************************************************************************************************
    183            */

   \                                 In section .text, align 2, keep-with-next
    184          static uint8_t RingBuf_GetValueOfHead(Ring_Buf_Handle this_ring_buf_u32) {
    185              return (*this_ring_buf_u32).head_s32;
   \                     RingBuf_GetValueOfHead: (+1)
   \        0x0   0x6840             LDR      R0,[R0, #+4]
   \        0x2   0xB2C0             UXTB     R0,R0
   \        0x4   0x4770             BX       LR               ;; return
    186          }
    187          
    188          /**
    189            ********************************************************************************************************************************
    190            * @brief   Private function for updating the value of head_s32.
    191            * @details 
    192            * @param   *this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on.
    193            * @return  Returns 
    194            ********************************************************************************************************************************
    195            */

   \                                 In section .text, align 2, keep-with-next
    196          static uint8_t RingBuf_SetValueOfHead(Ring_Buf_Handle this_ring_buf_u32, uint8_t head_s32) {
    197              return (*this_ring_buf_u32).head_s32 = head_s32;
   \                     RingBuf_SetValueOfHead: (+1)
   \        0x0   0x6041             STR      R1,[R0, #+4]
   \        0x2   0x4608             MOV      R0,R1
   \        0x4   0x4770             BX       LR               ;; return
    198          }
    199          
    200          /**
    201            ********************************************************************************************************************************
    202            * @brief   Private observer function for obtaining a copy of the value of tail_s32.  
    203            * @details 
    204            * @param   *this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on.
    205            * @return  Returns 
    206            ********************************************************************************************************************************
    207            */

   \                                 In section .text, align 2, keep-with-next
    208          static uint8_t RingBuf_GetValueOfTail(Ring_Buf_Handle this_ring_buf_u32) {
    209              return (*this_ring_buf_u32).tail_s32;
   \                     RingBuf_GetValueOfTail: (+1)
   \        0x0   0x6880             LDR      R0,[R0, #+8]
   \        0x2   0xB2C0             UXTB     R0,R0
   \        0x4   0x4770             BX       LR               ;; return
    210          }
    211          
    212          /**
    213            ********************************************************************************************************************************
    214            * @brief   Private function for updating the value of tail_s32. 
    215            * @details 
    216            * @param   *this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on.
    217            * @return  Returns 
    218            ********************************************************************************************************************************
    219            */

   \                                 In section .text, align 2, keep-with-next
    220          static uint8_t RingBuf_SetValueOfTail(Ring_Buf_Handle this_ring_buf_u32, uint8_t tail_s32) {
    221              return (*this_ring_buf_u32).tail_s32 = tail_s32;
   \                     RingBuf_SetValueOfTail: (+1)
   \        0x0   0x6081             STR      R1,[R0, #+8]
   \        0x2   0x4608             MOV      R0,R1
   \        0x4   0x4770             BX       LR               ;; return
    222          }
    223          
    224          /**
    225            ********************************************************************************************************************************
    226            * @brief   Private function for incrementing head_s32 by 1.
    227            * @details This function takes care of incrementing the pointer to the head of the ring buffer by 1 taking into consideration
    228            *             the linear implementation in physical memory.
    229            * @param   this_ring_buf_u32	The index that the kernel uses to uniquely track of this instance (systemInstanceIndex_u8).
    230            * @return  Returns TRUE if the operation was successful, FALSE otherwise.
    231            ********************************************************************************************************************************
    232            */

   \                                 In section .text, align 2, keep-with-next
    233          static uint8_t RingBuf_IncHead(Ring_Buf_Handle this_ring_buf_u32) {
   \                     RingBuf_IncHead: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    234              if (RingBuf_IsEmpty(this_ring_buf_u32)) {
   \        0x4   0x....'....        BL       RingBuf_IsEmpty
   \        0x8   0xB108             CBZ.N    R0,??RingBuf_IncHead_0
    235                  return FALSE;
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xBD32             POP      {R1,R4,R5,PC}
    236              } else {
    237                  if (RingBuf_GetTotalNumOfElements(this_ring_buf_u32) - RingBuf_GetValueOfHead(this_ring_buf_u32) <= 1) {
   \                     ??RingBuf_IncHead_0: (+1)
   \        0xE   0x4620             MOV      R0,R4
   \       0x10   0x....'....        BL       RingBuf_GetTotalNumOfElements
   \       0x14   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x18   0x1A2D             SUBS     R5,R5,R0
   \       0x1A   0x2D02             CMP      R5,#+2
   \       0x1C   0xBFB8             IT       LT
   \       0x1E   0x2100             MOVLT    R1,#+0
    238                      RingBuf_SetValueOfHead(this_ring_buf_u32, 0);
   \       0x20   0xDB04             BLT.N    ??RingBuf_IncHead_1
    239                  } else {
    240                      RingBuf_SetValueOfHead(this_ring_buf_u32, RingBuf_GetValueOfHead(this_ring_buf_u32) + 1);
   \       0x22   0x4620             MOV      R0,R4
   \       0x24   0x....'....        BL       RingBuf_GetValueOfHead
   \       0x28   0x1C40             ADDS     R0,R0,#+1
   \       0x2A   0xB2C1             UXTB     R1,R0
   \                     ??RingBuf_IncHead_1: (+1)
   \       0x2C   0x4620             MOV      R0,R4
   \       0x2E   0x....'....        BL       RingBuf_SetValueOfHead
    241                  }
    242              }
    243              return TRUE;
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    244          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x4605             MOV      R5,R0
   \        0x2   0x4620             MOV      R0,R4
   \        0x4   0x....             B.N      RingBuf_GetValueOfHead
    245          
    246          /**
    247            ********************************************************************************************************************************
    248            * @brief   Private function for incrementing tail_s32 by 1.
    249            * @details This function takes care of incrementing the pointer to the head of the ring buffer by 1 taking into consideration
    250            *             the linear implementation in physical memory.
    251            * @param   this_ring_buf_u32	The index that the kernel uses to uniquely track of this instance (systemInstanceIndex_u8).
    252            * @return  Returns TRUE if the operation was successful, FALSE otherwise.
    253            ********************************************************************************************************************************
    254            */

   \                                 In section .text, align 2, keep-with-next
    255          static uint8_t RingBuf_IncTail(Ring_Buf_Handle this_ring_buf_u32) {
   \                     RingBuf_IncTail: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    256              if (RingBuf_IsFull(this_ring_buf_u32)) {
   \        0x4   0x....'....        BL       RingBuf_IsFull
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0x4620             MOV      R0,R4
   \        0xC   0xD006             BEQ.N    ??RingBuf_IncTail_0
    257                  if (RingBuf_GetIsOverwrittingAllowed(this_ring_buf_u32)) {
   \        0xE   0x....'....        BL       RingBuf_GetIsOverwrittingAllowed
   \       0x12   0xB1A0             CBZ.N    R0,??RingBuf_IncTail_1
    258                      RingBuf_IncHead(this_ring_buf_u32);
   \       0x14   0x4620             MOV      R0,R4
   \       0x16   0x....'....        BL       RingBuf_IncHead
    259                      if (RingBuf_GetTotalNumOfElements(this_ring_buf_u32) - RingBuf_GetValueOfTail(this_ring_buf_u32) <=
    260                          1) {
   \       0x1A   0x4620             MOV      R0,R4
    261                          RingBuf_SetValueOfTail(this_ring_buf_u32, 0);
    262                      } else {
    263                          RingBuf_SetValueOfTail(this_ring_buf_u32, RingBuf_GetValueOfTail(this_ring_buf_u32) + 1);
    264                      }
    265                      return TRUE;
    266                  }
    267                  return FALSE;
    268              } else {
    269                  if (RingBuf_GetTotalNumOfElements(this_ring_buf_u32) - RingBuf_GetValueOfTail(this_ring_buf_u32) <= 1) {
   \                     ??RingBuf_IncTail_0: (+1)
   \       0x1C   0x....'....        BL       RingBuf_GetTotalNumOfElements
   \       0x20   0x....'....        BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_16: (+1)
   \       0x24   0x1A2D             SUBS     R5,R5,R0
   \       0x26   0x2D02             CMP      R5,#+2
   \       0x28   0xDA01             BGE.N    ??RingBuf_IncTail_2
    270                      RingBuf_SetValueOfTail(this_ring_buf_u32, 0);
   \       0x2A   0x2100             MOVS     R1,#+0
   \       0x2C   0xE003             B.N      ??RingBuf_IncTail_3
    271                  } else {
    272                      RingBuf_SetValueOfTail(this_ring_buf_u32, RingBuf_GetValueOfTail(this_ring_buf_u32) + 1);
   \                     ??RingBuf_IncTail_2: (+1)
   \       0x2E   0x....'....        BL       ??Subroutine4_0
    273                  }
   \                     ??CrossCallReturnLabel_14: (+1)
   \       0x32   0x1C41             ADDS     R1,R0,#+1
   \       0x34   0xB2C9             UXTB     R1,R1
   \                     ??RingBuf_IncTail_3: (+1)
   \       0x36   0x4620             MOV      R0,R4
   \       0x38   0x....'....        BL       RingBuf_SetValueOfTail
    274                  return TRUE;
   \       0x3C   0x2001             MOVS     R0,#+1
   \                     ??RingBuf_IncTail_1: (+1)
   \       0x3E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    275              }
    276          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \        0x0   0x4605             MOV      R5,R0
   \                     ??Subroutine4_0: (+1)
   \        0x2   0x4620             MOV      R0,R4
   \        0x4   0x....             B.N      RingBuf_GetValueOfTail
    277          
    278          /**
    279            ********************************************************************************************************************************
    280            * @brief   Private function for obtaining a copy of the physial address of a particular offset relative to head_s32.
    281            * @details This function takes care of offsets that would return addresses outside of the buffer's address range allocation.
    282            * @param   this_ring_buf_u32	The index that the kernel uses to uniquely track of this instance (systemInstanceIndex_u8).
    283            * @param   offset_u32	            This value specifies the distance to be added to the head_s32 physical address location.
    284            * @return  Returns the physial address location corresponding this ring buffer instance's head_s32 address plus an offset.
    285            ********************************************************************************************************************************
    286            */

   \                                 In section .text, align 2, keep-with-next
    287          static uint8_t *RingBuf_GetPhysicalAddressOfHeadPlusOffset(Ring_Buf_Handle this_ring_buf_u32, uint32_t offset_u32) {
   \                     RingBuf_GetPhysicalAddressOfHeadPlusOffset: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
   \        0x4   0x460E             MOV      R6,R1
    288              uint32_t diff;
    289              RingBuf_CalculateAvailableSpace(this_ring_buf_u32);
   \        0x6   0x....'....        BL       RingBuf_CalculateAvailableSpace
    290              if ((RingBuf_IsEmpty(this_ring_buf_u32)) || (RingBuf_GetUsedNumOfElements(this_ring_buf_u32) < offset_u32)) 
   \        0xA   0x4628             MOV      R0,R5
   \        0xC   0x....'....        BL       RingBuf_IsEmpty
   \       0x10   0xBB00             CBNZ.N   R0,??RingBuf_GetPhysicalAddressOfHeadPlusOffset_0
   \       0x12   0x4628             MOV      R0,R5
   \       0x14   0x....'....        BL       RingBuf_GetUsedNumOfElements
   \       0x18   0x42B0             CMP      R0,R6
   \       0x1A   0xD31B             BCC.N    ??RingBuf_GetPhysicalAddressOfHeadPlusOffset_0
    291              {
    292                  return 0;
    293              } 
    294              else if (RingBuf_CalculateAvailableSpace(this_ring_buf_u32) > 0) 
   \       0x1C   0x4628             MOV      R0,R5
   \       0x1E   0x....'....        BL       RingBuf_CalculateAvailableSpace
   \       0x22   0x2801             CMP      R0,#+1
   \       0x24   0x4628             MOV      R0,R5
   \       0x26   0xDB17             BLT.N    ??RingBuf_GetPhysicalAddressOfHeadPlusOffset_1
    295              {
    296                  if (RingBuf_GetUsedNumOfElements(this_ring_buf_u32) > offset_u32) 
   \       0x28   0x....'....        BL       RingBuf_GetUsedNumOfElements
   \       0x2C   0x4286             CMP      R6,R0
   \       0x2E   0xD211             BCS.N    ??RingBuf_GetPhysicalAddressOfHeadPlusOffset_0
    297                  {
    298                    uint8_t wrapAroundAns_u8 = RingBuf_GetValueOfHead(this_ring_buf_u32) + offset_u32;
   \       0x30   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_10: (+1)
   \       0x34   0x1836             ADDS     R6,R6,R0
    299                    if(wrapAroundAns_u8 >= RingBuf_GetTotalNumOfElements(this_ring_buf_u32))
   \       0x36   0x4628             MOV      R0,R5
   \       0x38   0x....'....        BL       RingBuf_GetTotalNumOfElements
   \       0x3C   0xB2F6             UXTB     R6,R6
   \       0x3E   0x4286             CMP      R6,R0
   \       0x40   0xDB03             BLT.N    ??RingBuf_GetPhysicalAddressOfHeadPlusOffset_2
    300                    {
    301                      wrapAroundAns_u8 -= (RingBuf_GetTotalNumOfElements(this_ring_buf_u32) ) ;   
   \       0x42   0x4628             MOV      R0,R5
   \       0x44   0x....'....        BL       RingBuf_GetTotalNumOfElements
   \       0x48   0x1A36             SUBS     R6,R6,R0
    302                    }   
    303                    uint8_t* temp = RingBuf_GetPointerToRingBuf(this_ring_buf_u32);
    304                    return (temp + wrapAroundAns_u8)  ;
   \                     ??RingBuf_GetPhysicalAddressOfHeadPlusOffset_2: (+1)
   \       0x4A   0x4628             MOV      R0,R5
   \       0x4C   0x....'....        BL       RingBuf_GetPointerToRingBuf
   \       0x50   0xB2F6             UXTB     R6,R6
   \       0x52   0xE011             B.N      ??RingBuf_GetPhysicalAddressOfHeadPlusOffset_3
    305                  } 
    306                  else 
    307                  {
    308                      return 0;
   \                     ??RingBuf_GetPhysicalAddressOfHeadPlusOffset_0: (+1)
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0xBD70             POP      {R4-R6,PC}
    309                  }
    310              } 
    311              else 
    312              {
    313                  if ((diff = RingBuf_GetTotalNumOfElements(this_ring_buf_u32) -
    314                              (RingBuf_GetValueOfHead(this_ring_buf_u32) + offset_u32)) <= 0) {
   \                     ??RingBuf_GetPhysicalAddressOfHeadPlusOffset_1: (+1)
   \       0x58   0x....'....        BL       RingBuf_GetTotalNumOfElements
   \       0x5C   0x4604             MOV      R4,R0
   \       0x5E   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_9: (+1)
   \       0x62   0x1A24             SUBS     R4,R4,R0
   \       0x64   0x1BA4             SUBS     R4,R4,R6
   \       0x66   0xD103             BNE.N    ??RingBuf_GetPhysicalAddressOfHeadPlusOffset_4
    315                      return (RingBuf_GetPointerToRingBuf(this_ring_buf_u32) + abs(diff));
   \       0x68   0x4628             MOV      R0,R5
   \       0x6A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x6E   0x....             B.N      RingBuf_GetPointerToRingBuf
    316                  } else {
    317                      return (RingBuf_GetPointerToRingBuf(this_ring_buf_u32) + RingBuf_GetValueOfHead(this_ring_buf_u32) +
    318                              offset_u32);
   \                     ??RingBuf_GetPhysicalAddressOfHeadPlusOffset_4: (+1)
   \       0x70   0x682C             LDR      R4,[R5, #+0]
    319                  }
    320              }
   \       0x72   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_8: (+1)
   \       0x76   0x4420             ADD      R0,R4,R0
   \                     ??RingBuf_GetPhysicalAddressOfHeadPlusOffset_3: (+1)
   \       0x78   0x4430             ADD      R0,R0,R6
   \       0x7A   0xBD70             POP      {R4-R6,PC}       ;; return
    321          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x4628             MOV      R0,R5
   \        0x2   0x....             B.N      RingBuf_GetValueOfHead
    322          
    323          /**
    324            ********************************************************************************************************************************
    325            * @brief   Returns TRUE if there are no used elements in the ring buffer instance, falses otherwise.
    326            * @details 
    327            * @param   this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on.
    328            * @return  eturns TRUE if there are no used elements in the ring buffer instance, falses otherwise.
    329            ********************************************************************************************************************************
    330            */

   \                                 In section .text, align 2, keep-with-next
    331          static uint8_t RingBuf_IsEmpty(Ring_Buf_Handle this_ring_buf_u32) {
   \                     RingBuf_IsEmpty: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    332              return RingBuf_GetValueOfHead(this_ring_buf_u32) == RingBuf_GetValueOfTail(this_ring_buf_u32);
   \        0x4   0x....'....        BL       RingBuf_GetValueOfHead
   \        0x8   0x....'....        BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_15: (+1)
   \        0xC   0x4285             CMP      R5,R0
   \        0xE   0xD101             BNE.N    ??RingBuf_IsEmpty_0
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??RingBuf_IsEmpty_0: (+1)
   \       0x14   0x2000             MOVS     R0,#+0
   \       0x16   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    333          }
    334          
    335          /**
    336            ********************************************************************************************************************************
    337            * @brief   Returns TRUE if the number of used elements is equal to the total number of elements in the ring buffer instance.
    338            * @details 
    339            * @param   this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on. 
    340            * @return  Returns TRUE if the number of used elements is equal to the total number of elements in the ring buffer instance.
    341            ********************************************************************************************************************************
    342            */

   \                                 In section .text, align 2, keep-with-next
    343          static uint8_t RingBuf_IsFull(Ring_Buf_Handle this_ring_buf_u32) {
   \                     RingBuf_IsFull: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x4604             MOV      R4,R0
    344              return (RingBuf_GetValueOfTail(this_ring_buf_u32) - RingBuf_GetValueOfHead(this_ring_buf_u32) ==
    345                      (RingBuf_GetTotalNumOfElements(this_ring_buf_u32) - 1)) ||
    346                     (RingBuf_GetValueOfTail(this_ring_buf_u32) - RingBuf_GetValueOfHead(this_ring_buf_u32) == -1);
   \        0x4   0x....'....        BL       RingBuf_GetValueOfTail
   \        0x8   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_1: (+1)
   \        0xC   0x1A2D             SUBS     R5,R5,R0
   \        0xE   0x4620             MOV      R0,R4
   \       0x10   0x....'....        BL       RingBuf_GetTotalNumOfElements
   \       0x14   0x1E40             SUBS     R0,R0,#+1
   \       0x16   0x4285             CMP      R5,R0
   \       0x18   0xD007             BEQ.N    ??RingBuf_IsFull_0
   \       0x1A   0x....'....        BL       ??Subroutine4_0
   \                     ??CrossCallReturnLabel_13: (+1)
   \       0x1E   0x....'....        BL       ?Subroutine0
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x22   0x1A2D             SUBS     R5,R5,R0
   \       0x24   0xF115 0x0F01      CMN      R5,#+1
   \       0x28   0xD101             BNE.N    ??RingBuf_IsFull_1
   \                     ??RingBuf_IsFull_0: (+1)
   \       0x2A   0x2001             MOVS     R0,#+1
   \       0x2C   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??RingBuf_IsFull_1: (+1)
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    347          }
    348          
    349          /**
    350            ********************************************************************************************************************************
    351            * @brief   Returns the number of unused elements in the ring buffer instance.
    352            * @details Returns the number of unused elements in the ring buffer accounting for cases where the head is in equal to, in front
    353            *                                 of, or behind the tail. Automatically updates usedNumOfElements_s32 when called.
    354            * @param   this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on.
    355            * @return  Returns the number of unused elements in the ring buffer instance.
    356            * @Tested by PL 27OCT2020
    357            ********************************************************************************************************************************
    358            */

   \                                 In section .text, align 2, keep-with-next
    359          static int32_t RingBuf_CalculateAvailableSpace(Ring_Buf_Handle this_ring_buf_u32) {
   \                     RingBuf_CalculateAvailableSpace: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x4605             MOV      R5,R0
    360              int32_t head_minus_tail = 0;
    361              if ((head_minus_tail = RingBuf_GetValueOfTail(this_ring_buf_u32) - RingBuf_GetValueOfHead(this_ring_buf_u32)) >
    362                  0) {
   \        0x4   0x....'....        BL       RingBuf_GetValueOfTail
   \        0x8   0x4606             MOV      R6,R0
   \        0xA   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_7: (+1)
   \        0xE   0x1A34             SUBS     R4,R6,R0
   \       0x10   0x4620             MOV      R0,R4
   \       0x12   0x....'....        BL       abs
   \       0x16   0x2C00             CMP      R4,#+0
   \       0x18   0x4606             MOV      R6,R0
   \       0x1A   0xDD07             BLE.N    ??RingBuf_CalculateAvailableSpace_0
    363                  RingBuf_SetUsedNumOfElements(this_ring_buf_u32, abs(head_minus_tail));
   \       0x1C   0x4631             MOV      R1,R6
   \       0x1E   0x....'....        BL       ?Subroutine1
    364                  return RingBuf_GetTotalNumOfElements(this_ring_buf_u32) - head_minus_tail;
   \                     ??CrossCallReturnLabel_5: (+1)
   \       0x22   0x4628             MOV      R0,R5
   \       0x24   0x....'....        BL       RingBuf_GetTotalNumOfElements
   \       0x28   0x1B00             SUBS     R0,R0,R4
   \       0x2A   0xBD70             POP      {R4-R6,PC}
    365              } else {
    366                if(head_minus_tail != 0){
   \                     ??RingBuf_CalculateAvailableSpace_0: (+1)
   \       0x2C   0x4628             MOV      R0,R5
   \       0x2E   0xD006             BEQ.N    ??RingBuf_CalculateAvailableSpace_1
    367                  RingBuf_SetUsedNumOfElements(this_ring_buf_u32,
    368                                                     RingBuf_GetTotalNumOfElements(this_ring_buf_u32) - abs(head_minus_tail));
   \       0x30   0x....'....        BL       RingBuf_GetTotalNumOfElements
   \       0x34   0x1B81             SUBS     R1,R0,R6
   \       0x36   0x....'....        BL       ?Subroutine1
    369                  return abs(head_minus_tail);
   \                     ??CrossCallReturnLabel_4: (+1)
   \       0x3A   0x4630             MOV      R0,R6
   \       0x3C   0xBD70             POP      {R4-R6,PC}
    370                }
    371                else
    372                { 
    373                  RingBuf_SetUsedNumOfElements(this_ring_buf_u32, RingBuf_GetTotalNumOfElements(this_ring_buf_u32) - 1);
   \                     ??RingBuf_CalculateAvailableSpace_1: (+1)
   \       0x3E   0x....'....        BL       RingBuf_GetTotalNumOfElements
   \       0x42   0x1E41             SUBS     R1,R0,#+1
   \       0x44   0x....'....        BL       ?Subroutine1
    374                  return RingBuf_GetTotalNumOfElements(this_ring_buf_u32);
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x48   0x4628             MOV      R0,R5
   \       0x4A   0xE8BD 0x4070      POP      {R4-R6,LR}
   \       0x4E   0x....             B.N      RingBuf_GetTotalNumOfElements
    375                }
    376              }  
    377          }
    378          
    379          /**
    380            ********************************************************************************************************************************
    381            * @brief   Returns 
    382            * @details 
    383            * @param   this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on.
    384            * @param   p_ringBuf_u8        A pointer to the memory location where thie ring buffer instance stores it's values.
    385            * @return  Returns 
    386            ********************************************************************************************************************************
    387            */
    388          static uint8_t *RingBuf_SetPointerToRingBuf(Ring_Buf_Handle this_ring_buf_u32, uint8_t *p_ringBuf_u8) {
    389              return (*this_ring_buf_u32).p_ringBuf_u8 = p_ringBuf_u8;
    390          }
    391          
    392          /**
    393            ********************************************************************************************************************************
    394            * @brief   Returns 
    395            * @details 
    396            * @param   this_ring_buf_u32       The ring buffer handle referencing the ring buffer that the function must operate on.
    397            * @param   usedNumOfElements_s32   TODO: This function should not be accessible from outside the source file.
    398            * @return  Returns 
    399            ********************************************************************************************************************************
    400            */

   \                                 In section .text, align 2, keep-with-next
    401          static uint8_t RingBuf_SetUsedNumOfElements(Ring_Buf_Handle this_ring_buf_u32, uint32_t usedNumOfElements_s32) {
    402              return (*this_ring_buf_u32).usedNumOfElements_s32 = usedNumOfElements_s32;
   \                     RingBuf_SetUsedNumOfElements: (+1)
   \        0x0   0x60C1             STR      R1,[R0, #+12]
   \        0x2   0xB2C8             UXTB     R0,R1
   \        0x4   0x4770             BX       LR               ;; return
    403          }
    404          
    405          /**
    406            ********************************************************************************************************************************
    407            * @brief   Returns 
    408            * @details 
    409            * @param   this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on.
    410            * @return  Returns 
    411            ********************************************************************************************************************************
    412            */

   \                                 In section .text, align 2, keep-with-next
    413          static uint8_t RingBuf_GetTotalNumOfElements(Ring_Buf_Handle this_ring_buf_u32) {
    414              return (*this_ring_buf_u32).totalNumOfElements_u32;
   \                     RingBuf_GetTotalNumOfElements: (+1)
   \        0x0   0x6900             LDR      R0,[R0, #+16]
   \        0x2   0xB2C0             UXTB     R0,R0
   \        0x4   0x4770             BX       LR               ;; return
    415          }
    416          
    417          /**
    418            ********************************************************************************************************************************
    419            * @brief   Returns 
    420            * @details 
    421            * @param   this_ring_buf_u32       The ring buffer handle referencing the ring buffer that the function must operate on.
    422            * @param   totalNumOfElements_u32  TODO: This function should not be accessible from outside the source file.
    423            * @return  Returns 
    424            ********************************************************************************************************************************
    425            */
    426          static uint8_t RingBuf_SetTotalNumOfElements(Ring_Buf_Handle this_ring_buf_u32, uint32_t totalNumOfElements_u32) {
    427              (*this_ring_buf_u32).totalNumOfElements_u32 = totalNumOfElements_u32;
    428              return RingBuf_GetTotalNumOfElements(this_ring_buf_u32) == totalNumOfElements_u32;
    429          }
    430          
    431          /**
    432            ********************************************************************************************************************************
    433            * @brief   Returns 
    434            * @details 
    435            * @param   this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on.
    436            * @return  Returns 
    437            ********************************************************************************************************************************
    438            */

   \                                 In section .text, align 2, keep-with-next
    439          static uint8_t RingBuf_GetIsOverwrittingAllowed(Ring_Buf_Handle this_ring_buf_u32) {
    440              return (*this_ring_buf_u32).is_OverwrittingAllowed_u8;
   \                     RingBuf_GetIsOverwrittingAllowed: (+1)
   \        0x0   0x7D00             LDRB     R0,[R0, #+20]
   \        0x2   0x4770             BX       LR               ;; return
    441          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \        0x0   0x....'....        DC32     Ring_mallocError
    442          
    443          /**
    444            ********************************************************************************************************************************
    445            * @brief   Returns 
    446            * @details 
    447            * @param   this_ring_buf_u32       The ring buffer handle referencing the ring buffer that the function must operate on.
    448            * @param   is_OverwrittingAllowed_u8  Flag for tracking whether it is allowed for a full ring buffer to be overwritten.
    449            * @return  Returns 
    450            ********************************************************************************************************************************
    451            */
    452          static uint8_t RingBuf_SetIsOverwrittingAllowed(Ring_Buf_Handle this_ring_buf_u32, uint8_t is_OverwrittingAllowed_u8) {
    453              return (*this_ring_buf_u32).is_OverwrittingAllowed_u8 = is_OverwrittingAllowed_u8;
    454          }
    455          
    456          /**
    457            ********************************************************************************************************************************
    458            * @brief   Returns 
    459            * @details 
    460            * @param   this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on.
    461            * @param   access_mode_u8         This flag tracks whether the ring buffer instance is read-only, write-only, or broadcasted.
    462            * @return  Returns 
    463            ********************************************************************************************************************************
    464            */
    465          static uint8_t RingBuf_SetAccessMode(Ring_Buf_Handle this_ring_buf_u32, uint8_t access_mode_u8) {
    466              return (*this_ring_buf_u32).accessMode_u8 = access_mode_u8;
    467          }
    468          
    469          /**
    470            ********************************************************************************************************************************
    471            * @brief   Returns 
    472            * @details 
    473            * @param   this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on.
    474            * @param   p_user_list_u8         A pointer to the memory location that stores the list of processes that use this ring buffer
    475            *                                     instance.
    476            * @return  Returns 
    477            ********************************************************************************************************************************
    478            */
    479          static uint8_t *RingBuf_SetUserList(Ring_Buf_Handle this_ring_buf_u32, uint8_t *p_user_list_u8) {
    480              return (*this_ring_buf_u32).p_userList_u8 = p_user_list_u8;
    481          }
    482          
    483          /**
    484            ********************************************************************************************************************************
    485            * @brief   Returns 
    486            * @details 
    487            * @param   this_ring_buf_u32   The ring buffer handle referencing the ring buffer that the function must operate on.
    488            * @param   user_list_size_u8      TODO: This function should not be accessible ALONE from outside the source file.
    489            * @return  Returns 
    490            ********************************************************************************************************************************
    491            */
    492          static uint8_t RingBuf_SetUserListSize(Ring_Buf_Handle this_ring_buf_u32, uint8_t user_list_size_u8) {
    493              return (*this_ring_buf_u32).userListSize_u8 = user_list_size_u8;
    494          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   RingBuf_CalculateAvailableSpace
         0   -> RingBuf_GetTotalNumOfElements
        16   -> RingBuf_GetTotalNumOfElements
        16   -> RingBuf_GetValueOfHead
        16   -> RingBuf_GetValueOfTail
        16   -> RingBuf_SetUsedNumOfElements
        16   -> abs
       8   RingBuf_ClearContents
         0   -> RingBuf_SetUsedNumOfElements
         8   -> RingBuf_SetValueOfHead
         8   -> RingBuf_SetValueOfTail
       0   RingBuf_GetCalculateAvailableSpace
         0   -> RingBuf_CalculateAvailableSpace
       0   RingBuf_GetIsOverwrittingAllowed
       0   RingBuf_GetOwner
      16   RingBuf_GetPhysicalAddressOfHeadPlusOffset
        16   -> RingBuf_CalculateAvailableSpace
         0   -> RingBuf_GetPointerToRingBuf
        16   -> RingBuf_GetPointerToRingBuf
        16   -> RingBuf_GetTotalNumOfElements
        16   -> RingBuf_GetUsedNumOfElements
        16   -> RingBuf_GetValueOfHead
        16   -> RingBuf_IsEmpty
       0   RingBuf_GetPointerToRingBuf
       0   RingBuf_GetProcessInstanceIndex
       0   RingBuf_GetTotalNumOfElements
       0   RingBuf_GetUsedNumOfElements
       0   RingBuf_GetValueOfHead
       0   RingBuf_GetValueOfTail
      16   RingBuf_IncHead
        16   -> RingBuf_GetTotalNumOfElements
        16   -> RingBuf_GetValueOfHead
        16   -> RingBuf_IsEmpty
        16   -> RingBuf_SetValueOfHead
      16   RingBuf_IncTail
        16   -> RingBuf_GetIsOverwrittingAllowed
        16   -> RingBuf_GetTotalNumOfElements
        16   -> RingBuf_GetValueOfTail
        16   -> RingBuf_IncHead
        16   -> RingBuf_IsFull
        16   -> RingBuf_SetValueOfTail
      32   RingBuf_Initialize
        32   -> RingBuf_SetUsedNumOfElements
        32   -> RingBuf_SetValueOfHead
        32   -> RingBuf_SetValueOfTail
        32   -> malloc
      16   RingBuf_IsEmpty
        16   -> RingBuf_GetValueOfHead
        16   -> RingBuf_GetValueOfTail
      16   RingBuf_IsFull
        16   -> RingBuf_GetTotalNumOfElements
        16   -> RingBuf_GetValueOfHead
        16   -> RingBuf_GetValueOfTail
      24   RingBuf_Observe
        24   -> RingBuf_CalculateAvailableSpace
        24   -> RingBuf_GetPhysicalAddressOfHeadPlusOffset
      24   RingBuf_ReadBlock
        24   -> RingBuf_IncHead
        24   -> RingBuf_IsEmpty
        24   -> RingBuf_SetUsedNumOfElements
      24   RingBuf_Search
        24   -> RingBuf_CalculateAvailableSpace
        24   -> RingBuf_GetPhysicalAddressOfHeadPlusOffset
       0   RingBuf_SetOwner
       0   RingBuf_SetProcessInstanceIndex
       0   RingBuf_SetSystemInstanceIndex
       0   RingBuf_SetUsedNumOfElements
       0   RingBuf_SetValueOfHead
       0   RingBuf_SetValueOfTail
      24   RingBuf_WriteBlock
        24   -> RingBuf_CalculateAvailableSpace
        24   -> RingBuf_IncTail
        24   -> RingBuf_SetUsedNumOfElements
      16   RingBuf_WriteCharacter
         0   -> RingBuf_IncTail
        16   -> RingBuf_IsFull
        16   -> RingBuf_SetUsedNumOfElements


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       6  ?Subroutine0
       4  ?Subroutine1
       4  ?Subroutine2
       8  ?Subroutine3
       6  ?Subroutine4
      80  RingBuf_CalculateAvailableSpace
      28  RingBuf_ClearContents
       2  RingBuf_GetCalculateAvailableSpace
       4  RingBuf_GetIsOverwrittingAllowed
       4  RingBuf_GetOwner
     124  RingBuf_GetPhysicalAddressOfHeadPlusOffset
       4  RingBuf_GetPointerToRingBuf
       4  RingBuf_GetProcessInstanceIndex
       6  RingBuf_GetTotalNumOfElements
       6  RingBuf_GetUsedNumOfElements
       6  RingBuf_GetValueOfHead
       6  RingBuf_GetValueOfTail
      54  RingBuf_IncHead
      64  RingBuf_IncTail
      84  RingBuf_Initialize
      24  RingBuf_IsEmpty
      50  RingBuf_IsFull
      74  RingBuf_Observe
      68  RingBuf_ReadBlock
      70  RingBuf_Search
       6  RingBuf_SetOwner
       6  RingBuf_SetProcessInstanceIndex
       6  RingBuf_SetSystemInstanceIndex
       6  RingBuf_SetUsedNumOfElements
       6  RingBuf_SetValueOfHead
       6  RingBuf_SetValueOfTail
      62  RingBuf_WriteBlock
      42  RingBuf_WriteCharacter
       1  Ring_mallocError

 
   1 byte  in section .bss
 934 bytes in section .text
 
 934 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
