###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  11:13:11
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_ll_dac.c
#    Command line      =
#        -f C:\Users\100001~1\AppData\Local\Temp\EW4F8A.tmp
#        (C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_ll_dac.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List\stm32f3xx_ll_dac.lst
#    Object file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj\stm32f3xx_ll_dac.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\Drivers\STM32F3xx_HAL_Driver\Src\stm32f3xx_ll_dac.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f3xx_ll_dac.c
      4            * @author  MCD Application Team
      5            * @brief   DAC LL module driver
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */
     19          
     20          #if defined(USE_FULL_LL_DRIVER)
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "stm32f3xx_ll_dac.h"
     24          #include "stm32f3xx_ll_bus.h"
     25          
     26          #ifdef USE_FULL_ASSERT
     27            #include "stm32_assert.h"
     28          #else
     29            #define assert_param(expr) ((void)0U)
     30          #endif
     31          
     32          /** @addtogroup STM32F3xx_LL_Driver
     33            * @{
     34            */
     35          
     36          #if defined (DAC1) || defined (DAC2)
     37          
     38          /** @addtogroup DAC_LL DAC
     39            * @{
     40            */
     41          
     42          /* Private types -------------------------------------------------------------*/
     43          /* Private variables ---------------------------------------------------------*/
     44          /* Private constants ---------------------------------------------------------*/
     45          /* Private macros ------------------------------------------------------------*/
     46          
     47          /** @addtogroup DAC_LL_Private_Macros
     48            * @{
     49            */
     50          
     51          #if defined(DAC_CHANNEL2_SUPPORT)
     52          #define IS_LL_DAC_CHANNEL(__DACX__, __DAC_CHANNEL__)                           \
     53            (                                                                            \
     54                ((__DAC_CHANNEL__) == LL_DAC_CHANNEL_1)                                  \
     55             || ((__DAC_CHANNEL__) == LL_DAC_CHANNEL_2)                                  \
     56            )
     57          #else
     58          #define IS_LL_DAC_CHANNEL(__DACX__, __DAC_CHANNEL__)                           \
     59            (                                                                            \
     60             ((__DAC_CHANNEL__) == LL_DAC_CHANNEL_1)                                     \
     61            )
     62          #endif /* DAC_CHANNEL2_SUPPORT */
     63          
     64          #if defined(STM32F303xE) || defined(STM32F398xx) || defined(STM32F303xC) || defined(STM32F358xx)
     65          #define IS_LL_DAC_TRIGGER_SOURCE(__TRIGGER_SOURCE__)                           \
     66            (   ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_SOFTWARE)                           \
     67             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM2_TRGO)                      \
     68             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM3_TRGO)                      \
     69             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM4_TRGO)                      \
     70             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM15_TRGO)                     \
     71             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM6_TRGO)                      \
     72             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM7_TRGO)                      \
     73             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_EXTI_LINE9)                     \
     74            )
     75          
     76          #elif defined(STM32F303x8) || defined(STM32F328xx) 
     77          #define IS_LL_DAC_TRIGGER_SOURCE(__TRIGGER_SOURCE__)                           \
     78            (   ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_SOFTWARE)                           \
     79             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM2_TRGO)                      \
     80             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM3_TRGO)                      \
     81             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM15_TRGO)                     \
     82             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM6_TRGO)                      \
     83             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM7_TRGO)                      \
     84             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_EXTI_LINE9)                     \
     85            )
     86          
     87          #elif defined(STM32F302xE) || defined(STM32F302xC) || defined(STM32F302x8)
     88          #define IS_LL_DAC_TRIGGER_SOURCE(__TRIGGER_SOURCE__)                           \
     89            (   ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_SOFTWARE)                           \
     90             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM2_TRGO)                      \
     91             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM3_TRGO)                      \
     92             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM4_TRGO)                      \
     93             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM15_TRGO)                     \
     94             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM6_TRGO)                      \
     95             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_EXTI_LINE9)                     \
     96            )
     97          
     98          #elif defined(STM32F301x8) || defined(STM32F318xx)
     99          #define IS_LL_DAC_TRIGGER_SOURCE(__TRIGGER_SOURCE__)                           \
    100            (   ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_SOFTWARE)                           \
    101             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM2_TRGO)                      \
    102             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM6_TRGO)                      \
    103             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM15_TRGO)                     \
    104             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_EXTI_LINE9)                     \
    105            )
    106          
    107          #elif defined(STM32F373xC) || defined(STM32F378xx)
    108          #define IS_LL_DAC_TRIGGER_SOURCE(__TRIGGER_SOURCE__)                           \
    109            (   ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_SOFTWARE)                           \
    110             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM2_TRGO)                      \
    111             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM3_TRGO)                      \
    112             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM4_TRGO)                      \
    113             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM5_TRGO)                      \
    114             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM6_TRGO)                      \
    115             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM7_TRGO)                      \
    116             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_EXTI_LINE9)                     \
    117            )
    118          
    119          #elif defined(STM32F334x8)
    120          #define IS_LL_DAC_TRIGGER_SOURCE(__TRIGGER_SOURCE__)                           \
    121            (   ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_SOFTWARE)                           \
    122             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM6_TRGO)                      \
    123             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM3_TRGO)                      \
    124             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM7_TRGO)                      \
    125             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM15_TRGO)                     \
    126             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_TIM2_TRGO)                      \
    127             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIGGER_HRTIM1_DACTRG2)                  \
    128             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIGGER_HRTIM1_DACTRG3)                  \
    129             || ((__TRIGGER_SOURCE__) == LL_DAC_TRIG_EXT_EXTI_LINE9)                     \
    130            )
    131          #endif
    132          
    133          #define IS_LL_DAC_WAVE_AUTO_GENER_MODE(__WAVE_AUTO_GENERATION_MODE__)           \
    134            (   ((__WAVE_AUTO_GENERATION_MODE__) == LL_DAC_WAVE_AUTO_GENERATION_NONE)     \
    135             || ((__WAVE_AUTO_GENERATION_MODE__) == LL_DAC_WAVE_AUTO_GENERATION_NOISE)    \
    136             || ((__WAVE_AUTO_GENERATION_MODE__) == LL_DAC_WAVE_AUTO_GENERATION_TRIANGLE) \
    137            )
    138          
    139          #define IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(__WAVE_AUTO_GENERATION_CONFIG__)      \
    140            (   ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_NOISE_LFSR_UNMASK_BIT0)     \
    141             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_NOISE_LFSR_UNMASK_BITS1_0)  \
    142             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_NOISE_LFSR_UNMASK_BITS2_0)  \
    143             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_NOISE_LFSR_UNMASK_BITS3_0)  \
    144             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_NOISE_LFSR_UNMASK_BITS4_0)  \
    145             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_NOISE_LFSR_UNMASK_BITS5_0)  \
    146             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_NOISE_LFSR_UNMASK_BITS6_0)  \
    147             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_NOISE_LFSR_UNMASK_BITS7_0)  \
    148             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_NOISE_LFSR_UNMASK_BITS8_0)  \
    149             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_NOISE_LFSR_UNMASK_BITS9_0)  \
    150             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_NOISE_LFSR_UNMASK_BITS10_0) \
    151             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_NOISE_LFSR_UNMASK_BITS11_0) \
    152             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_TRIANGLE_AMPLITUDE_1)       \
    153             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_TRIANGLE_AMPLITUDE_3)       \
    154             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_TRIANGLE_AMPLITUDE_7)       \
    155             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_TRIANGLE_AMPLITUDE_15)      \
    156             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_TRIANGLE_AMPLITUDE_31)      \
    157             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_TRIANGLE_AMPLITUDE_63)      \
    158             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_TRIANGLE_AMPLITUDE_127)     \
    159             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_TRIANGLE_AMPLITUDE_255)     \
    160             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_TRIANGLE_AMPLITUDE_511)     \
    161             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_TRIANGLE_AMPLITUDE_1023)    \
    162             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_TRIANGLE_AMPLITUDE_2047)    \
    163             || ((__WAVE_AUTO_GENERATION_CONFIG__) == LL_DAC_TRIANGLE_AMPLITUDE_4095)    \
    164            )
    165          
    166          #define IS_LL_DAC_OUTPUT_BUFFER(__OUTPUT_BUFFER__)                             \
    167            (   ((__OUTPUT_BUFFER__) == LL_DAC_OUTPUT_BUFFER_ENABLE)                     \
    168             || ((__OUTPUT_BUFFER__) == LL_DAC_OUTPUT_BUFFER_DISABLE)                    \
    169            )
    170          
    171          /**
    172            * @}
    173            */
    174          
    175          
    176          /* Private function prototypes -----------------------------------------------*/
    177          
    178          /* Exported functions --------------------------------------------------------*/
    179          /** @addtogroup DAC_LL_Exported_Functions
    180            * @{
    181            */
    182          
    183          /** @addtogroup DAC_LL_EF_Init
    184            * @{
    185            */
    186          
    187          /**
    188            * @brief  De-initialize registers of the selected DAC instance
    189            *         to their default reset values.
    190            * @param  DACx DAC instance
    191            * @retval An ErrorStatus enumeration value:
    192            *          - SUCCESS: DAC registers are de-initialized
    193            *          - ERROR: not applicable
    194            */

   \                                 In section .text, align 2, keep-with-next
    195          ErrorStatus LL_DAC_DeInit(DAC_TypeDef *DACx)
    196          {
    197            /* Check the parameters */
    198            assert_param(IS_DAC_ALL_INSTANCE(DACx));
    199            
    200            if(DACx == DAC1)
   \                     LL_DAC_DeInit: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable0  ;; 0x40007400
   \        0x2   0x4288             CMP      R0,R1
   \        0x4   0xD108             BNE.N    ??LL_DAC_DeInit_0
    201            {
    202              /* Force reset of DAC clock */
    203              LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_DAC1);
   \        0x6   0x....             LDR.N    R0,??DataTable0_1  ;; 0x40021010
   \        0x8   0x6802             LDR      R2,[R0, #+0]
   \        0xA   0xF042 0x5200      ORR      R2,R2,#0x20000000
   \        0xE   0x6002             STR      R2,[R0, #+0]
    204              
    205              /* Release reset of DAC clock */
    206              LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_DAC1);
   \       0x10   0x6801             LDR      R1,[R0, #+0]
   \       0x12   0xF021 0x5100      BIC      R1,R1,#0x20000000
   \       0x16   0x6001             STR      R1,[R0, #+0]
    207            }
    208          #if defined(DAC2)
    209            else
    210            {
    211              /* Force reset of DAC clock */
    212              LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_DAC2);
    213              
    214              /* Release reset of DAC clock */
    215              LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_DAC2);
    216            }
    217          #endif
    218            return SUCCESS;
   \                     ??LL_DAC_DeInit_0: (+1)
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x4770             BX       LR               ;; return
    219          }
    220          
    221          /**
    222            * @brief  Initialize some features of DAC instance.
    223            * @note   The setting of these parameters by function @ref LL_DAC_Init()
    224            *         is conditioned to DAC state:
    225            *         DAC instance must be disabled.
    226            * @param  DACx DAC instance
    227            * @param  DAC_Channel This parameter can be one of the following values:
    228            *         @arg @ref LL_DAC_CHANNEL_1
    229            *         @arg @ref LL_DAC_CHANNEL_2 (1)
    230            *         
    231            *         (1) On this STM32 serie, parameter not available on all devices.
    232            *             Refer to device datasheet for channels availability.
    233            * @param  DAC_InitStruct Pointer to a @ref LL_DAC_InitTypeDef structure
    234            * @retval An ErrorStatus enumeration value:
    235            *          - SUCCESS: DAC registers are initialized
    236            *          - ERROR: DAC registers are not initialized
    237            */

   \                                 In section .text, align 2, keep-with-next
    238          ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
    239          {
   \                     LL_DAC_Init: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
    240            ErrorStatus status = SUCCESS;
    241            
    242            /* Check the parameters */
    243            assert_param(IS_DAC_ALL_INSTANCE(DACx));
    244            assert_param(IS_LL_DAC_CHANNEL(DACx, DAC_Channel));
    245            assert_param(IS_LL_DAC_TRIGGER_SOURCE(DAC_InitStruct->TriggerSource));
    246            assert_param(IS_LL_DAC_OUTPUT_BUFFER(DAC_InitStruct->OutputBuffer));
    247            assert_param(IS_LL_DAC_WAVE_AUTO_GENER_MODE(DAC_InitStruct->WaveAutoGeneration));
    248            if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
    249            {
    250              assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
    251            }
    252            
    253            /* Note: Hardware constraint (refer to description of this function)        */
    254            /*       DAC instance must be disabled.                                     */
    255            if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
   \        0x2   0xF001 0x0110      AND      R1,R1,#0x10
   \        0x6   0x2401             MOVS     R4,#+1
   \        0x8   0x6805             LDR      R5,[R0, #+0]
   \        0xA   0x408C             LSLS     R4,R4,R1
   \        0xC   0x2300             MOVS     R3,#+0
   \        0xE   0x4025             ANDS     R5,R4,R5
   \       0x10   0x42A5             CMP      R5,R4
   \       0x12   0xBF08             IT       EQ
   \       0x14   0x2301             MOVEQ    R3,#+1
    256            {
    257              /* Configuration of DAC channel:                                          */
    258              /*  - TriggerSource                                                       */
    259              /*  - WaveAutoGeneration                                                  */
    260              /*  - OutputBuffer                                                        */
    261              if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
    262              {
    263                MODIFY_REG(DACx->CR,
    264                           (  DAC_CR_TSEL1
    265                            | DAC_CR_WAVE1
    266                            | DAC_CR_MAMP1
    267                            | DAC_CR_BOFF1
    268                           ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
    269                          ,
    270                           (  DAC_InitStruct->TriggerSource
    271                            | DAC_InitStruct->WaveAutoGeneration
    272                            | DAC_InitStruct->WaveAutoGenerationConfig
    273                            | DAC_InitStruct->OutputBuffer
    274                           ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
    275                          );
    276              }
    277              else
    278              {
    279                MODIFY_REG(DACx->CR,
    280                           (  DAC_CR_TSEL1
    281                            | DAC_CR_WAVE1
    282                            | DAC_CR_BOFF1
    283                           ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
    284                          ,
    285                           (  DAC_InitStruct->TriggerSource
    286                            | LL_DAC_WAVE_AUTO_GENERATION_NONE
    287                            | DAC_InitStruct->OutputBuffer
    288                           ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
    289                          );
    290              }
    291            }
    292            else
    293            {
    294              /* Initialization error: DAC instance is not disabled.                    */
    295              status = ERROR;
   \       0x16   0xD01B             BEQ.N    ??LL_DAC_Init_0
    296            }
   \       0x18   0x68D5             LDR      R5,[R2, #+12]
   \       0x1A   0x6854             LDR      R4,[R2, #+4]
   \       0x1C   0x6816             LDR      R6,[R2, #+0]
   \       0x1E   0xB174             CBZ.N    R4,??LL_DAC_Init_1
   \       0x20   0x4334             ORRS     R4,R4,R6
   \       0x22   0x6807             LDR      R7,[R0, #+0]
   \       0x24   0x6892             LDR      R2,[R2, #+8]
   \       0x26   0xF640 0x7CFA      MOVW     R12,#+4090
   \       0x2A   0x4314             ORRS     R4,R2,R4
   \       0x2C   0xFA0C 0xFC01      LSL      R12,R12,R1
   \       0x30   0x4325             ORRS     R5,R5,R4
   \       0x32   0xEA27 0x070C      BIC      R7,R7,R12
   \       0x36   0xFA05 0xF101      LSL      R1,R5,R1
   \       0x3A   0x4339             ORRS     R1,R1,R7
   \       0x3C   0xE007             B.N      ??LL_DAC_Init_2
   \                     ??LL_DAC_Init_1: (+1)
   \       0x3E   0x6804             LDR      R4,[R0, #+0]
   \       0x40   0x27FA             MOVS     R7,#+250
   \       0x42   0x408F             LSLS     R7,R7,R1
   \       0x44   0x4335             ORRS     R5,R5,R6
   \       0x46   0x43BC             BICS     R4,R4,R7
   \       0x48   0xFA05 0xF101      LSL      R1,R5,R1
   \       0x4C   0x4321             ORRS     R1,R1,R4
   \                     ??LL_DAC_Init_2: (+1)
   \       0x4E   0x6001             STR      R1,[R0, #+0]
    297            return status;
   \                     ??LL_DAC_Init_0: (+1)
   \       0x50   0x4618             MOV      R0,R3
   \       0x52   0xBDF0             POP      {R4-R7,PC}       ;; return
    298          }
    299          
    300          /**
    301            * @brief Set each @ref LL_DAC_InitTypeDef field to default value.
    302            * @param DAC_InitStruct pointer to a @ref LL_DAC_InitTypeDef structure
    303            *                       whose fields will be set to default values.
    304            * @retval None
    305            */

   \                                 In section .text, align 2, keep-with-next
    306          void LL_DAC_StructInit(LL_DAC_InitTypeDef *DAC_InitStruct)
    307          {
    308            /* Set DAC_InitStruct fields to default values */
    309            DAC_InitStruct->TriggerSource            = LL_DAC_TRIG_SOFTWARE;
   \                     LL_DAC_StructInit: (+1)
   \        0x0   0x2138             MOVS     R1,#+56
   \        0x2   0x6001             STR      R1,[R0, #+0]
    310            DAC_InitStruct->WaveAutoGeneration       = LL_DAC_WAVE_AUTO_GENERATION_NONE;
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x6042             STR      R2,[R0, #+4]
    311            /* Note: Parameter discarded if wave auto generation is disabled,           */
    312            /*       set anyway to its default value.                                   */
    313            DAC_InitStruct->WaveAutoGenerationConfig = LL_DAC_NOISE_LFSR_UNMASK_BIT0;
   \        0x8   0x6082             STR      R2,[R0, #+8]
    314            DAC_InitStruct->OutputBuffer             = LL_DAC_OUTPUT_BUFFER_ENABLE;
   \        0xA   0x60C2             STR      R2,[R0, #+12]
    315          }
   \        0xC   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \        0x0   0x4000'7400        DC32     0x40007400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0_1:
   \        0x0   0x4002'1010        DC32     0x40021010
    316          
    317          /**
    318            * @}
    319            */
    320          
    321          /**
    322            * @}
    323            */
    324          
    325          /**
    326            * @}
    327            */
    328          
    329          #endif /* DAC1 || DAC2 */
    330          
    331          /**
    332            * @}
    333            */
    334          
    335          #endif /* USE_FULL_LL_DRIVER */
    336          
    337          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   LL_DAC_DeInit
      20   LL_DAC_Init
       0   LL_DAC_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
       4  ??DataTable0_1
      28  LL_DAC_DeInit
      84  LL_DAC_Init
      14  LL_DAC_StructInit

 
 134 bytes in section .text
 
 134 bytes of CODE memory

Errors: none
Warnings: none
