###############################################################################
#
# IAR ANSI C/C++ Compiler V8.50.9.278/W32 for ARM         23/Feb/2021  14:03:26
# Copyright 1999-2020 IAR Systems AB.
#
#    Cpu mode             
#    Endian            =  little
#    Source file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\MCSDK_v5.4.4-Full\MotorControl\MCSDK\UILibrary\Src\dac_common_ui.c
#    Command line      =
#        -f C:\Users\100001~1\AppData\Local\Temp\EW2C50.tmp
#        (C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\MCSDK_v5.4.4-Full\MotorControl\MCSDK\UILibrary\Src\dac_common_ui.c
#        -D ARM_MATH_CM4 -D USE_FULL_LL_DRIVER -D USE_HAL_DRIVER -D STM32F302x8
#        -lCN
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List
#        -o
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\arm\inc\c\DLib_Config_Full.h" -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/STM32F3xx_HAL_Driver/Inc/Legacy\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/Any/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/MCLib/F3xx/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/UILibrary/Inc\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../MCSDK_v5.4.4-Full/MotorControl/MCSDK/SystemDriveParams\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Device/ST/STM32F3xx/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM/../Drivers/CMSIS/DSP/Include\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Drivers\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Features\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Kernel\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Memory\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Regal\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\UniversalProtocol\\
#        -I
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\..\FlexMouse\Motor\\
#        -Ohz)
#    Locale            =  C
#    List file         =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\List\dac_common_ui.lst
#    Object file       =
#        C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\EWARM\1.3kW_GMI\Obj\dac_common_ui.o
#    Runtime model:       
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\Users\100001305\Documents\GitHub\gmi_to_ecm48_msa_f301\MCSDK_v5.4.4-Full\MotorControl\MCSDK\UILibrary\Src\dac_common_ui.c
      1          /**
      2            ******************************************************************************
      3            * @file    dac_common_ui.c
      4            * @author  Motor Control SDK Team, ST Microelectronics
      5            * @brief   This file provides firmware functions that implement the following features
      6            *          of the CCC component of the Motor Control SDK:
      7            *           + Set up the DAC outputs
      8            *           + get the current DAC channel selected output.
      9            *           + Set the value of the "User DAC channel".
     10            *           + get the value of the "User DAC channel".
     11            *
     12            ******************************************************************************
     13            * @attention
     14            *
     15            * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
     16            * All rights reserved.</center></h2>
     17            *
     18            * This software component is licensed by ST under Ultimate Liberty license
     19            * SLA0044, the "License"; You may not use this file except in compliance with
     20            * the License. You may obtain a copy of the License at:
     21            *                             www.st.com/SLA0044
     22            *
     23            ******************************************************************************
     24            */
     25          
     26          /* Includes ------------------------------------------------------------------*/
     27          #include "dac_common_ui.h"
     28          
     29          /** @addtogroup MCSDK
     30            * @{
     31            */
     32          
     33          /**
     34           * @addtogroup MCUI
     35           * @{
     36           */
     37          
     38          /** @defgroup dac_common_ui Common DAC User Interface
     39            * @brief DAC User Interface implementation
     40            *
     41            * Digital to Analog Converter common component. In Motor Control context, the DAC is used for
     42            * debug purposes by outputting information with low overhead. It is particularly useful to
     43            * output fast changing analog-like data as voltage references or measured currents to compare
     44            * them with measurements made with other means, for instance.
     45            *
     46            * @{
     47            */
     48          
     49          
     50          /**
     51            * @brief  Set up the DAC outputs. The selected
     52            *         variables will be provided in the related output channels after next
     53            *         DACExec.
     54            * @param  user interface handle.
     55            * @param  bChannel the DAC channel to be programmed. It must be one of the
     56            *         exported channels Ex. DAC_CH0.
     57            * @param  bVariable the variables to be provided in out through the selected
     58            *         channel. It must be one of the exported UI register Ex.
     59            *         MC_PROTOCOL_REG_I_A.
     60            * @retval none.
     61            */

   \                                 In section .text, align 2
     62          __weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
     63                                        MC_Protocol_REG_t bVariable)
     64          {
     65            DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
     66            pDacHandle->bChannel_variable[bChannel] = bVariable;
   \                     DAC_SetChannelConfig: (+1)
   \        0x0   0x4408             ADD      R0,R0,R1
   \        0x2   0xF880 0x2030      STRB     R2,[R0, #+48]
     67          }
   \        0x6   0x4770             BX       LR               ;; return
     68          
     69          /**
     70            * @brief  get the current DAC channel selected output.
     71            * @param  user interface handle.
     72            * @param  bChannel the inspected DAC channel. It must be one of the
     73            *         exported channels (Ex. DAC_CH0).
     74            * @retval MC_Protocol_REG_t The variables provided in out through the inspected
     75            *         channel. It will be one of the exported UI register (Ex.
     76            *         MC_PROTOCOL_REG_I_A).
     77            */

   \                                 In section .text, align 2
     78          __weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
     79          {
     80            DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
     81            return (pDacHandle->bChannel_variable[bChannel]);
   \                     DAC_GetChannelConfig: (+1)
   \        0x0   0x4408             ADD      R0,R0,R1
   \        0x2   0xF890 0x0030      LDRB     R0,[R0, #+48]
   \        0x6   0x4770             BX       LR               ;; return
     82          }
     83          
     84          /**
     85            * @brief  Set the value of the "User DAC channel".
     86            * @param  user interface handle
     87            * @param  bUserChNumber the "User DAC channel" to be programmed.
     88            * @param  hValue the value to be put in output.
     89            * @retval none.
     90            */

   \                                 In section .text, align 2
     91          __weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
     92                                        int16_t hValue)
     93          {
     94            DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
     95            pDacHandle->hUserValue[bUserChNumber] = hValue;
   \                     DAC_SetUserChannelValue: (+1)
   \        0x0   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \        0x4   0x8642             STRH     R2,[R0, #+50]
     96          }
   \        0x6   0x4770             BX       LR               ;; return
     97          
     98          /**
     99            * @brief  get the value of the "User DAC channel".
    100            * @param  user interface handle
    101            * @param  bUserChNumber the "User DAC channel" to be programmed.
    102            * @retval none.
    103            */

   \                                 In section .text, align 2
    104          __weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
    105          {
    106            DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
    107            return (pDacHandle->hUserValue[bUserChNumber]);
   \                     DAC_GetUserChannelValue: (+1)
   \        0x0   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \        0x4   0xF9B0 0x0032      LDRSH    R0,[R0, #+50]
   \        0x8   0x4770             BX       LR               ;; return
    108          }
    109          
    110          /**
    111            * @}
    112            */
    113          
    114          /**
    115            * @}
    116            */
    117          
    118          /**
    119            * @}
    120            */
    121          
    122          /**
    123            * @}
    124            */
    125          
    126          /******************* (C) COPYRIGHT 2019 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DAC_GetChannelConfig
       0   DAC_GetUserChannelValue
       0   DAC_SetChannelConfig
       0   DAC_SetUserChannelValue


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  DAC_GetChannelConfig
      10  DAC_GetUserChannelValue
       8  DAC_SetChannelConfig
       8  DAC_SetUserChannelValue

 
 34 bytes in section .text
 
 0 bytes of CODE memory (+ 34 bytes shared)

Errors: none
Warnings: none
